
Concurrency training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004218  08004218  00005218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  080042c4  080042c4  000052c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080042d4  080042d4  000052d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080042dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000070  0800434c  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  0800434c  00006384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104b3  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294a  00000000  00000000  00016553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00018ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c68  00000000  00000000  00019e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186d4  00000000  00000000  0001aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000124a0  00000000  00000000  000331c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f183  00000000  00000000  00045664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d47e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000463c  00000000  00000000  000d482c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d8e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004200 	.word	0x08004200

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004200 	.word	0x08004200

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZN14QueueableClassC1Ev>:
//should have. It has to have methods for determining if its done executing.
//it should be done in a execute method.
 class QueueableClass{
 public:
	 //CONSTRUCTOR
	 QueueableClass(){
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	4a07      	ldr	r2, [pc, #28]	@ (80004f0 <_ZN14QueueableClassC1Ev+0x28>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	601a      	str	r2, [r3, #0]
		 this -> state = QueueableReturnValue::DONE;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	2200      	movs	r2, #0
 80004da:	721a      	strb	r2, [r3, #8]
		 this -> nextClass = nullptr;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
	 }
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	08004244 	.word	0x08004244

080004f4 <_ZN14QueueableClassD1Ev>:

	 ~QueueableClass(){/*NOTHING TO SEE HERE*/ }
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <_ZN14QueueableClassD1Ev+0x1c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	08004244 	.word	0x08004244

08000514 <_ZN14QueueableClass8getStateEv>:

	 virtual QueueableReturnValue getState(void)final{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
		 return this -> state;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	7a1b      	ldrb	r3, [r3, #8]
	 }
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <_ZN14QueueableClass12setNextClassEPS_>:

	 virtual void setNextClass(QueueableClass* next)final{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	 	 this -> nextClass = next;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	605a      	str	r2, [r3, #4]
	 }
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_ZN14QueueableClass12getNextClassEv>:

	 virtual QueueableClass* getNextClass(void) final{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
		 return this -> nextClass;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
	 }
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <_ZN14QueueableClass7requeueEv>:
	 //this method gives the object the ability to decide what to
	 //when the process tells it to requeue.
	 //THIS IS AN EXAMPLE OF WHAT TO DO, BUT YOU SHOULD SO WHAT SOUITS
	 //YOUR CODE BETTER. KEEP IN MIND THE INTEGRITY OF THE LINKED LIST!
	 virtual void requeue(){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
		 setState(TODO);//in this case it restarts the buzzer timer.
 8000568:	2101      	movs	r1, #1
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f86a 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <_ZN14QueueableClass7enqueueEv>:

	 //WHAT DOES THE OBJECT DO WHEN IT GETS IN QUEUE?
	 //IN THIS IMPLEMENTATION, IT JUST CHANGES THE STATE, BUT
	 //YOU COULD REWRITE THIS TO FIT YOUR NEEDS
	 virtual void enqueue(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
		 setState(TODO);
 8000580:	2101      	movs	r1, #1
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 f85e 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <_ZN14QueueableClass7EXECUTEEv>:

	 //this method has to be implemented, but here is an example:
	 virtual void EXECUTE(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
		 static uint32_t prevTime = 0;
		 static uint32_t currentTime = 0;
		 uint32_t elapsedTime;
		 static uint8_t state = 0;

		 if(getState() == TODO){
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ffbb 	bl	8000514 <_ZN14QueueableClass8getStateEv>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	bf0c      	ite	eq
 80005a4:	2301      	moveq	r3, #1
 80005a6:	2300      	movne	r3, #0
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d00b      	beq.n	80005c6 <_ZN14QueueableClass7EXECUTEEv+0x36>
		 	state = 1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
		 	setState(DOING);
 80005b4:	2102      	movs	r1, #2
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f844 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	prevTime = HAL_GetTick();//get the time when the change accurred
 80005bc:	f001 f852 	bl	8001664 <HAL_GetTick>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 80005c4:	6013      	str	r3, [r2, #0]
		 }

		 if(state){//if the function is in the on state, turns the toPerform on;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d02d      	beq.n	800062a <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   	GPIOB -> ODR |= GPIO_PIN_2;//SET BUZZER PIN;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <_ZN14QueueableClass7EXECUTEEv+0xac>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a1a      	ldr	r2, [pc, #104]	@ (800063c <_ZN14QueueableClass7EXECUTEEv+0xac>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6153      	str	r3, [r2, #20]
		   	//now we check if the delay time has elapsed.
		   	//first we acquire the current time
		  	currentTime = HAL_GetTick();
 80005da:	f001 f843 	bl	8001664 <HAL_GetTick>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 80005e2:	6013      	str	r3, [r2, #0]
		   	if (currentTime >= prevTime) {//making sure to account for roll over
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d306      	bcc.n	80005fe <_ZN14QueueableClass7EXECUTEEv+0x6e>
		   		elapsedTime = currentTime - prevTime;
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e005      	b.n	800060a <_ZN14QueueableClass7EXECUTEEv+0x7a>
		   	} else {
		   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	60fb      	str	r3, [r7, #12]
		   	}
		   	//if the time has run out, we turn the toPerform off
		   	if(elapsedTime >= delay){
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b0e      	cmp	r3, #14
 800060e:	d90c      	bls.n	800062a <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   		GPIOB -> ODR &= ~GPIO_PIN_2; //RESET BUZZER PIN;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <_ZN14QueueableClass7EXECUTEEv+0xac>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a09      	ldr	r2, [pc, #36]	@ (800063c <_ZN14QueueableClass7EXECUTEEv+0xac>)
 8000616:	f023 0304 	bic.w	r3, r3, #4
 800061a:	6153      	str	r3, [r2, #20]
		   		state = 0;//we clear the state.
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 8000622:	2100      	movs	r1, #0
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f80d 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	}
		   }
	 }
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000094 	.word	0x20000094
 8000638:	2000008c 	.word	0x2000008c
 800063c:	40020400 	.word	0x40020400
 8000640:	20000090 	.word	0x20000090

08000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>:
 protected:
	 virtual void setState(QueueableReturnValue state)final{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	 	 		 this -> state = state;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	78fa      	ldrb	r2, [r7, #3]
 8000654:	721a      	strb	r2, [r3, #8]
	 	 	 }
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
	...

08000664 <_ZN9flashOnce7EXECUTEEv>:
QueueableClass beep;


class flashOnce: public QueueableClass{
public:
	void EXECUTE(void){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
			 static uint32_t prevTime = 0;
			 static uint32_t currentTime = 0;
			 uint32_t elapsedTime;
			 static uint8_t state = 0;

			 if(getState() == TODO){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff50 	bl	8000514 <_ZN14QueueableClass8getStateEv>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	bf0c      	ite	eq
 800067a:	2301      	moveq	r3, #1
 800067c:	2300      	movne	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00c      	beq.n	800069e <_ZN9flashOnce7EXECUTEEv+0x3a>
			 	state = 1;
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <_ZN9flashOnce7EXECUTEEv+0xac>)
 8000686:	2201      	movs	r2, #1
 8000688:	701a      	strb	r2, [r3, #0]
			 	setState(DOING);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2102      	movs	r1, #2
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ffd8 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	prevTime = HAL_GetTick();//get the time when the change accurred
 8000694:	f000 ffe6 	bl	8001664 <HAL_GetTick>
 8000698:	4603      	mov	r3, r0
 800069a:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 800069c:	6013      	str	r3, [r2, #0]
			 }

			 if(state){//if the function is in the on state, turns the toPerform on;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <_ZN9flashOnce7EXECUTEEv+0xac>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d02f      	beq.n	8000706 <_ZN9flashOnce7EXECUTEEv+0xa2>
			   	GPIOA -> ODR |= GPIO_PIN_4;//SET BUZZER PIN;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 80006ac:	f043 0310 	orr.w	r3, r3, #16
 80006b0:	6153      	str	r3, [r2, #20]
			   	//now we check if the delay time has elapsed.
			   	//first we acquire the current time
			  	currentTime = HAL_GetTick();
 80006b2:	f000 ffd7 	bl	8001664 <HAL_GetTick>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <_ZN9flashOnce7EXECUTEEv+0xb8>)
 80006ba:	6013      	str	r3, [r2, #0]
			   	if (currentTime >= prevTime) {//making sure to account for roll over
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <_ZN9flashOnce7EXECUTEEv+0xb8>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d306      	bcc.n	80006d6 <_ZN9flashOnce7EXECUTEEv+0x72>
			   		elapsedTime = currentTime - prevTime;
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <_ZN9flashOnce7EXECUTEEv+0xb8>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	e005      	b.n	80006e2 <_ZN9flashOnce7EXECUTEEv+0x7e>
			   	} else {
			   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <_ZN9flashOnce7EXECUTEEv+0xb8>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	60fb      	str	r3, [r7, #12]
			   	}
			   	//if the time has run out, we turn the toPerform off
			   	if(elapsedTime >= 1000){
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006e8:	d30d      	bcc.n	8000706 <_ZN9flashOnce7EXECUTEEv+0xa2>
			   		GPIOA -> ODR &= ~GPIO_PIN_4; //RESET BUZZER PIN;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 80006f0:	f023 0310 	bic.w	r3, r3, #16
 80006f4:	6153      	str	r3, [r2, #20]
			   		state = 0;//we clear the state.
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <_ZN9flashOnce7EXECUTEEv+0xac>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff9f 	bl	8000644 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	}
			   }
		 }
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000ac 	.word	0x200000ac
 8000714:	200000a4 	.word	0x200000a4
 8000718:	40020000 	.word	0x40020000
 800071c:	200000a8 	.word	0x200000a8

08000720 <_ZN9flashOnceC1Ev>:
class flashOnce: public QueueableClass{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff fecc 	bl	80004c8 <_ZN14QueueableClassC1Ev>
 8000730:	4a03      	ldr	r2, [pc, #12]	@ (8000740 <_ZN9flashOnceC1Ev+0x20>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08004220 	.word	0x08004220

08000744 <_Z17beepActionWrapperv>:

flashOnce flashOnce;
Async_Event_Loop AsyncEventLoop;
	//TODO FIND A WAY TO SIMPLIFY THIS
	//IT NEEDS THIS WRAPPER TO CONFORM TO THE EXPECTED FUNCTION SIGNATURE
	void beepActionWrapper(){
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&beep);
 8000748:	4902      	ldr	r1, [pc, #8]	@ (8000754 <_Z17beepActionWrapperv+0x10>)
 800074a:	4803      	ldr	r0, [pc, #12]	@ (8000758 <_Z17beepActionWrapperv+0x14>)
 800074c:	f000 fd4c 	bl	80011e8 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000098 	.word	0x20000098
 8000758:	200000bc 	.word	0x200000bc

0800075c <ButtonEncoderWrapper>:
	void ButtonEncoderWrapper(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&flashOnce);
 8000760:	4902      	ldr	r1, [pc, #8]	@ (800076c <ButtonEncoderWrapper+0x10>)
 8000762:	4803      	ldr	r0, [pc, #12]	@ (8000770 <ButtonEncoderWrapper+0x14>)
 8000764:	f000 fd40 	bl	80011e8 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200000b0 	.word	0x200000b0
 8000770:	200000bc 	.word	0x200000bc

08000774 <_Z7MainCPPv>:
		-10,
		10,
		beepActionWrapper
		);
//CPP ENTRY POINT
void MainCPP(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	//SETUP START

	GPIOC -> ODR |= GPIO_PIN_13;//onboard blue led OFF
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <_Z7MainCPPv+0x28>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <_Z7MainCPPv+0x28>)
 800077e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000782:	6153      	str	r3, [r2, #20]

	//MAIN LOOP START
	while(1){


		GPIOB -> ODR ^= GPIO_PIN_10;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <_Z7MainCPPv+0x2c>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <_Z7MainCPPv+0x2c>)
 800078a:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 800078e:	6153      	str	r3, [r2, #20]
		HAL_Delay(100);
 8000790:	2064      	movs	r0, #100	@ 0x64
 8000792:	f000 ff73 	bl	800167c <HAL_Delay>
		GPIOB -> ODR ^= GPIO_PIN_10;
 8000796:	bf00      	nop
 8000798:	e7f4      	b.n	8000784 <_Z7MainCPPv+0x10>
 800079a:	bf00      	nop
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020400 	.word	0x40020400

080007a4 <EVENT_LOOP_WRAPPER>:
/*********************************************************/
/*               AWAYS LEAVE IT FOR LAST                 */
/*********************************************************/
extern "C"//TODO FIND A WAY TO SIMPLIFY THIS
{
	void EVENT_LOOP_WRAPPER(void){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
		AsyncEventLoop.ASYNC_LOOP();
 80007a8:	4802      	ldr	r0, [pc, #8]	@ (80007b4 <EVENT_LOOP_WRAPPER+0x10>)
 80007aa:	f000 fdbd 	bl	8001328 <_ZN16Async_Event_Loop10ASYNC_LOOPEv>
	}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000bc 	.word	0x200000bc

080007b8 <RotaryEncoderWrapper>:
	void RotaryEncoderWrapper(){//TODO This needs to be done here
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
		encoder.handleInterrupt();
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <RotaryEncoderWrapper+0x10>)
 80007be:	f000 fe61 	bl	8001484 <_ZN6KY_04015handleInterruptEv>
	}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000cc 	.word	0x200000cc

080007cc <MainC>:
	void MainC(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
		MainCPP();
 80007d0:	f7ff ffd0 	bl	8000774 <_Z7MainCPPv>
	}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN9flashOnceD1Ev>:
class flashOnce: public QueueableClass{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	4a05      	ldr	r2, [pc, #20]	@ (80007f8 <_ZN9flashOnceD1Ev+0x20>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe83 	bl	80004f4 <_ZN14QueueableClassD1Ev>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	08004220 	.word	0x08004220

080007fc <_Z41__static_initialization_and_destruction_0ii>:
}
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af06      	add	r7, sp, #24
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d11e      	bne.n	800084a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000812:	4293      	cmp	r3, r2
 8000814:	d119      	bne.n	800084a <_Z41__static_initialization_and_destruction_0ii+0x4e>
QueueableClass beep;
 8000816:	4819      	ldr	r0, [pc, #100]	@ (800087c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000818:	f7ff fe56 	bl	80004c8 <_ZN14QueueableClassC1Ev>
flashOnce flashOnce;
 800081c:	4818      	ldr	r0, [pc, #96]	@ (8000880 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800081e:	f7ff ff7f 	bl	8000720 <_ZN9flashOnceC1Ev>
Async_Event_Loop AsyncEventLoop;
 8000822:	4818      	ldr	r0, [pc, #96]	@ (8000884 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000824:	f000 fc58 	bl	80010d8 <_ZN16Async_Event_LoopC1Ev>
		);
 8000828:	2301      	movs	r3, #1
 800082a:	9304      	str	r3, [sp, #16]
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800082e:	9303      	str	r3, [sp, #12]
 8000830:	230a      	movs	r3, #10
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	f06f 0309 	mvn.w	r3, #9
 8000838:	9301      	str	r3, [sp, #4]
 800083a:	2302      	movs	r3, #2
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000840:	2204      	movs	r2, #4
 8000842:	4912      	ldr	r1, [pc, #72]	@ (800088c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000844:	4812      	ldr	r0, [pc, #72]	@ (8000890 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000846:	f000 fdbf 	bl	80013c8 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>
KY_040 encoder(
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d110      	bne.n	8000872 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000856:	4293      	cmp	r3, r2
 8000858:	d10b      	bne.n	8000872 <_Z41__static_initialization_and_destruction_0ii+0x76>
 800085a:	480d      	ldr	r0, [pc, #52]	@ (8000890 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800085c:	f000 fdf2 	bl	8001444 <_ZN6KY_040D1Ev>
Async_Event_Loop AsyncEventLoop;
 8000860:	4808      	ldr	r0, [pc, #32]	@ (8000884 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8000862:	f000 fc53 	bl	800110c <_ZN16Async_Event_LoopD1Ev>
flashOnce flashOnce;
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8000868:	f7ff ffb6 	bl	80007d8 <_ZN9flashOnceD1Ev>
QueueableClass beep;
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800086e:	f7ff fe41 	bl	80004f4 <_ZN14QueueableClassD1Ev>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000098 	.word	0x20000098
 8000880:	200000b0 	.word	0x200000b0
 8000884:	200000bc 	.word	0x200000bc
 8000888:	08000745 	.word	0x08000745
 800088c:	40020000 	.word	0x40020000
 8000890:	200000cc 	.word	0x200000cc

08000894 <_GLOBAL__sub_I_beep>:
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
 8000898:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff ffad 	bl	80007fc <_Z41__static_initialization_and_destruction_0ii>
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_GLOBAL__sub_D_beep>:
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ffa5 	bl	80007fc <_Z41__static_initialization_and_destruction_0ii>
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 fe6e 	bl	8001598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f814 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 f920 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c4:	f000 f8fe 	bl	8000ac4 <MX_DMA_Init>
  MX_SPI1_Init();
 80008c8:	f000 f876 	bl	80009b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80008cc:	f000 f8d0 	bl	8000a70 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80008d0:	f000 f8aa 	bl	8000a28 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //Start Event Loop Timer (TIM11)

  HAL_TIM_Base_Start_IT(&htim11);
 80008d4:	4803      	ldr	r0, [pc, #12]	@ (80008e4 <main+0x30>)
 80008d6:	f002 fa9b 	bl	8002e10 <HAL_TIM_Base_Start_IT>


  /*************  CPP Entry point  ****************/
  MainC();
 80008da:	f7ff ff77 	bl	80007cc <MainC>
  /************************************************/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <main+0x2a>
 80008e2:	bf00      	nop
 80008e4:	200001ac 	.word	0x200001ac

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0320 	add.w	r3, r7, #32
 80008f2:	2230      	movs	r2, #48	@ 0x30
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fc0a 	bl	8004110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <SystemClock_Config+0xc8>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	4a26      	ldr	r2, [pc, #152]	@ (80009b0 <SystemClock_Config+0xc8>)
 8000916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	@ 0x40
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <SystemClock_Config+0xc8>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <SystemClock_Config+0xcc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a20      	ldr	r2, [pc, #128]	@ (80009b4 <SystemClock_Config+0xcc>)
 8000932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000936:	6013      	str	r3, [r2, #0]
 8000938:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <SystemClock_Config+0xcc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	2301      	movs	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094c:	2310      	movs	r3, #16
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000958:	2310      	movs	r3, #16
 800095a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800095c:	23c8      	movs	r3, #200	@ 0xc8
 800095e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000964:	2304      	movs	r3, #4
 8000966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0320 	add.w	r3, r7, #32
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fd1f 	bl	80023b0 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000978:	f000 f9da 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2302      	movs	r3, #2
 8000982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2103      	movs	r1, #3
 8000998:	4618      	mov	r0, r3
 800099a:	f001 ff81 	bl	80028a0 <HAL_RCC_ClockConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a4:	f000 f9c4 	bl	8000d30 <Error_Handler>
  }
}
 80009a8:	bf00      	nop
 80009aa:	3750      	adds	r7, #80	@ 0x50
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009be:	4a19      	ldr	r2, [pc, #100]	@ (8000a24 <MX_SPI1_Init+0x6c>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009d0:	4b13      	ldr	r3, [pc, #76]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009d8:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009da:	2202      	movs	r2, #2
 80009dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f8:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <MX_SPI1_Init+0x68>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <MX_SPI1_Init+0x68>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_SPI1_Init+0x68>)
 8000a06:	220a      	movs	r2, #10
 8000a08:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_SPI1_Init+0x68>)
 8000a0c:	f002 f928 	bl	8002c60 <HAL_SPI_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000a16:	f000 f98b 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000f4 	.word	0x200000f4
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <MX_TIM11_Init+0x44>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a34:	2263      	movs	r2, #99	@ 0x63
 8000a36:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_TIM11_Init+0x40>)
 8000a54:	f002 f98d 	bl	8002d72 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000a5e:	f000 f967 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001ac 	.word	0x200001ac
 8000a6c:	40014800 	.word	0x40014800

08000a70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	@ (8000ac0 <MX_USART1_UART_Init+0x50>)
 8000a78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a94:	4b09      	ldr	r3, [pc, #36]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a96:	220c      	movs	r2, #12
 8000a98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <MX_USART1_UART_Init+0x4c>)
 8000aa8:	f002 fbfc 	bl	80032a4 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ab2:	f000 f93d 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001f4 	.word	0x200001f4
 8000ac0:	40011000 	.word	0x40011000

08000ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_DMA_Init+0x3c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <MX_DMA_Init+0x3c>)
 8000ad4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_DMA_Init+0x3c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	203a      	movs	r0, #58	@ 0x3a
 8000aec:	f000 fee9 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000af0:	203a      	movs	r0, #58	@ 0x3a
 8000af2:	f000 ff02 	bl	80018fa <HAL_NVIC_EnableIRQ>

}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a5b      	ldr	r2, [pc, #364]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b59      	ldr	r3, [pc, #356]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b55      	ldr	r3, [pc, #340]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a54      	ldr	r2, [pc, #336]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b52      	ldr	r3, [pc, #328]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b4e      	ldr	r3, [pc, #312]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a4d      	ldr	r2, [pc, #308]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b4b      	ldr	r3, [pc, #300]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a46      	ldr	r2, [pc, #280]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b44      	ldr	r3, [pc, #272]	@ (8000c90 <MX_GPIO_Init+0x18c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b90:	4840      	ldr	r0, [pc, #256]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b92:	f001 fbdb 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2118      	movs	r1, #24
 8000b9a:	483f      	ldr	r0, [pc, #252]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000b9c:	f001 fbd6 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f240 4107 	movw	r1, #1031	@ 0x407
 8000ba6:	483d      	ldr	r0, [pc, #244]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000ba8:	f001 fbd0 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4833      	ldr	r0, [pc, #204]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000bc6:	f001 fa3d 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	482e      	ldr	r0, [pc, #184]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000be0:	f001 fa30 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : DT_ROTARY_Pin CLK_ROTARY_Pin */
  GPIO_InitStruct.Pin = DT_ROTARY_Pin|CLK_ROTARY_Pin;
 8000be4:	2306      	movs	r3, #6
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000be8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4827      	ldr	r0, [pc, #156]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000bfa:	f001 fa23 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin;
 8000bfe:	2318      	movs	r3, #24
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4820      	ldr	r0, [pc, #128]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000c16:	f001 fa15 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin BUZZER_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin;
 8000c1a:	f240 4307 	movw	r3, #1031	@ 0x407
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	481a      	ldr	r0, [pc, #104]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000c34:	f001 fa06 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_SCL_Pin B7_SDA_Pin */
  GPIO_InitStruct.Pin = B6_SCL_Pin|B7_SDA_Pin;
 8000c38:	23c0      	movs	r3, #192	@ 0xc0
 8000c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3c:	2312      	movs	r3, #18
 8000c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000c54:	f001 f9f6 	bl	8002044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2006      	movs	r0, #6
 8000c5e:	f000 fe30 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c62:	2006      	movs	r0, #6
 8000c64:	f000 fe49 	bl	80018fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2007      	movs	r0, #7
 8000c6e:	f000 fe28 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f000 fe41 	bl	80018fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2008      	movs	r0, #8
 8000c7e:	f000 fe20 	bl	80018c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000c82:	2008      	movs	r0, #8
 8000c84:	f000 fe39 	bl	80018fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	@ 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020400 	.word	0x40020400

08000ca0 <HAL_GPIO_EXTI_Callback>:
/******         EXTI CALLBACK          ******/
/********************************************/
//    This wrapper needs to be placed in here
/********************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
	//DESABLE THE ASYNC LOOP WHILE HANDLING PIN INTERRUPTS
	HAL_TIM_Base_Stop_IT(&htim11);
 8000caa:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000cac:	f002 f912 	bl	8002ed4 <HAL_TIM_Base_Stop_IT>
	if((GPIO_Pin == GPIO_PIN_1) || (GPIO_Pin == GPIO_PIN_2)){
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d002      	beq.n	8000cbc <HAL_GPIO_EXTI_Callback+0x1c>
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x20>
		RotaryEncoderWrapper();//performs the rotary decoding logic here
 8000cbc:	f7ff fd7c 	bl	80007b8 <RotaryEncoderWrapper>
	}
	if(GPIO_Pin == GPIO_PIN_0){
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d101      	bne.n	8000cca <HAL_GPIO_EXTI_Callback+0x2a>
		ButtonEncoderWrapper();
 8000cc6:	f7ff fd49 	bl	800075c <ButtonEncoderWrapper>
	}
	//ENABLE THE ASYNC LOOP AFTER PIN INTERRUPTS ARE DECODED
	HAL_TIM_Base_Start_IT(&htim11);
 8000cca:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ccc:	f002 f8a0 	bl	8002e10 <HAL_TIM_Base_Start_IT>

	}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001ac 	.word	0x200001ac

08000cdc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	GPIOC->ODR &= ~GPIO_PIN_13; // SET BLUE led
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a10      	ldr	r2, [pc, #64]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000cee:	6153      	str	r3, [r2, #20]
	//DISABLE PIN INTERRUPTS WHILE EXECUTING THE LOOP
	HAL_NVIC_DisableIRQ	(EXTI0_IRQn);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f000 fe10 	bl	8001916 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI1_IRQn);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fe0d 	bl	8001916 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI2_IRQn);
 8000cfc:	2008      	movs	r0, #8
 8000cfe:	f000 fe0a 	bl	8001916 <HAL_NVIC_DisableIRQ>
	//EXECUTE THE LOOP
	EVENT_LOOP_WRAPPER();
 8000d02:	f7ff fd4f 	bl	80007a4 <EVENT_LOOP_WRAPPER>
	//ENABLE PIN INTERRUPTS AFTER THE LOOP EXECUTED
	HAL_NVIC_EnableIRQ	(EXTI0_IRQn);
 8000d06:	2006      	movs	r0, #6
 8000d08:	f000 fdf7 	bl	80018fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI1_IRQn);
 8000d0c:	2007      	movs	r0, #7
 8000d0e:	f000 fdf4 	bl	80018fa <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI2_IRQn);
 8000d12:	2008      	movs	r0, #8
 8000d14:	f000 fdf1 	bl	80018fa <HAL_NVIC_EnableIRQ>
	GPIOC->ODR |= GPIO_PIN_13; // RESET BLUE led
 8000d18:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a03      	ldr	r2, [pc, #12]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d22:	6153      	str	r3, [r2, #20]
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40020800 	.word	0x40020800

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d36:	b672      	cpsid	i
}
 8000d38:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  GPIOC -> ODR ^= GPIO_PIN_13;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <Error_Handler+0x30>)
 8000d3c:	695b      	ldr	r3, [r3, #20]
 8000d3e:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <Error_Handler+0x30>)
 8000d40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000d44:	6153      	str	r3, [r2, #20]
	  for(uint32_t _ = 0; _ < 50000000; _++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	e003      	b.n	8000d54 <Error_Handler+0x24>
		  __NOP();
 8000d4c:	bf00      	nop
	  for(uint32_t _ = 0; _ < 50000000; _++){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3301      	adds	r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a03      	ldr	r2, [pc, #12]	@ (8000d64 <Error_Handler+0x34>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d9f7      	bls.n	8000d4c <Error_Handler+0x1c>
	  GPIOC -> ODR ^= GPIO_PIN_13;
 8000d5c:	e7ed      	b.n	8000d3a <Error_Handler+0xa>
 8000d5e:	bf00      	nop
 8000d60:	40020800 	.word	0x40020800
 8000d64:	02faf07f 	.word	0x02faf07f

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	@ 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <HAL_SPI_MspInit+0xe0>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d159      	bne.n	8000e8e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b2f      	ldr	r3, [pc, #188]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000de4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dea:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a27      	ldr	r2, [pc, #156]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <HAL_SPI_MspInit+0xe4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e12:	23a0      	movs	r3, #160	@ 0xa0
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e22:	2305      	movs	r3, #5
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481c      	ldr	r0, [pc, #112]	@ (8000ea0 <HAL_SPI_MspInit+0xe8>)
 8000e2e:	f001 f909 	bl	8002044 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e34:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea8 <HAL_SPI_MspInit+0xf0>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e3a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000e3e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e40:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e42:	2240      	movs	r2, #64	@ 0x40
 8000e44:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e74:	f000 fd6a 	bl	800194c <HAL_DMA_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000e7e:	f7ff ff57 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e86:	649a      	str	r2, [r3, #72]	@ 0x48
 8000e88:	4a06      	ldr	r2, [pc, #24]	@ (8000ea4 <HAL_SPI_MspInit+0xec>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	2000014c 	.word	0x2000014c
 8000ea8:	40026440 	.word	0x40026440

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x48>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d115      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201a      	movs	r0, #26
 8000ee0:	f000 fcef 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ee4:	201a      	movs	r0, #26
 8000ee6:	f000 fd08 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40014800 	.word	0x40014800
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_UART_MspInit+0x94>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d134      	bne.n	8000f88 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f74:	f001 f866 	bl	8002044 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2025      	movs	r0, #37	@ 0x25
 8000f7e:	f000 fca0 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f82:	2025      	movs	r0, #37	@ 0x25
 8000f84:	f000 fcb9 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	@ 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 fb23 	bl	800163c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f001 f9be 	bl	8002380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_ROTARY_Pin);
 800100c:	2002      	movs	r0, #2
 800100e:	f001 f9b7 	bl	8002380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}

08001016 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_ROTARY_Pin);
 800101a:	2004      	movs	r0, #4
 800101c:	f001 f9b0 	bl	8002380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800102a:	f001 ff82 	bl	8002f32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001ac 	.word	0x200001ac

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f002 f981 	bl	8003344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001f4 	.word	0x200001f4

0800104c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001050:	4802      	ldr	r0, [pc, #8]	@ (800105c <DMA2_Stream2_IRQHandler+0x10>)
 8001052:	f000 fdbb 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000014c 	.word	0x2000014c

08001060 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001088:	f7ff ffea 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	@ (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010b2:	f003 f835 	bl	8004120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fbfd 	bl	80008b4 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010c8:	080042dc 	.word	0x080042dc
  ldr r2, =_sbss
 80010cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010d0:	20000384 	.word	0x20000384

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>
	...

080010d8 <_ZN16Async_Event_LoopC1Ev>:
 */

#include "../Async_Event_Loop/AsyncEventLoop.hpp"
#include "Types.hpp"

Async_Event_Loop::Async_Event_Loop() :
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    beginning(nullptr),
    previous(nullptr),
    end(nullptr) {
 80010e0:	4a09      	ldr	r2, [pc, #36]	@ (8001108 <_ZN16Async_Event_LoopC1Ev+0x30>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
    beginning(nullptr),
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
    previous(nullptr),
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
    end(nullptr) {
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	08004280 	.word	0x08004280

0800110c <_ZN16Async_Event_LoopD1Ev>:

Async_Event_Loop::~Async_Event_Loop() {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <_ZN16Async_Event_LoopD1Ev+0x1c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
    // Clean up any dynamically allocated resources if needed
}
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	08004280 	.word	0x08004280

0800112c <_ZN16Async_Event_LoopD0Ev>:
Async_Event_Loop::~Async_Event_Loop() {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
}
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffe9 	bl	800110c <_ZN16Async_Event_LoopD1Ev>
 800113a:	2110      	movs	r1, #16
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f002 ffcf 	bl	80040e0 <_ZdlPvj>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>:

void Async_Event_Loop::setBeginning(QueueableClass* beginning) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
    this->beginning = beginning;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	605a      	str	r2, [r3, #4]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZN16Async_Event_Loop12getBeginningEv>:

QueueableClass* Async_Event_Loop::getBeginning() {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    return this->beginning;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>:

void Async_Event_Loop::setPrevious(QueueableClass* previous) {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    this->previous = previous;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	609a      	str	r2, [r3, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN16Async_Event_Loop11getPreviousEv>:

QueueableClass* Async_Event_Loop::getPrevious() {
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    return this->previous;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>:

void Async_Event_Loop::setEnd(QueueableClass* end) {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    this->end = end;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	60da      	str	r2, [r3, #12]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_ZN16Async_Event_Loop6getEndEv>:

QueueableClass* Async_Event_Loop::getEnd() {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    return this->end;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>:

void Async_Event_Loop::enqueue(QueueableClass* next) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
    if (next->getState() == DONE) {
 80011f2:	6838      	ldr	r0, [r7, #0]
 80011f4:	f7ff f98e 	bl	8000514 <_ZN14QueueableClass8getStateEv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d036      	beq.n	8001276 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x8e>
        if (getEnd() == nullptr) {
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ffe1 	bl	80011d0 <_ZN16Async_Event_Loop6getEndEv>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00c      	beq.n	8001238 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x50>
            // Queue is empty, add the first item
            setBeginning(next);
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff93 	bl	800114c <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
            setPrevious(next);
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffa9 	bl	8001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffbf 	bl	80011b4 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 8001236:	e013      	b.n	8001260 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x78>
        } else {
            // Queue is not empty, add to the end
            getEnd()->setNextClass(next);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffc9 	bl	80011d0 <_ZN16Async_Event_Loop6getEndEv>
 800123e:	4603      	mov	r3, r0
 8001240:	6839      	ldr	r1, [r7, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f972 	bl	800052c <_ZN14QueueableClass12setNextClassEPS_>
            setPrevious(getEnd());
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffc1 	bl	80011d0 <_ZN16Async_Event_Loop6getEndEv>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ff94 	bl	8001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffaa 	bl	80011b4 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        }
        next->enqueue(); // Signal the object it's enqueued
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3310      	adds	r3, #16
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6838      	ldr	r0, [r7, #0]
 800126a:	4798      	blx	r3
        next->setNextClass(nullptr); // Ensure new end points to null
 800126c:	2100      	movs	r1, #0
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f7ff f95c 	bl	800052c <_ZN14QueueableClass12setNextClassEPS_>
    } else {
        next->requeue(); // Object is not done, requeue it
    }
}
 8001274:	e005      	b.n	8001282 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x9a>
        next->requeue(); // Object is not done, requeue it
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	330c      	adds	r3, #12
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6838      	ldr	r0, [r7, #0]
 8001280:	4798      	blx	r3
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>:

void Async_Event_Loop::dequeue(QueueableClass* current) {
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	6039      	str	r1, [r7, #0]
    if (getBeginning() == current && getEnd() == current) {
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff67 	bl	8001168 <_ZN16Async_Event_Loop12getBeginningEv>
 800129a:	4602      	mov	r2, r0
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4293      	cmp	r3, r2
 80012a0:	d108      	bne.n	80012b4 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ff94 	bl	80011d0 <_ZN16Async_Event_Loop6getEndEv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2c>
 80012b4:	2300      	movs	r3, #0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x4a>
        // Only one item in the queue
        setBeginning(nullptr);
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff45 	bl	800114c <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
        setPrevious(nullptr);
 80012c2:	2100      	movs	r1, #0
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff5b 	bl	8001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
        setEnd(nullptr);
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff71 	bl	80011b4 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 80012d2:	e020      	b.n	8001316 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else if (getBeginning() == current) {
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff47 	bl	8001168 <_ZN16Async_Event_Loop12getBeginningEv>
 80012da:	4602      	mov	r2, r0
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4293      	cmp	r3, r2
 80012e0:	bf0c      	ite	eq
 80012e2:	2301      	moveq	r3, #1
 80012e4:	2300      	movne	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x74>
        // Dequeuing the first item
        setBeginning(current->getNextClass());
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7ff f92b 	bl	8000548 <_ZN14QueueableClass12getNextClassEv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4619      	mov	r1, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ff28 	bl	800114c <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
 80012fc:	e00b      	b.n	8001316 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else {
        // Dequeuing an item in the middle or end
        getPrevious()->setNextClass(current->getNextClass());
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff4c 	bl	800119c <_ZN16Async_Event_Loop11getPreviousEv>
 8001304:	4604      	mov	r4, r0
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7ff f91e 	bl	8000548 <_ZN14QueueableClass12getNextClassEv>
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff f90b 	bl	800052c <_ZN14QueueableClass12setNextClassEPS_>
    }

    current->setNextClass(nullptr); // Ensure dequeued object points to nothing
 8001316:	2100      	movs	r1, #0
 8001318:	6838      	ldr	r0, [r7, #0]
 800131a:	f7ff f907 	bl	800052c <_ZN14QueueableClass12setNextClassEPS_>
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bd90      	pop	{r4, r7, pc}
	...

08001328 <_ZN16Async_Event_Loop10ASYNC_LOOPEv>:

void Async_Event_Loop::ASYNC_LOOP() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    QueueableClass* current = getBeginning();
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff19 	bl	8001168 <_ZN16Async_Event_Loop12getBeginningEv>
 8001336:	6178      	str	r0, [r7, #20]
    QueueableClass* next = nullptr;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]

    if (current != nullptr) { // IF THERE IS A QUEUE AT ALL
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d036      	beq.n	80013b0 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x88>
        // Resetting for test purposes
        GPIOA->ODR &= ~GPIO_PIN_3; // Reset green led
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a1f      	ldr	r2, [pc, #124]	@ (80013c4 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 8001348:	f023 0308 	bic.w	r3, r3, #8
 800134c:	6153      	str	r3, [r2, #20]

        do {

            uint8_t currentClassState = current->getState();
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff f8e0 	bl	8000514 <_ZN14QueueableClass8getStateEv>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
            next = current->getNextClass(); // Save next pointer before any potential dequeue
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff f8f5 	bl	8000548 <_ZN14QueueableClass12getNextClassEv>
 800135e:	6138      	str	r0, [r7, #16]
            // Update pointers for next iteration
            if (currentClassState == DONE) {
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d104      	bne.n	8001370 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x48>
                dequeue(current); // Dequeue the object if it's done
 8001366:	6979      	ldr	r1, [r7, #20]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff8e 	bl	800128a <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>
 800136e:	e009      	b.n	8001384 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x5c>
            } else {
                current->EXECUTE(); // Execute the object if it's not done
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3314      	adds	r3, #20
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6978      	ldr	r0, [r7, #20]
 800137a:	4798      	blx	r3
                setPrevious(current);
 800137c:	6979      	ldr	r1, [r7, #20]
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fefe 	bl	8001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            }

            current = next; // Move to the next item in the queue
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	617b      	str	r3, [r7, #20]

        } while (current != nullptr);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1df      	bne.n	800134e <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x26>

        // After the loop, update end pointer
        setEnd(getPrevious());
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff04 	bl	800119c <_ZN16Async_Event_Loop11getPreviousEv>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff0b 	bl	80011b4 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        // Reset previous pointer to beginning (if needed)
        setPrevious(getBeginning());
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fee2 	bl	8001168 <_ZN16Async_Event_Loop12getBeginningEv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fee9 	bl	8001180 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>

    } else {
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
    }
}
 80013ae:	e005      	b.n	80013bc <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x94>
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	4a03      	ldr	r2, [pc, #12]	@ (80013c4 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6153      	str	r3, [r2, #20]
}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020000 	.word	0x40020000

080013c8 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>:
 */
#include <cstdint>
#include "KY040.hpp"
#include "types.hpp"

KY_040::KY_040(
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	80fb      	strh	r3, [r7, #6]
		bool perform
		)
: CLKPort(CLKPort),
  CLKPin(CLKPin),
  DTPort(DTPort),
  DTPin(DTPin)
 80013d8:	4a19      	ldr	r2, [pc, #100]	@ (8001440 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x78>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	601a      	str	r2, [r3, #0]
: CLKPort(CLKPort),
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	605a      	str	r2, [r3, #4]
  CLKPin(CLKPin),
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	88fa      	ldrh	r2, [r7, #6]
 80013e8:	811a      	strh	r2, [r3, #8]
  DTPort(DTPort),
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	60da      	str	r2, [r3, #12]
  DTPin(DTPin)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8b3a      	ldrh	r2, [r7, #24]
 80013f4:	821a      	strh	r2, [r3, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24
   {

	if(maxValue > minValue){//ensure that the min and max values are setup right;
 80013fc:	6a3a      	ldr	r2, [r7, #32]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	429a      	cmp	r2, r3
 8001402:	dd06      	ble.n	8001412 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x4a>
	    if (minValue < INT32_MIN) {
	        this->minValue = INT32_MIN;  // Set minValue to INT32_MIN if it's too low
	    } else if (minValue > INT32_MAX) {
	        this->minValue = INT32_MAX;  // Set minValue to INT32_MAX if it's too high
	    } else {
	        this->minValue = minValue;   // Otherwise, use the provided minValue
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	61da      	str	r2, [r3, #28]
	    if (maxValue < INT32_MIN) {
	        this->maxValue = INT32_MIN;  // Set maxValue to INT32_MIN if it's too low
	    } else if (maxValue > INT32_MAX) {
	        this->maxValue = INT32_MAX;  // Set maxValue to INT32_MAX if it's too high
	    } else {
	        this->maxValue = maxValue;   // Otherwise, use the provided maxValue
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6a3a      	ldr	r2, [r7, #32]
 800140e:	621a      	str	r2, [r3, #32]
 8001410:	e007      	b.n	8001422 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x5a>
	    }
	}else{//if min >= max, than defaults to int32 bounds.
		this -> minValue = INT32_MIN;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001418:	61da      	str	r2, [r3, #28]
		this -> maxValue = INT32_MAX;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001420:	621a      	str	r2, [r3, #32]
	}

	this -> perform = perform;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001428:	761a      	strb	r2, [r3, #24]
	this -> toPerform = toPerform;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142e:	615a      	str	r2, [r3, #20]
}
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	080042b4 	.word	0x080042b4

08001444 <_ZN6KY_040D1Ev>:

KY_040::~KY_040(void) {
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <_ZN6KY_040D1Ev+0x1c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	601a      	str	r2, [r3, #0]

}
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4618      	mov	r0, r3
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	080042b4 	.word	0x080042b4

08001464 <_ZN6KY_040D0Ev>:
KY_040::~KY_040(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
}
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe9 	bl	8001444 <_ZN6KY_040D1Ev>
 8001472:	2128      	movs	r1, #40	@ 0x28
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f002 fe33 	bl	80040e0 <_ZdlPvj>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN6KY_04015handleInterruptEv>:

void KY_040::resetSteps(void){
	this -> Steps = 0;
}

void KY_040::handleInterrupt(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	static uint8_t lrmem = 3;
	static int lrsum = 0;

	int8_t 	CLK, DT;

	CLK = (this-> CLKPort -> IDR & this -> CLKPin)? 1 : 0;//Reads the CLK pin from the encoder
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	8912      	ldrh	r2, [r2, #8]
 8001496:	4013      	ands	r3, r2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <_ZN6KY_04015handleInterruptEv+0x1c>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <_ZN6KY_04015handleInterruptEv+0x1e>
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
	DT = (this -> DTPort -> IDR & this -> DTPin)? 1 : 0;//Reads the DT pin from the encoder
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	8a12      	ldrh	r2, [r2, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZN6KY_04015handleInterruptEv+0x34>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <_ZN6KY_04015handleInterruptEv+0x36>
 80014b8:	2300      	movs	r3, #0
 80014ba:	73bb      	strb	r3, [r7, #14]


	lrmem = ((lrmem & 0x03) << 2) + 2*CLK + DT;
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <_ZN6KY_04015handleInterruptEv+0x108>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	4413      	add	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <_ZN6KY_04015handleInterruptEv+0x108>)
 80014dc:	701a      	strb	r2, [r3, #0]
	lrsum = lrsum + TRANS[lrmem];
 80014de:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <_ZN6KY_04015handleInterruptEv+0x108>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <_ZN6KY_04015handleInterruptEv+0x10c>)
 80014e6:	569b      	ldrsb	r3, [r3, r2]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	4a28      	ldr	r2, [pc, #160]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 80014f2:	6013      	str	r3, [r2, #0]

    /* encoder not in the neutral state */
	if(lrsum % 4 != 0){
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <_ZN6KY_04015handleInterruptEv+0x80>
		__NOP();
 8001500:	bf00      	nop
		return;
 8001502:	e03f      	b.n	8001584 <_ZN6KY_04015handleInterruptEv+0x100>
	}
	/* encoder in the neutral state */
	switch(lrsum){
 8001504:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f113 0f04 	cmn.w	r3, #4
 800150c:	d01a      	beq.n	8001544 <_ZN6KY_04015handleInterruptEv+0xc0>
 800150e:	2b04      	cmp	r3, #4
 8001510:	d131      	bne.n	8001576 <_ZN6KY_04015handleInterruptEv+0xf2>
	case 4:
		lrsum=0;
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps + 1 > this -> maxValue? this -> maxValue : this -> Steps + 1;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	db02      	blt.n	800152a <_ZN6KY_04015handleInterruptEv+0xa6>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	e002      	b.n	8001530 <_ZN6KY_04015handleInterruptEv+0xac>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	3301      	adds	r3, #1
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7e1b      	ldrb	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d020      	beq.n	800157e <_ZN6KY_04015handleInterruptEv+0xfa>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	4798      	blx	r3
		break;
 8001542:	e01c      	b.n	800157e <_ZN6KY_04015handleInterruptEv+0xfa>
	case -4:
		lrsum=0;
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps - 1 < this -> minValue? this -> minValue : this -> Steps - 1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	429a      	cmp	r2, r3
 8001554:	dc02      	bgt.n	800155c <_ZN6KY_04015handleInterruptEv+0xd8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	e002      	b.n	8001562 <_ZN6KY_04015handleInterruptEv+0xde>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001560:	3b01      	subs	r3, #1
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e1b      	ldrb	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <_ZN6KY_04015handleInterruptEv+0xfe>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4798      	blx	r3
		break;
 8001574:	e005      	b.n	8001582 <_ZN6KY_04015handleInterruptEv+0xfe>
	default:
		lrsum=0;
 8001576:	4b07      	ldr	r3, [pc, #28]	@ (8001594 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
		//showDirection(0);
		break;
 800157c:	e002      	b.n	8001584 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 800157e:	bf00      	nop
 8001580:	e000      	b.n	8001584 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 8001582:	bf00      	nop
	}
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000014 	.word	0x20000014
 8001590:	20000004 	.word	0x20000004
 8001594:	2000023c 	.word	0x2000023c

08001598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800159c:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0d      	ldr	r2, [pc, #52]	@ (80015d8 <HAL_Init+0x40>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_Init+0x40>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b4:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <HAL_Init+0x40>)
 80015ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f000 f973 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c6:	200f      	movs	r0, #15
 80015c8:	f000 f808 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015cc:	f7ff fbcc 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x54>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <HAL_InitTick+0x58>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4619      	mov	r1, r3
 80015ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f999 	bl	8001932 <HAL_SYSTICK_Config>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e00e      	b.n	8001628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d80a      	bhi.n	8001626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f000 f953 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <HAL_InitTick+0x5c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	e000      	b.n	8001628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000000 	.word	0x20000000
 8001634:	2000001c 	.word	0x2000001c
 8001638:	20000018 	.word	0x20000018

0800163c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <HAL_IncTick+0x20>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_IncTick+0x24>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4413      	add	r3, r2
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_IncTick+0x24>)
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000001c 	.word	0x2000001c
 8001660:	20000240 	.word	0x20000240

08001664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return uwTick;
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <HAL_GetTick+0x14>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000240 	.word	0x20000240

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff ffee 	bl	8001664 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffde 	bl	8001664 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000001c 	.word	0x2000001c

080016c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <__NVIC_GetPriorityGrouping+0x18>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	f003 0307 	and.w	r3, r3, #7
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	db0b      	blt.n	8001752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	f003 021f 	and.w	r2, r3, #31
 8001740:	4907      	ldr	r1, [pc, #28]	@ (8001760 <__NVIC_EnableIRQ+0x38>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	2001      	movs	r0, #1
 800174a:	fa00 f202 	lsl.w	r2, r0, r2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db12      	blt.n	800179c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	490a      	ldr	r1, [pc, #40]	@ (80017a8 <__NVIC_DisableIRQ+0x44>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	3320      	adds	r3, #32
 800178c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001790:	f3bf 8f4f 	dsb	sy
}
 8001794:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001796:	f3bf 8f6f 	isb	sy
}
 800179a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	@ (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	@ (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	@ 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	@ 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	@ (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff05 	bl	80016c4 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff1a 	bl	800170c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff0d 	bl	8001728 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff1d 	bl	8001764 <__NVIC_DisableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff94 	bl	8001868 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff fe84 	bl	8001664 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e099      	b.n	8001a9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	e00f      	b.n	80019aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fe6b 	bl	8001664 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d908      	bls.n	80019aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e078      	b.n	8001a9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0301 	and.w	r3, r3, #1
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1e8      	bne.n	800198a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <HAL_DMA_Init+0x158>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d107      	bne.n	8001a14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f023 0307 	bic.w	r3, r3, #7
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d117      	bne.n	8001a6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00e      	beq.n	8001a6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fa7b 	bl	8001f4c <DMA_CheckFifoParam>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e016      	b.n	8001a9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa32 	bl	8001ee0 <DMA_CalcBaseAndBitshift>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a84:	223f      	movs	r2, #63	@ 0x3f
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	f010803f 	.word	0xf010803f

08001aa8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ab6:	f7ff fdd5 	bl	8001664 <HAL_GetTick>
 8001aba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e052      	b.n	8001b80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0216 	bic.w	r2, r2, #22
 8001ae8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001af8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <HAL_DMA_Abort+0x62>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0208 	bic.w	r2, r2, #8
 8001b18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	e013      	b.n	8001b54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2c:	f7ff fd9a 	bl	8001664 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d90c      	bls.n	8001b54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2203      	movs	r2, #3
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e015      	b.n	8001b80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1e4      	bne.n	8001b2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b66:	223f      	movs	r2, #63	@ 0x3f
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2280      	movs	r2, #128	@ 0x80
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00c      	b.n	8001bc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2205      	movs	r2, #5
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8001e14 <HAL_DMA_IRQHandler+0x248>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a8e      	ldr	r2, [pc, #568]	@ (8001e18 <HAL_DMA_IRQHandler+0x24c>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01a      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0204 	bic.w	r2, r2, #4
 8001c1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	2208      	movs	r2, #8
 8001c26:	409a      	lsls	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c30:	f043 0201 	orr.w	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2204      	movs	r2, #4
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d012      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	2204      	movs	r2, #4
 8001c92:	409a      	lsls	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca8:	2210      	movs	r2, #16
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03c      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d018      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d108      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d024      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
 8001cfa:	e01f      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
 8001d0c:	e016      	b.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0208 	bic.w	r2, r2, #8
 8001d2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d40:	2220      	movs	r2, #32
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 808f 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8087 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	2220      	movs	r2, #32
 8001d64:	409a      	lsls	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d136      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0216 	bic.w	r2, r2, #22
 8001d84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d103      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x1da>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dba:	223f      	movs	r2, #63	@ 0x3f
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d07e      	beq.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	4798      	blx	r3
        }
        return;
 8001de2:	e079      	b.n	8001ed8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10d      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d031      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
 8001e10:	e02c      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000
 8001e18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d023      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
 8001e2c:	e01e      	b.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10f      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0210 	bic.w	r2, r2, #16
 8001e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d032      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2205      	movs	r2, #5
 8001e84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d307      	bcc.n	8001eb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f2      	bne.n	8001e98 <HAL_DMA_IRQHandler+0x2cc>
 8001eb2:	e000      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001eb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	4798      	blx	r3
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ed8:	bf00      	nop
    }
  }
}
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3b10      	subs	r3, #16
 8001ef0:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <DMA_CalcBaseAndBitshift+0x64>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	091b      	lsrs	r3, r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001efa:	4a13      	ldr	r2, [pc, #76]	@ (8001f48 <DMA_CalcBaseAndBitshift+0x68>)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d909      	bls.n	8001f22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f16:	f023 0303 	bic.w	r3, r3, #3
 8001f1a:	1d1a      	adds	r2, r3, #4
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f20:	e007      	b.n	8001f32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	aaaaaaab 	.word	0xaaaaaaab
 8001f48:	080042bc 	.word	0x080042bc

08001f4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d11f      	bne.n	8001fa6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d856      	bhi.n	800201a <DMA_CheckFifoParam+0xce>
 8001f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <DMA_CheckFifoParam+0x28>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001f97 	.word	0x08001f97
 8001f7c:	08001f85 	.word	0x08001f85
 8001f80:	0800201b 	.word	0x0800201b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d046      	beq.n	800201e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f94:	e043      	b.n	800201e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f9e:	d140      	bne.n	8002022 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa4:	e03d      	b.n	8002022 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fae:	d121      	bne.n	8001ff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d837      	bhi.n	8002026 <DMA_CheckFifoParam+0xda>
 8001fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fbc <DMA_CheckFifoParam+0x70>)
 8001fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbc:	08001fcd 	.word	0x08001fcd
 8001fc0:	08001fd3 	.word	0x08001fd3
 8001fc4:	08001fcd 	.word	0x08001fcd
 8001fc8:	08001fe5 	.word	0x08001fe5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd0:	e030      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d025      	beq.n	800202a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe2:	e022      	b.n	800202a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fec:	d11f      	bne.n	800202e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ff2:	e01c      	b.n	800202e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d903      	bls.n	8002002 <DMA_CheckFifoParam+0xb6>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d003      	beq.n	8002008 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002000:	e018      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
      break;
 8002006:	e015      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      break;
 8002018:	e00b      	b.n	8002032 <DMA_CheckFifoParam+0xe6>
      break;
 800201a:	bf00      	nop
 800201c:	e00a      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e008      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e006      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e004      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 800202a:	bf00      	nop
 800202c:	e002      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;   
 800202e:	bf00      	nop
 8002030:	e000      	b.n	8002034 <DMA_CheckFifoParam+0xe8>
      break;
 8002032:	bf00      	nop
    }
  } 
  
  return status; 
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	e159      	b.n	8002314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 8148 	bne.w	800230e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	2b02      	cmp	r3, #2
 8002094:	d130      	bne.n	80020f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80a2 	beq.w	800230e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	4b57      	ldr	r3, [pc, #348]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	4a56      	ldr	r2, [pc, #344]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021da:	4b54      	ldr	r3, [pc, #336]	@ (800232c <HAL_GPIO_Init+0x2e8>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e6:	4a52      	ldr	r2, [pc, #328]	@ (8002330 <HAL_GPIO_Init+0x2ec>)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	3302      	adds	r3, #2
 80021ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a49      	ldr	r2, [pc, #292]	@ (8002334 <HAL_GPIO_Init+0x2f0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x202>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a48      	ldr	r2, [pc, #288]	@ (8002338 <HAL_GPIO_Init+0x2f4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x1fe>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a47      	ldr	r2, [pc, #284]	@ (800233c <HAL_GPIO_Init+0x2f8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x1fa>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a46      	ldr	r2, [pc, #280]	@ (8002340 <HAL_GPIO_Init+0x2fc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x1f6>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a45      	ldr	r2, [pc, #276]	@ (8002344 <HAL_GPIO_Init+0x300>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x1f2>
 8002232:	2304      	movs	r3, #4
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002236:	2307      	movs	r3, #7
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x204>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x204>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	@ (8002330 <HAL_GPIO_Init+0x2ec>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b38      	ldr	r3, [pc, #224]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a2f      	ldr	r2, [pc, #188]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <HAL_GPIO_Init+0x304>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a24      	ldr	r2, [pc, #144]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b23      	ldr	r3, [pc, #140]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1a      	ldr	r2, [pc, #104]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_GPIO_Init+0x304>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a0f      	ldr	r2, [pc, #60]	@ (8002348 <HAL_GPIO_Init+0x304>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f aea2 	bls.w	8002060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002396:	4a05      	ldr	r2, [pc, #20]	@ (80023ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc7e 	bl	8000ca0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e267      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d075      	beq.n	80024ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d00c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d112      	bne.n	800240c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e6:	4b82      	ldr	r3, [pc, #520]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023f2:	d10b      	bne.n	800240c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	4b7e      	ldr	r3, [pc, #504]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05b      	beq.n	80024b8 <HAL_RCC_OscConfig+0x108>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d157      	bne.n	80024b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e242      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x74>
 8002416:	4b76      	ldr	r3, [pc, #472]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a75      	ldr	r2, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x98>
 800242e:	4b70      	ldr	r3, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6f      	ldr	r2, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6d      	ldr	r3, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6c      	ldr	r2, [pc, #432]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xb0>
 8002448:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a68      	ldr	r2, [pc, #416]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b66      	ldr	r3, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff f8fc 	bl	8001664 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff f8f8 	bl	8001664 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e207      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xc0>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff f8e8 	bl	8001664 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f8e4 	bl	8001664 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1f3      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0xe8>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b47      	ldr	r3, [pc, #284]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b44      	ldr	r3, [pc, #272]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x152>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1c7      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3b      	ldr	r3, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4937      	ldr	r1, [pc, #220]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <HAL_RCC_OscConfig+0x244>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7ff f89d 	bl	8001664 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252e:	f7ff f899 	bl	8001664 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1a8      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4925      	ldr	r1, [pc, #148]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x244>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7ff f87c 	bl	8001664 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff f878 	bl	8001664 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e187      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1b      	ldr	r3, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d036      	beq.n	8002608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b15      	ldr	r3, [pc, #84]	@ (80025f8 <HAL_RCC_OscConfig+0x248>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7ff f85c 	bl	8001664 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025b0:	f7ff f858 	bl	8001664 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e167      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x200>
 80025ce:	e01b      	b.n	8002608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_OscConfig+0x248>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f845 	bl	8001664 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	e00e      	b.n	80025fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025de:	f7ff f841 	bl	8001664 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d907      	bls.n	80025fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e150      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42470000 	.word	0x42470000
 80025f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1ea      	bne.n	80025de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8097 	beq.w	8002744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b81      	ldr	r3, [pc, #516]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b7d      	ldr	r3, [pc, #500]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	4a7c      	ldr	r2, [pc, #496]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	@ 0x40
 8002636:	4b7a      	ldr	r3, [pc, #488]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002646:	4b77      	ldr	r3, [pc, #476]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002652:	4b74      	ldr	r3, [pc, #464]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a73      	ldr	r2, [pc, #460]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7ff f801 	bl	8001664 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe fffd 	bl	8001664 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e10c      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b6a      	ldr	r3, [pc, #424]	@ (8002824 <HAL_RCC_OscConfig+0x474>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x2ea>
 800268c:	4b64      	ldr	r3, [pc, #400]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	4a63      	ldr	r2, [pc, #396]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6713      	str	r3, [r2, #112]	@ 0x70
 8002698:	e01c      	b.n	80026d4 <HAL_RCC_OscConfig+0x324>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x30c>
 80026a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ae:	4b5c      	ldr	r3, [pc, #368]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ba:	e00b      	b.n	80026d4 <HAL_RCC_OscConfig+0x324>
 80026bc:	4b58      	ldr	r3, [pc, #352]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026c0:	4a57      	ldr	r2, [pc, #348]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c8:	4b55      	ldr	r3, [pc, #340]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a54      	ldr	r2, [pc, #336]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 0304 	bic.w	r3, r3, #4
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d015      	beq.n	8002708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe ffc2 	bl	8001664 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e2:	e00a      	b.n	80026fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e4:	f7fe ffbe 	bl	8001664 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0cb      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0ee      	beq.n	80026e4 <HAL_RCC_OscConfig+0x334>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7fe ffac 	bl	8001664 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe ffa8 	bl	8001664 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0b5      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002726:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ee      	bne.n	8002710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002738:	4b39      	ldr	r3, [pc, #228]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 800273e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002742:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80a1 	beq.w	8002890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b08      	cmp	r3, #8
 8002758:	d05c      	beq.n	8002814 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d141      	bne.n	80027e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002762:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002768:	f7fe ff7c 	bl	8001664 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe ff78 	bl	8001664 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e087      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	4b27      	ldr	r3, [pc, #156]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69da      	ldr	r2, [r3, #28]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	491b      	ldr	r1, [pc, #108]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe ff51 	bl	8001664 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe ff4d 	bl	8001664 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e05c      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x416>
 80027e4:	e054      	b.n	8002890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCC_OscConfig+0x478>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe ff3a 	bl	8001664 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe ff36 	bl	8001664 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e045      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_RCC_OscConfig+0x470>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x444>
 8002812:	e03d      	b.n	8002890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e038      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
 8002820:	40023800 	.word	0x40023800
 8002824:	40007000 	.word	0x40007000
 8002828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x4ec>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d028      	beq.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d121      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d11a      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800285c:	4013      	ands	r3, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d111      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d107      	bne.n	800288c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800

080028a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0cc      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b68      	ldr	r3, [pc, #416]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d90c      	bls.n	80028dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d044      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d119      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d003      	beq.n	800295e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800295a:	2b03      	cmp	r3, #3
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800295e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d109      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e067      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800297e:	4b37      	ldr	r3, [pc, #220]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f023 0203 	bic.w	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4934      	ldr	r1, [pc, #208]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002990:	f7fe fe68 	bl	8001664 <HAL_GetTick>
 8002994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002996:	e00a      	b.n	80029ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002998:	f7fe fe64 	bl	8001664 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e04f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	4b2b      	ldr	r3, [pc, #172]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 020c 	and.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1eb      	bne.n	8002998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f821 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490a      	ldr	r1, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fdc8 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023c00 	.word	0x40023c00
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08004260 	.word	0x08004260
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000018 	.word	0x20000018

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a70:	b090      	sub	sp, #64	@ 0x40
 8002a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a78:	2300      	movs	r3, #0
 8002a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a84:	4b59      	ldr	r3, [pc, #356]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d00d      	beq.n	8002aac <HAL_RCC_GetSysClockFreq+0x40>
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	f200 80a1 	bhi.w	8002bd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d003      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a9e:	e09b      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b53      	ldr	r3, [pc, #332]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002aa4:	e09b      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aa6:	4b53      	ldr	r3, [pc, #332]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002aaa:	e098      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aac:	4b4f      	ldr	r3, [pc, #316]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	099b      	lsrs	r3, r3, #6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad8:	fb03 f201 	mul.w	r2, r3, r1
 8002adc:	2300      	movs	r3, #0
 8002ade:	fb00 f303 	mul.w	r3, r0, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	4a43      	ldr	r2, [pc, #268]	@ (8002bf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ae6:	fba0 1202 	umull	r1, r2, r0, r2
 8002aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aec:	460a      	mov	r2, r1
 8002aee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002af2:	4413      	add	r3, r2
 8002af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af8:	2200      	movs	r2, #0
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	61fa      	str	r2, [r7, #28]
 8002afe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002b06:	f7fd fb67 	bl	80001d8 <__aeabi_uldivmod>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4613      	mov	r3, r2
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b12:	e053      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	617a      	str	r2, [r7, #20]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b26:	f04f 0b00 	mov.w	fp, #0
 8002b2a:	4652      	mov	r2, sl
 8002b2c:	465b      	mov	r3, fp
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	ebb2 080a 	subs.w	r8, r2, sl
 8002b46:	eb63 090b 	sbc.w	r9, r3, fp
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b5e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b62:	eb63 0509 	sbc.w	r5, r3, r9
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	00eb      	lsls	r3, r5, #3
 8002b70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b74:	00e2      	lsls	r2, r4, #3
 8002b76:	4614      	mov	r4, r2
 8002b78:	461d      	mov	r5, r3
 8002b7a:	eb14 030a 	adds.w	r3, r4, sl
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	eb45 030b 	adc.w	r3, r5, fp
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b92:	4629      	mov	r1, r5
 8002b94:	028b      	lsls	r3, r1, #10
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	028a      	lsls	r2, r1, #10
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	60fa      	str	r2, [r7, #12]
 8002bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bb0:	f7fd fb12 	bl	80001d8 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_GetSysClockFreq+0x180>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002bcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bd6:	e002      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3740      	adds	r7, #64	@ 0x40
 8002be4:	46bd      	mov	sp, r7
 8002be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	017d7840 	.word	0x017d7840

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000

08002c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c14:	f7ff fff0 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0a9b      	lsrs	r3, r3, #10
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4903      	ldr	r1, [pc, #12]	@ (8002c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40023800 	.word	0x40023800
 8002c34:	08004270 	.word	0x08004270

08002c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c3c:	f7ff ffdc 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0b5b      	lsrs	r3, r3, #13
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	@ (8002c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08004270 	.word	0x08004270

08002c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07b      	b.n	8002d6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c82:	d009      	beq.n	8002c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e005      	b.n	8002c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f880 	bl	8000db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0104 	and.w	r1, r3, #4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	f003 0210 	and.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e041      	b.n	8002e08 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fe f887 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4610      	mov	r0, r2
 8002db2:	f000 f9d7 	bl	8003164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d001      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e044      	b.n	8002eb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d018      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x6c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e52:	d013      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x6c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x6c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a19      	ldr	r2, [pc, #100]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x6c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a17      	ldr	r2, [pc, #92]	@ (8002ecc <HAL_TIM_Base_Start_IT+0xbc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x6c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a16      	ldr	r2, [pc, #88]	@ (8002ed0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d010      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	e007      	b.n	8002eb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40010000 	.word	0x40010000
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40014000 	.word	0x40014000

08002ed4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <HAL_TIM_Base_Stop_IT+0x48>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_Base_Stop_IT+0x48>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d020      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01b      	beq.n	8002f96 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f06f 0202 	mvn.w	r2, #2
 8002f66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8d2 	bl	8003126 <HAL_TIM_IC_CaptureCallback>
 8002f82:	e005      	b.n	8002f90 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8c4 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8d5 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01b      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0204 	mvn.w	r2, #4
 8002fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8ac 	bl	8003126 <HAL_TIM_IC_CaptureCallback>
 8002fce:	e005      	b.n	8002fdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f89e 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8af 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01b      	beq.n	800302e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0208 	mvn.w	r2, #8
 8002ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2204      	movs	r2, #4
 8003004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f886 	bl	8003126 <HAL_TIM_IC_CaptureCallback>
 800301a:	e005      	b.n	8003028 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f878 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f889 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01b      	beq.n	800307a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0210 	mvn.w	r2, #16
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2208      	movs	r2, #8
 8003050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f860 	bl	8003126 <HAL_TIM_IC_CaptureCallback>
 8003066:	e005      	b.n	8003074 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f852 	bl	8003112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f863 	bl	800313a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00c      	beq.n	800309e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d007      	beq.n	800309e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0201 	mvn.w	r2, #1
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fe1f 	bl	8000cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00c      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8e7 	bl	8003290 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00c      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f834 	bl	800314e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00c      	beq.n	800310a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d007      	beq.n	800310a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0220 	mvn.w	r2, #32
 8003102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f8b9 	bl	800327c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003112:	b480      	push	{r7}
 8003114:	b083      	sub	sp, #12
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800311a:	bf00      	nop
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3a      	ldr	r2, [pc, #232]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00f      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d00b      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a37      	ldr	r2, [pc, #220]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d007      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a36      	ldr	r2, [pc, #216]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a35      	ldr	r2, [pc, #212]	@ (800326c <TIM_Base_SetConfig+0x108>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01b      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031bc:	d017      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a28      	ldr	r2, [pc, #160]	@ (8003264 <TIM_Base_SetConfig+0x100>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a27      	ldr	r2, [pc, #156]	@ (8003268 <TIM_Base_SetConfig+0x104>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00f      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a26      	ldr	r2, [pc, #152]	@ (800326c <TIM_Base_SetConfig+0x108>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00b      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a25      	ldr	r2, [pc, #148]	@ (8003270 <TIM_Base_SetConfig+0x10c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a24      	ldr	r2, [pc, #144]	@ (8003274 <TIM_Base_SetConfig+0x110>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d003      	beq.n	80031ee <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a23      	ldr	r2, [pc, #140]	@ (8003278 <TIM_Base_SetConfig+0x114>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d108      	bne.n	8003200 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0e      	ldr	r2, [pc, #56]	@ (8003260 <TIM_Base_SetConfig+0xfc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]
  }
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40014000 	.word	0x40014000
 8003274:	40014400 	.word	0x40014400
 8003278:	40014800 	.word	0x40014800

0800327c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e042      	b.n	800333c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fe16 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	@ 0x24
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fc85 	bl	8003bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695a      	ldr	r2, [r3, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800330c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800331c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b0ba      	sub	sp, #232	@ 0xe8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fb69 	bl	8003a7a <UART_Receive_IT>
      return;
 80033a8:	e25b      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80de 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
 80033b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80d1 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
 80033fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
 8003422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d011      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 81f2 	beq.w	8003858 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
 8003480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 faf4 	bl	8003a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_UART_IRQHandler+0x17a>
 80034b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04f      	beq.n	800355e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f9fc 	bl	80038bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d141      	bne.n	8003556 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800350a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1d9      	bne.n	80034d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	4a7e      	ldr	r2, [pc, #504]	@ (8003724 <HAL_UART_IRQHandler+0x3e0>)
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe fb28 	bl	8001b88 <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00e      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f99e 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00a      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f99a 	bl	8003890 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e006      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f996 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800356a:	e175      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	bf00      	nop
    return;
 800356e:	e173      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 814f 	bne.w	8003818 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8148 	beq.w	8003818 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8141 	beq.w	8003818 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	f040 80b6 	bne.w	8003728 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8145 	beq.w	800385c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035da:	429a      	cmp	r2, r3
 80035dc:	f080 813e 	bcs.w	800385c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f2:	f000 8088 	beq.w	8003706 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800360c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800362e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d9      	bne.n	80035f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3314      	adds	r3, #20
 8003648:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003666:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800366a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800366e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e1      	bne.n	8003642 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800368e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e3      	bne.n	80036c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe f9d1 	bl	8001aa8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003714:	b29b      	uxth	r3, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	b29b      	uxth	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8c1 	bl	80038a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003722:	e09b      	b.n	800385c <HAL_UART_IRQHandler+0x518>
 8003724:	08003983 	.word	0x08003983
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003730:	b29b      	uxth	r3, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808e 	beq.w	8003860 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8089 	beq.w	8003860 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003772:	647a      	str	r2, [r7, #68]	@ 0x44
 8003774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	623b      	str	r3, [r7, #32]
   return(result);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e3      	bne.n	8003786 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	60fb      	str	r3, [r7, #12]
   return(result);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	617b      	str	r3, [r7, #20]
   return(result);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e3      	bne.n	80037cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800380a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f847 	bl	80038a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003816:	e023      	b.n	8003860 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d009      	beq.n	8003838 <HAL_UART_IRQHandler+0x4f4>
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8ba 	bl	80039aa <UART_Transmit_IT>
    return;
 8003836:	e014      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00e      	beq.n	8003862 <HAL_UART_IRQHandler+0x51e>
 8003844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f8fa 	bl	8003a4a <UART_EndTransmit_IT>
    return;
 8003856:	e004      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
    return;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
      return;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
      return;
 8003860:	bf00      	nop
  }
}
 8003862:	37e8      	adds	r7, #232	@ 0xe8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038bc:	b480      	push	{r7}
 80038be:	b095      	sub	sp, #84	@ 0x54
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	330c      	adds	r3, #12
 80038e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3314      	adds	r3, #20
 80038fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	61fb      	str	r3, [r7, #28]
   return(result);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3314      	adds	r3, #20
 8003916:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003918:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800391a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800391e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e5      	bne.n	80038f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	2b01      	cmp	r3, #1
 8003932:	d119      	bne.n	8003968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	60bb      	str	r3, [r7, #8]
   return(result);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	647b      	str	r3, [r7, #68]	@ 0x44
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	330c      	adds	r3, #12
 8003952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003954:	61ba      	str	r2, [r7, #24]
 8003956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e5      	bne.n	8003934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003976:	bf00      	nop
 8003978:	3754      	adds	r7, #84	@ 0x54
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff ff77 	bl	8003890 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b21      	cmp	r3, #33	@ 0x21
 80039bc:	d13e      	bne.n	8003a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c6:	d114      	bne.n	80039f2 <UART_Transmit_IT+0x48>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d110      	bne.n	80039f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	1c9a      	adds	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	621a      	str	r2, [r3, #32]
 80039f0:	e008      	b.n	8003a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	1c59      	adds	r1, r3, #1
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6211      	str	r1, [r2, #32]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4619      	mov	r1, r3
 8003a12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10f      	bne.n	8003a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fefc 	bl	8003868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b08c      	sub	sp, #48	@ 0x30
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b22      	cmp	r3, #34	@ 0x22
 8003a8c:	f040 80ae 	bne.w	8003bec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a98:	d117      	bne.n	8003aca <UART_Receive_IT+0x50>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d113      	bne.n	8003aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ac8:	e026      	b.n	8003b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003adc:	d007      	beq.n	8003aee <UART_Receive_IT+0x74>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <UART_Receive_IT+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e008      	b.n	8003b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4619      	mov	r1, r3
 8003b26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d15d      	bne.n	8003be8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0220 	bic.w	r2, r2, #32
 8003b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d135      	bne.n	8003bde <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	613b      	str	r3, [r7, #16]
   return(result);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b98:	623a      	str	r2, [r7, #32]
 8003b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69f9      	ldr	r1, [r7, #28]
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d10a      	bne.n	8003bd0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fe64 	bl	80038a4 <HAL_UARTEx_RxEventCallback>
 8003bdc:	e002      	b.n	8003be4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff fe4c 	bl	800387c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e002      	b.n	8003bee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3730      	adds	r7, #48	@ 0x30
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b0c0      	sub	sp, #256	@ 0x100
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	68d9      	ldr	r1, [r3, #12]
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	ea40 0301 	orr.w	r3, r0, r1
 8003c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c50:	f021 010c 	bic.w	r1, r1, #12
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	6999      	ldr	r1, [r3, #24]
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	ea40 0301 	orr.w	r3, r0, r1
 8003c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec4 <UART_SetConfig+0x2cc>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0xa0>
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec8 <UART_SetConfig+0x2d0>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d104      	bne.n	8003ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7fe ffce 	bl	8002c38 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ca0:	e003      	b.n	8003caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ca2:	f7fe ffb5 	bl	8002c10 <HAL_RCC_GetPCLK1Freq>
 8003ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb4:	f040 810c 	bne.w	8003ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cda:	4621      	mov	r1, r4
 8003cdc:	eb12 0801 	adds.w	r8, r2, r1
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	eb43 0901 	adc.w	r9, r3, r1
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfa:	4690      	mov	r8, r2
 8003cfc:	4699      	mov	r9, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	eb18 0303 	adds.w	r3, r8, r3
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d08:	462b      	mov	r3, r5
 8003d0a:	eb49 0303 	adc.w	r3, r9, r3
 8003d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d26:	460b      	mov	r3, r1
 8003d28:	18db      	adds	r3, r3, r3
 8003d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	eb42 0303 	adc.w	r3, r2, r3
 8003d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d3c:	f7fc fa4c 	bl	80001d8 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003d46:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	011c      	lsls	r4, r3, #4
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d70:	4641      	mov	r1, r8
 8003d72:	eb12 0a01 	adds.w	sl, r2, r1
 8003d76:	4649      	mov	r1, r9
 8003d78:	eb43 0b01 	adc.w	fp, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	4692      	mov	sl, r2
 8003d92:	469b      	mov	fp, r3
 8003d94:	4643      	mov	r3, r8
 8003d96:	eb1a 0303 	adds.w	r3, sl, r3
 8003d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	eb4b 0303 	adc.w	r3, fp, r3
 8003da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003db4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	18db      	adds	r3, r3, r3
 8003dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dd2:	f7fc fa01 	bl	80001d8 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003dde:	fba3 2301 	umull	r2, r3, r3, r1
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2264      	movs	r2, #100	@ 0x64
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	1acb      	subs	r3, r1, r3
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003df4:	fba3 2302 	umull	r2, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e00:	441c      	add	r4, r3
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e24:	4641      	mov	r1, r8
 8003e26:	1851      	adds	r1, r2, r1
 8003e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	00cb      	lsls	r3, r1, #3
 8003e40:	4651      	mov	r1, sl
 8003e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e46:	4651      	mov	r1, sl
 8003e48:	00ca      	lsls	r2, r1, #3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4642      	mov	r2, r8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e58:	464b      	mov	r3, r9
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	18db      	adds	r3, r3, r3
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7e:	4613      	mov	r3, r2
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e8e:	f7fc f9a3 	bl	80001d8 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	@ 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3332      	adds	r3, #50	@ 0x32
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4422      	add	r2, r4
 8003ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ec0:	e106      	b.n	80040d0 <UART_SetConfig+0x4d8>
 8003ec2:	bf00      	nop
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	40011400 	.word	0x40011400
 8003ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	6239      	str	r1, [r7, #32]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1854      	adds	r4, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb43 0501 	adc.w	r5, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	00eb      	lsls	r3, r5, #3
 8003f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0a:	00e2      	lsls	r2, r4, #3
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	18e3      	adds	r3, r4, r3
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f18:	464b      	mov	r3, r9
 8003f1a:	eb45 0303 	adc.w	r3, r5, r3
 8003f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f3e:	4629      	mov	r1, r5
 8003f40:	008b      	lsls	r3, r1, #2
 8003f42:	4621      	mov	r1, r4
 8003f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f48:	4621      	mov	r1, r4
 8003f4a:	008a      	lsls	r2, r1, #2
 8003f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f50:	f7fc f942 	bl	80001d8 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4b60      	ldr	r3, [pc, #384]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	011c      	lsls	r4, r3, #4
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	61b9      	str	r1, [r7, #24]
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1851      	adds	r1, r2, r1
 8003f88:	6139      	str	r1, [r7, #16]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	414b      	adcs	r3, r1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	00cb      	lsls	r3, r1, #3
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	00ca      	lsls	r2, r1, #3
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fb8:	464b      	mov	r3, r9
 8003fba:	460a      	mov	r2, r1
 8003fbc:	eb42 0303 	adc.w	r3, r2, r3
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fdc:	4649      	mov	r1, r9
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	008a      	lsls	r2, r1, #2
 8003fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fee:	f7fc f8f3 	bl	80001d8 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	@ 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	@ 0x32
 800400c:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <UART_SetConfig+0x4e4>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004018:	441c      	add	r4, r3
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	673b      	str	r3, [r7, #112]	@ 0x70
 8004022:	677a      	str	r2, [r7, #116]	@ 0x74
 8004024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	415b      	adcs	r3, r3
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800406a:	464b      	mov	r3, r9
 800406c:	460a      	mov	r2, r1
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	663b      	str	r3, [r7, #96]	@ 0x60
 800407e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800408c:	4649      	mov	r1, r9
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004096:	4641      	mov	r1, r8
 8004098:	008a      	lsls	r2, r1, #2
 800409a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800409e:	f7fc f89b 	bl	80001d8 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	@ 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	3332      	adds	r3, #50	@ 0x32
 80040ba:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4422      	add	r2, r4
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040dc:	51eb851f 	.word	0x51eb851f

080040e0 <_ZdlPvj>:
 80040e0:	f000 b800 	b.w	80040e4 <_ZdlPv>

080040e4 <_ZdlPv>:
 80040e4:	f000 b800 	b.w	80040e8 <free>

080040e8 <free>:
 80040e8:	4b02      	ldr	r3, [pc, #8]	@ (80040f4 <free+0xc>)
 80040ea:	4601      	mov	r1, r0
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f000 b83d 	b.w	800416c <_free_r>
 80040f2:	bf00      	nop
 80040f4:	20000020 	.word	0x20000020

080040f8 <__malloc_lock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__malloc_lock+0x8>)
 80040fa:	f000 b835 	b.w	8004168 <__retarget_lock_acquire_recursive>
 80040fe:	bf00      	nop
 8004100:	20000380 	.word	0x20000380

08004104 <__malloc_unlock>:
 8004104:	4801      	ldr	r0, [pc, #4]	@ (800410c <__malloc_unlock+0x8>)
 8004106:	f000 b830 	b.w	800416a <__retarget_lock_release_recursive>
 800410a:	bf00      	nop
 800410c:	20000380 	.word	0x20000380

08004110 <memset>:
 8004110:	4402      	add	r2, r0
 8004112:	4603      	mov	r3, r0
 8004114:	4293      	cmp	r3, r2
 8004116:	d100      	bne.n	800411a <memset+0xa>
 8004118:	4770      	bx	lr
 800411a:	f803 1b01 	strb.w	r1, [r3], #1
 800411e:	e7f9      	b.n	8004114 <memset+0x4>

08004120 <__libc_init_array>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	4d0d      	ldr	r5, [pc, #52]	@ (8004158 <__libc_init_array+0x38>)
 8004124:	4c0d      	ldr	r4, [pc, #52]	@ (800415c <__libc_init_array+0x3c>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	2600      	movs	r6, #0
 800412c:	42a6      	cmp	r6, r4
 800412e:	d109      	bne.n	8004144 <__libc_init_array+0x24>
 8004130:	4d0b      	ldr	r5, [pc, #44]	@ (8004160 <__libc_init_array+0x40>)
 8004132:	4c0c      	ldr	r4, [pc, #48]	@ (8004164 <__libc_init_array+0x44>)
 8004134:	f000 f864 	bl	8004200 <_init>
 8004138:	1b64      	subs	r4, r4, r5
 800413a:	10a4      	asrs	r4, r4, #2
 800413c:	2600      	movs	r6, #0
 800413e:	42a6      	cmp	r6, r4
 8004140:	d105      	bne.n	800414e <__libc_init_array+0x2e>
 8004142:	bd70      	pop	{r4, r5, r6, pc}
 8004144:	f855 3b04 	ldr.w	r3, [r5], #4
 8004148:	4798      	blx	r3
 800414a:	3601      	adds	r6, #1
 800414c:	e7ee      	b.n	800412c <__libc_init_array+0xc>
 800414e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004152:	4798      	blx	r3
 8004154:	3601      	adds	r6, #1
 8004156:	e7f2      	b.n	800413e <__libc_init_array+0x1e>
 8004158:	080042cc 	.word	0x080042cc
 800415c:	080042cc 	.word	0x080042cc
 8004160:	080042cc 	.word	0x080042cc
 8004164:	080042d4 	.word	0x080042d4

08004168 <__retarget_lock_acquire_recursive>:
 8004168:	4770      	bx	lr

0800416a <__retarget_lock_release_recursive>:
 800416a:	4770      	bx	lr

0800416c <_free_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4605      	mov	r5, r0
 8004170:	2900      	cmp	r1, #0
 8004172:	d041      	beq.n	80041f8 <_free_r+0x8c>
 8004174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004178:	1f0c      	subs	r4, r1, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	bfb8      	it	lt
 800417e:	18e4      	addlt	r4, r4, r3
 8004180:	f7ff ffba 	bl	80040f8 <__malloc_lock>
 8004184:	4a1d      	ldr	r2, [pc, #116]	@ (80041fc <_free_r+0x90>)
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	b933      	cbnz	r3, 8004198 <_free_r+0x2c>
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	6014      	str	r4, [r2, #0]
 800418e:	4628      	mov	r0, r5
 8004190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004194:	f7ff bfb6 	b.w	8004104 <__malloc_unlock>
 8004198:	42a3      	cmp	r3, r4
 800419a:	d908      	bls.n	80041ae <_free_r+0x42>
 800419c:	6820      	ldr	r0, [r4, #0]
 800419e:	1821      	adds	r1, r4, r0
 80041a0:	428b      	cmp	r3, r1
 80041a2:	bf01      	itttt	eq
 80041a4:	6819      	ldreq	r1, [r3, #0]
 80041a6:	685b      	ldreq	r3, [r3, #4]
 80041a8:	1809      	addeq	r1, r1, r0
 80041aa:	6021      	streq	r1, [r4, #0]
 80041ac:	e7ed      	b.n	800418a <_free_r+0x1e>
 80041ae:	461a      	mov	r2, r3
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b10b      	cbz	r3, 80041b8 <_free_r+0x4c>
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d9fa      	bls.n	80041ae <_free_r+0x42>
 80041b8:	6811      	ldr	r1, [r2, #0]
 80041ba:	1850      	adds	r0, r2, r1
 80041bc:	42a0      	cmp	r0, r4
 80041be:	d10b      	bne.n	80041d8 <_free_r+0x6c>
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	4401      	add	r1, r0
 80041c4:	1850      	adds	r0, r2, r1
 80041c6:	4283      	cmp	r3, r0
 80041c8:	6011      	str	r1, [r2, #0]
 80041ca:	d1e0      	bne.n	800418e <_free_r+0x22>
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	4408      	add	r0, r1
 80041d4:	6010      	str	r0, [r2, #0]
 80041d6:	e7da      	b.n	800418e <_free_r+0x22>
 80041d8:	d902      	bls.n	80041e0 <_free_r+0x74>
 80041da:	230c      	movs	r3, #12
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	e7d6      	b.n	800418e <_free_r+0x22>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	1821      	adds	r1, r4, r0
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf04      	itt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	6063      	str	r3, [r4, #4]
 80041ee:	bf04      	itt	eq
 80041f0:	1809      	addeq	r1, r1, r0
 80041f2:	6021      	streq	r1, [r4, #0]
 80041f4:	6054      	str	r4, [r2, #4]
 80041f6:	e7ca      	b.n	800418e <_free_r+0x22>
 80041f8:	bd38      	pop	{r3, r4, r5, pc}
 80041fa:	bf00      	nop
 80041fc:	20000244 	.word	0x20000244

08004200 <_init>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr

0800420c <_fini>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr
