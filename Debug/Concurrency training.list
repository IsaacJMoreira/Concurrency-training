
Concurrency training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002c8c0  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034234  08034234  00036080  2**0
                  CONTENTS
  4 .ARM          00000008  08034234  08034234  00035234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803423c  0803423c  00036080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803423c  0803423c  0003523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08034244  08034244  00035244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0803424c  00036000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c5b4  20000080  080342cc  00036080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c634  080342cc  00036634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00036080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d5c9  00000000  00000000  000360b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003adf  00000000  00000000  00053679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  00057158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff7  00000000  00000000  000585e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c229  00000000  00000000  000595d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019734  00000000  00000000  00075800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a29d2  00000000  00000000  0008ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131906  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f3c  00000000  00000000  0013194c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00138888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800795c 	.word	0x0800795c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800795c 	.word	0x0800795c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN14QueueableClassC1Ev>:
//should have. It has to have methods for determining if its done executing.
//it should be done in a execute method.
 class QueueableClass{
 public:
	 //CONSTRUCTOR
	 QueueableClass(){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <_ZN14QueueableClassC1Ev+0x28>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	601a      	str	r2, [r3, #0]
		 this -> state = QueueableReturnValue::DONE;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	721a      	strb	r2, [r3, #8]
		 this -> nextClass = nullptr;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
	 }
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	080338fc 	.word	0x080338fc

0800059c <_ZN14QueueableClassD1Ev>:

	 ~QueueableClass(){/*NOTHING TO SEE HERE*/ }
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <_ZN14QueueableClassD1Ev+0x1c>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	080338fc 	.word	0x080338fc

080005bc <_ZN14QueueableClass8getStateEv>:

	 virtual QueueableReturnValue getState(void)final{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
		 return this -> state;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7a1b      	ldrb	r3, [r3, #8]
	 }
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <_ZN14QueueableClass12setNextClassEPS_>:

	 virtual void setNextClass(QueueableClass* next)final{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	 	 this -> nextClass = next;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	605a      	str	r2, [r3, #4]
	 }
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr

080005f0 <_ZN14QueueableClass12getNextClassEv>:

	 virtual QueueableClass* getNextClass(void) final{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
		 return this -> nextClass;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
	 }
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_ZN14QueueableClass7requeueEv>:
	 //this method gives the object the ability to decide what to
	 //when the process tells it to requeue.
	 //THIS IS AN EXAMPLE OF WHAT TO DO, BUT YOU SHOULD SO WHAT SOUITS
	 //YOUR CODE BETTER. KEEP IN MIND THE INTEGRITY OF THE LINKED LIST!
	 virtual void requeue(){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
		 setState(TODO);//in this case it restarts the buzzer timer.
 8000610:	2101      	movs	r1, #1
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f86a 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <_ZN14QueueableClass7enqueueEv>:

	 //WHAT DOES THE OBJECT DO WHEN IT GETS IN QUEUE?
	 //IN THIS IMPLEMENTATION, IT JUST CHANGES THE STATE, BUT
	 //YOU COULD REWRITE THIS TO FIT YOUR NEEDS
	 virtual void enqueue(){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
		 setState(TODO);
 8000628:	2101      	movs	r1, #1
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f85e 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <_ZN14QueueableClass7EXECUTEEv>:

	 //this method has to be implemented, but here is an example:
	 virtual void EXECUTE(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
		 static uint32_t prevTime = 0;
		 static uint32_t currentTime = 0;
		 uint32_t elapsedTime;
		 static uint8_t state = 0;

		 if(getState() == TODO){
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ffbb 	bl	80005bc <_ZN14QueueableClass8getStateEv>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	bf0c      	ite	eq
 800064c:	2301      	moveq	r3, #1
 800064e:	2300      	movne	r3, #0
 8000650:	b2db      	uxtb	r3, r3
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00b      	beq.n	800066e <_ZN14QueueableClass7EXECUTEEv+0x36>
		 	state = 1;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
		 	setState(DOING);
 800065c:	2102      	movs	r1, #2
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f844 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	prevTime = HAL_GetTick();//get the time when the change accurred
 8000664:	f001 fdba 	bl	80021dc <HAL_GetTick>
 8000668:	4603      	mov	r3, r0
 800066a:	4a1d      	ldr	r2, [pc, #116]	@ (80006e0 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 800066c:	6013      	str	r3, [r2, #0]
		 }

		 if(state){//if the function is in the on state, turns the toPerform on;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d02d      	beq.n	80006d2 <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   	GPIOB -> ODR |= GPIO_PIN_2;//SET BUZZER PIN;
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6153      	str	r3, [r2, #20]
		   	//now we check if the delay time has elapsed.
		   	//first we acquire the current time
		  	currentTime = HAL_GetTick();
 8000682:	f001 fdab 	bl	80021dc <HAL_GetTick>
 8000686:	4603      	mov	r3, r0
 8000688:	4a17      	ldr	r2, [pc, #92]	@ (80006e8 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800068a:	6013      	str	r3, [r2, #0]
		   	if (currentTime >= prevTime) {//making sure to account for roll over
 800068c:	4b16      	ldr	r3, [pc, #88]	@ (80006e8 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	429a      	cmp	r2, r3
 8000696:	d306      	bcc.n	80006a6 <_ZN14QueueableClass7EXECUTEEv+0x6e>
		   		elapsedTime = currentTime - prevTime;
 8000698:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	e005      	b.n	80006b2 <_ZN14QueueableClass7EXECUTEEv+0x7a>
		   	} else {
		   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 80006a6:	4b10      	ldr	r3, [pc, #64]	@ (80006e8 <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	60fb      	str	r3, [r7, #12]
		   	}
		   	//if the time has run out, we turn the toPerform off
		   	if(elapsedTime >= delay){
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b0e      	cmp	r3, #14
 80006b6:	d90c      	bls.n	80006d2 <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   		GPIOB -> ODR &= ~GPIO_PIN_2; //RESET BUZZER PIN;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a09      	ldr	r2, [pc, #36]	@ (80006e4 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 80006be:	f023 0304 	bic.w	r3, r3, #4
 80006c2:	6153      	str	r3, [r2, #20]
		   		state = 0;//we clear the state.
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
		   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 80006ca:	2100      	movs	r1, #0
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f80d 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	}
		   }
	 }
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	2000009c 	.word	0x2000009c
 80006e4:	40020400 	.word	0x40020400
 80006e8:	200000a0 	.word	0x200000a0

080006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>:
 protected:
	 virtual void setState(QueueableReturnValue state)final{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	 	 		 this -> state = state;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	78fa      	ldrb	r2, [r7, #3]
 80006fc:	721a      	strb	r2, [r3, #8]
	 	 	 }
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <_ZN9flashOnce7EXECUTEEv>:
Frame_Builder FB;

//Extension of QueueableClass for demonstration purposes only. Must me done in other file.
class flashOnce: public QueueableClass{
public:
	void EXECUTE(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
			 static uint32_t prevTime = 0;
			 static uint32_t currentTime = 0;
			 uint32_t elapsedTime;
			 static uint8_t state = 0;

			 if(getState() == TODO){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff50 	bl	80005bc <_ZN14QueueableClass8getStateEv>
 800071c:	4603      	mov	r3, r0
 800071e:	2b01      	cmp	r3, #1
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00c      	beq.n	8000746 <_ZN9flashOnce7EXECUTEEv+0x3a>
			 	state = 1;
 800072c:	4b22      	ldr	r3, [pc, #136]	@ (80007b8 <_ZN9flashOnce7EXECUTEEv+0xac>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
			 	setState(DOING);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ffd8 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	prevTime = HAL_GetTick();//get the time when the change accurred
 800073c:	f001 fd4e 	bl	80021dc <HAL_GetTick>
 8000740:	4603      	mov	r3, r0
 8000742:	4a1e      	ldr	r2, [pc, #120]	@ (80007bc <_ZN9flashOnce7EXECUTEEv+0xb0>)
 8000744:	6013      	str	r3, [r2, #0]
			 }

			 if(state){//if the function is in the on state, turns the toPerform on;
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <_ZN9flashOnce7EXECUTEEv+0xac>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d02f      	beq.n	80007ae <_ZN9flashOnce7EXECUTEEv+0xa2>
			   	GPIOA -> ODR |= GPIO_PIN_4;//SET BUZZER PIN;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6153      	str	r3, [r2, #20]
			   	//now we check if the delay time has elapsed.
			   	//first we acquire the current time
			  	currentTime = HAL_GetTick();
 800075a:	f001 fd3f 	bl	80021dc <HAL_GetTick>
 800075e:	4603      	mov	r3, r0
 8000760:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000762:	6013      	str	r3, [r2, #0]
			   	if (currentTime >= prevTime) {//making sure to account for roll over
 8000764:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <_ZN9flashOnce7EXECUTEEv+0xb0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	429a      	cmp	r2, r3
 800076e:	d306      	bcc.n	800077e <_ZN9flashOnce7EXECUTEEv+0x72>
			   		elapsedTime = currentTime - prevTime;
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <_ZN9flashOnce7EXECUTEEv+0xb0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e005      	b.n	800078a <_ZN9flashOnce7EXECUTEEv+0x7e>
			   	} else {
			   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <_ZN9flashOnce7EXECUTEEv+0xb0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]
			   	}
			   	//if the time has run out, we turn the toPerform off
			   	if(elapsedTime >= 1000){
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000790:	d30d      	bcc.n	80007ae <_ZN9flashOnce7EXECUTEEv+0xa2>
			   		GPIOA -> ODR &= ~GPIO_PIN_4; //RESET BUZZER PIN;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000798:	f023 0310 	bic.w	r3, r3, #16
 800079c:	6153      	str	r3, [r2, #20]
			   		state = 0;//we clear the state.
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <_ZN9flashOnce7EXECUTEEv+0xac>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff9f 	bl	80006ec <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	}
			   }
		 }
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000c0 	.word	0x200000c0
 80007bc:	200000b8 	.word	0x200000b8
 80007c0:	40020000 	.word	0x40020000
 80007c4:	200000bc 	.word	0x200000bc

080007c8 <_ZN9flashOnceC1Ev>:
class flashOnce: public QueueableClass{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fecc 	bl	8000570 <_ZN14QueueableClassC1Ev>
 80007d8:	4a03      	ldr	r2, [pc, #12]	@ (80007e8 <_ZN9flashOnceC1Ev+0x20>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	080338d8 	.word	0x080338d8

080007ec <_Z17beepActionWrapperv>:

flashOnce flashOnce;
Async_Event_Loop AsyncEventLoop;
	//TODO FIND A WAY TO SIMPLIFY THIS
	//IT NEEDS THIS WRAPPER TO CONFORM TO THE EXPECTED FUNCTION SIGNATURE
	void beepActionWrapper(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&beep);
 80007f0:	4902      	ldr	r1, [pc, #8]	@ (80007fc <_Z17beepActionWrapperv+0x10>)
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <_Z17beepActionWrapperv+0x14>)
 80007f4:	f000 feee 	bl	80015d4 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000a8 	.word	0x200000a8
 8000800:	200000d0 	.word	0x200000d0

08000804 <ButtonEncoderWrapper>:
	void ButtonEncoderWrapper(){
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&flashOnce);
 8000808:	4902      	ldr	r1, [pc, #8]	@ (8000814 <ButtonEncoderWrapper+0x10>)
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <ButtonEncoderWrapper+0x14>)
 800080c:	f000 fee2 	bl	80015d4 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000c4 	.word	0x200000c4
 8000818:	200000d0 	.word	0x200000d0

0800081c <_Z13floatToStringfPcii>:
		-1,
	   36,
		beepActionWrapper
		);

void floatToString(float value, char* buffer, int bufferSize, int precision = 2) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	@ 0x28
 8000820:	af02      	add	r7, sp, #8
 8000822:	ed87 0a03 	vstr	s0, [r7, #12]
 8000826:	60b8      	str	r0, [r7, #8]
 8000828:	6079      	str	r1, [r7, #4]
 800082a:	603a      	str	r2, [r7, #0]
    int intPart = (int)value;  // Integer part
 800082c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000834:	ee17 3a90 	vmov	r3, s15
 8000838:	613b      	str	r3, [r7, #16]
    int decPart = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]

    // Compute decimal part manually
    float remainder = value - intPart;
 800083e:	693b      	ldr	r3, [r7, #16]
 8000840:	ee07 3a90 	vmov	s15, r3
 8000844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000848:	ed97 7a03 	vldr	s14, [r7, #12]
 800084c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000850:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < precision; ++i) {
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	e02f      	b.n	80008ba <_Z13floatToStringfPcii+0x9e>
        remainder *= 10;
 800085a:	edd7 7a06 	vldr	s15, [r7, #24]
 800085e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8000862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000866:	edc7 7a06 	vstr	s15, [r7, #24]
        decPart = decPart * 10 + int(remainder) % 10;
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	4618      	mov	r0, r3
 8000876:	edd7 7a06 	vldr	s15, [r7, #24]
 800087a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800087e:	ee17 1a90 	vmov	r1, s15
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <_Z13floatToStringfPcii+0xc4>)
 8000884:	fb83 2301 	smull	r2, r3, r3, r1
 8000888:	109a      	asrs	r2, r3, #2
 800088a:	17cb      	asrs	r3, r1, #31
 800088c:	1ad2      	subs	r2, r2, r3
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	1aca      	subs	r2, r1, r3
 8000898:	1883      	adds	r3, r0, r2
 800089a:	61fb      	str	r3, [r7, #28]
        remainder -= int(remainder);
 800089c:	edd7 7a06 	vldr	s15, [r7, #24]
 80008a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80008ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008b0:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < precision; ++i) {
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	3301      	adds	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	429a      	cmp	r2, r3
 80008c0:	dbcb      	blt.n	800085a <_Z13floatToStringfPcii+0x3e>
    }

    snprintf(buffer, bufferSize, "%d.%0*d fps", intPart, precision, decPart);
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4a05      	ldr	r2, [pc, #20]	@ (80008e4 <_Z13floatToStringfPcii+0xc8>)
 80008d0:	68b8      	ldr	r0, [r7, #8]
 80008d2:	f006 fc3d 	bl	8007150 <sniprintf>
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	66666667 	.word	0x66666667
 80008e4:	08007974 	.word	0x08007974

080008e8 <_Z7MainCPPv>:
//CPP ENTRY POINT
void MainCPP(){
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b09d      	sub	sp, #116	@ 0x74
 80008ec:	af0a      	add	r7, sp, #40	@ 0x28

	//SETUP START
	LCD_init();
 80008ee:	f001 fbc7 	bl	8002080 <LCD_init>
	GPIOC -> ODR |= GPIO_PIN_13;//onboard blue led OFF
 80008f2:	4b7e      	ldr	r3, [pc, #504]	@ (8000aec <_Z7MainCPPv+0x204>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a7d      	ldr	r2, [pc, #500]	@ (8000aec <_Z7MainCPPv+0x204>)
 80008f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008fc:	6153      	str	r3, [r2, #20]
   FB.FB_LongBGPartialDraw(
 80008fe:	4b7c      	ldr	r3, [pc, #496]	@ (8000af0 <_Z7MainCPPv+0x208>)
 8000900:	9309      	str	r3, [sp, #36]	@ 0x24
 8000902:	4b7c      	ldr	r3, [pc, #496]	@ (8000af4 <_Z7MainCPPv+0x20c>)
 8000904:	9308      	str	r3, [sp, #32]
 8000906:	4b7c      	ldr	r3, [pc, #496]	@ (8000af8 <_Z7MainCPPv+0x210>)
 8000908:	9307      	str	r3, [sp, #28]
 800090a:	f240 23db 	movw	r3, #731	@ 0x2db
 800090e:	9306      	str	r3, [sp, #24]
 8000910:	23f0      	movs	r3, #240	@ 0xf0
 8000912:	9305      	str	r3, [sp, #20]
 8000914:	23f0      	movs	r3, #240	@ 0xf0
 8000916:	9304      	str	r3, [sp, #16]
 8000918:	23f0      	movs	r3, #240	@ 0xf0
 800091a:	9303      	str	r3, [sp, #12]
 800091c:	2300      	movs	r3, #0
 800091e:	9302      	str	r3, [sp, #8]
 8000920:	2300      	movs	r3, #0
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	23ef      	movs	r3, #239	@ 0xef
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	23ef      	movs	r3, #239	@ 0xef
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	4873      	ldr	r0, [pc, #460]	@ (8000afc <_Z7MainCPPv+0x214>)
 8000930:	f000 fff3 	bl	800191a <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh>
									 main8bitsPalette,
									&LCD_DrawPixelFB,
									LONG_BG
									);
	//FB.FB_SimpleBGPartialDraw(0, 0, 239, 239, 240, 240, main8bitsPalette, &LCD_DrawPixelFB, SKULL);
	uint16_t x = 0, y = 100;
 8000934:	2300      	movs	r3, #0
 8000936:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800093a:	2364      	movs	r3, #100	@ 0x64
 800093c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	uint16_t X = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	uint16_t prevX = x;
 8000944:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000948:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	uint16_t prevY = y;
 800094c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800094e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	//END SETUP

	//MAIN LOOP START
	while(1){
		uint32_t startTime = HAL_GetTick();
 8000952:	f001 fc43 	bl	80021dc <HAL_GetTick>
 8000956:	63b8      	str	r0, [r7, #56]	@ 0x38
		GPIOB -> ODR ^= GPIO_PIN_10;
 8000958:	4b69      	ldr	r3, [pc, #420]	@ (8000b00 <_Z7MainCPPv+0x218>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a68      	ldr	r2, [pc, #416]	@ (8000b00 <_Z7MainCPPv+0x218>)
 800095e:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000962:	6153      	str	r3, [r2, #20]





		uint16_t steps =(uint16_t)encoder.getSteps();
 8000964:	4867      	ldr	r0, [pc, #412]	@ (8000b04 <_Z7MainCPPv+0x21c>)
 8000966:	f001 f8c3 	bl	8001af0 <_ZN6KY_0408getStepsEv>
 800096a:	4603      	mov	r3, r0
 800096c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		if((steps < 36) && (steps > -1)){
 800096e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000970:	2b23      	cmp	r3, #35	@ 0x23
 8000972:	d82c      	bhi.n	80009ce <_Z7MainCPPv+0xe6>
			x = steps * 5;
 8000974:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000976:	461a      	mov	r2, r3
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	4413      	add	r3, r2
 800097c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
			FB.FB_LongBGPartialDraw(
 8000980:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000984:	3340      	adds	r3, #64	@ 0x40
 8000986:	b29c      	uxth	r4, r3
 8000988:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800098c:	3340      	adds	r3, #64	@ 0x40
 800098e:	b29b      	uxth	r3, r3
 8000990:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8000994:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8000998:	4a55      	ldr	r2, [pc, #340]	@ (8000af0 <_Z7MainCPPv+0x208>)
 800099a:	9209      	str	r2, [sp, #36]	@ 0x24
 800099c:	4a55      	ldr	r2, [pc, #340]	@ (8000af4 <_Z7MainCPPv+0x20c>)
 800099e:	9208      	str	r2, [sp, #32]
 80009a0:	4a55      	ldr	r2, [pc, #340]	@ (8000af8 <_Z7MainCPPv+0x210>)
 80009a2:	9207      	str	r2, [sp, #28]
 80009a4:	f240 22db 	movw	r2, #731	@ 0x2db
 80009a8:	9206      	str	r2, [sp, #24]
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	9205      	str	r2, [sp, #20]
 80009ae:	22f0      	movs	r2, #240	@ 0xf0
 80009b0:	9204      	str	r2, [sp, #16]
 80009b2:	22f0      	movs	r2, #240	@ 0xf0
 80009b4:	9203      	str	r2, [sp, #12]
 80009b6:	2200      	movs	r2, #0
 80009b8:	9202      	str	r2, [sp, #8]
 80009ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80009be:	9201      	str	r2, [sp, #4]
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	4623      	mov	r3, r4
 80009c4:	4602      	mov	r2, r0
 80009c6:	484d      	ldr	r0, [pc, #308]	@ (8000afc <_Z7MainCPPv+0x214>)
 80009c8:	f000 ffa7 	bl	800191a <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh>
 80009cc:	e03b      	b.n	8000a46 <_Z7MainCPPv+0x15e>
														main8bitsPalette,
														&LCD_DrawPixelFB,
														LONG_BG
														);
		}else{
			if(steps == 36){
 80009ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009d0:	2b24      	cmp	r3, #36	@ 0x24
 80009d2:	d10f      	bne.n	80009f4 <_Z7MainCPPv+0x10c>
				X = X + 10 > 731-240? 731-240 : X+10;
 80009d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80009d8:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80009dc:	4293      	cmp	r3, r2
 80009de:	bf28      	it	cs
 80009e0:	4613      	movcs	r3, r2
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	330a      	adds	r3, #10
 80009e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				encoder.setSteps(35);
 80009ea:	2123      	movs	r1, #35	@ 0x23
 80009ec:	4845      	ldr	r0, [pc, #276]	@ (8000b04 <_Z7MainCPPv+0x21c>)
 80009ee:	f001 f871 	bl	8001ad4 <_ZN6KY_0408setStepsEl>
 80009f2:	e00c      	b.n	8000a0e <_Z7MainCPPv+0x126>
			}else{
				X = X - 10 < 0? 0 : X-10;
 80009f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80009f8:	2b0a      	cmp	r3, #10
 80009fa:	bf38      	it	cc
 80009fc:	230a      	movcc	r3, #10
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3b0a      	subs	r3, #10
 8000a02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
				encoder.setSteps(0);
 8000a06:	2100      	movs	r1, #0
 8000a08:	483e      	ldr	r0, [pc, #248]	@ (8000b04 <_Z7MainCPPv+0x21c>)
 8000a0a:	f001 f863 	bl	8001ad4 <_ZN6KY_0408setStepsEl>
			}
			FB.FB_LongBGPartialDraw(
 8000a0e:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <_Z7MainCPPv+0x208>)
 8000a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a12:	4b38      	ldr	r3, [pc, #224]	@ (8000af4 <_Z7MainCPPv+0x20c>)
 8000a14:	9308      	str	r3, [sp, #32]
 8000a16:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <_Z7MainCPPv+0x210>)
 8000a18:	9307      	str	r3, [sp, #28]
 8000a1a:	f240 23db 	movw	r3, #731	@ 0x2db
 8000a1e:	9306      	str	r3, [sp, #24]
 8000a20:	23f0      	movs	r3, #240	@ 0xf0
 8000a22:	9305      	str	r3, [sp, #20]
 8000a24:	23f0      	movs	r3, #240	@ 0xf0
 8000a26:	9304      	str	r3, [sp, #16]
 8000a28:	23f0      	movs	r3, #240	@ 0xf0
 8000a2a:	9303      	str	r3, [sp, #12]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	23ef      	movs	r3, #239	@ 0xef
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	23ef      	movs	r3, #239	@ 0xef
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	482e      	ldr	r0, [pc, #184]	@ (8000afc <_Z7MainCPPv+0x214>)
 8000a42:	f000 ff6a 	bl	800191a <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh>
														LONG_BG
														);
		}

		//FB.FB_SimpleBGPartialDraw(prevX, prevY, prevX+63, prevY+63, 240, 240, main8bitsPalette, &LCD_DrawPixelFB, SKULL);
		FB.FB_Draw8bitTile(x, y, x+63, y+63, main8bitsPalette, &LCD_DrawPixelFB, SHIP, 0xff, true);//sprite
 8000a46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a4a:	b2d9      	uxtb	r1, r3
 8000a4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	333f      	adds	r3, #63	@ 0x3f
 8000a58:	b2d8      	uxtb	r0, r3
 8000a5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	333f      	adds	r3, #63	@ 0x3f
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2401      	movs	r4, #1
 8000a64:	9405      	str	r4, [sp, #20]
 8000a66:	24ff      	movs	r4, #255	@ 0xff
 8000a68:	9404      	str	r4, [sp, #16]
 8000a6a:	4c27      	ldr	r4, [pc, #156]	@ (8000b08 <_Z7MainCPPv+0x220>)
 8000a6c:	9403      	str	r4, [sp, #12]
 8000a6e:	4c21      	ldr	r4, [pc, #132]	@ (8000af4 <_Z7MainCPPv+0x20c>)
 8000a70:	9402      	str	r4, [sp, #8]
 8000a72:	4c21      	ldr	r4, [pc, #132]	@ (8000af8 <_Z7MainCPPv+0x210>)
 8000a74:	9401      	str	r4, [sp, #4]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4820      	ldr	r0, [pc, #128]	@ (8000afc <_Z7MainCPPv+0x214>)
 8000a7c:	f000 feca 	bl	8001814 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb>
		//FB.FB_Draw8bitTile((240-64)/2, (240-64)/2, (240-64)/2 + 63, (240-64)/2 + 63, main8bitsPalette, &LCD_DrawPixelFB, SHIP, 0xff, true);//sprite
		prevX = x;
 8000a80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		prevY = y;
 8000a88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

		std::string str;
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	4618      	mov	r0, r3
 8000a94:	f006 fa97 	bl	8006fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>


		// Assuming startTime is defined elsewhere and HAL_GetTick() returns time in milliseconds
		float FPS = 1000.0f / (HAL_GetTick() - startTime);
 8000a98:	f001 fba0 	bl	80021dc <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	ee07 3a90 	vmov	s15, r3
 8000aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aaa:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000b0c <_Z7MainCPPv+0x224>
 8000aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ab2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		    char strBuffer[20]; // Adjust the size as per your requirement

		    floatToString(FPS, strBuffer, sizeof(strBuffer));
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2202      	movs	r2, #2
 8000aba:	2114      	movs	r1, #20
 8000abc:	4618      	mov	r0, r3
 8000abe:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000ac2:	f7ff feab 	bl	800081c <_Z13floatToStringfPcii>

		    // Assuming LCD_PutStr() function displays the string on LCD
		    LCD_PutStr(10, 15, strBuffer, DEFAULT_FONT, 0x0000, 0xffff);
 8000ac6:	1d3a      	adds	r2, r7, #4
 8000ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <_Z7MainCPPv+0x228>)
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f001 fa80 	bl	8001fdc <LCD_PutStr>
		LCD_Update();
 8000adc:	f001 fab4 	bl	8002048 <LCD_Update>
	}
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f006 fa75 	bl	8006fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000aea:	e732      	b.n	8000952 <_Z7MainCPPv+0x6a>
 8000aec:	40020800 	.word	0x40020800
 8000af0:	08007b80 	.word	0x08007b80
 8000af4:	08001f7d 	.word	0x08001f7d
 8000af8:	08007980 	.word	0x08007980
 8000afc:	200000b4 	.word	0x200000b4
 8000b00:	40020400 	.word	0x40020400
 8000b04:	200000e0 	.word	0x200000e0
 8000b08:	080328d0 	.word	0x080328d0
 8000b0c:	447a0000 	.word	0x447a0000
 8000b10:	080339d8 	.word	0x080339d8

08000b14 <EVENT_LOOP_WRAPPER>:
/*********************************************************/
/*               AWAYS LEAVE IT FOR LAST                 */
/*********************************************************/
extern "C"//TODO FIND A WAY TO SIMPLIFY THIS
{
	void EVENT_LOOP_WRAPPER(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
		AsyncEventLoop.ASYNC_LOOP();
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <EVENT_LOOP_WRAPPER+0x10>)
 8000b1a:	f000 fdfb 	bl	8001714 <_ZN16Async_Event_Loop10ASYNC_LOOPEv>
	}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000d0 	.word	0x200000d0

08000b28 <RotaryEncoderWrapper>:
	void RotaryEncoderWrapper(){//TODO This needs to be done here
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
		encoder.handleInterrupt();
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <RotaryEncoderWrapper+0x10>)
 8000b2e:	f000 ffeb 	bl	8001b08 <_ZN6KY_04015handleInterruptEv>
	}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200000e0 	.word	0x200000e0

08000b3c <MainC>:
	void MainC(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
		MainCPP();
 8000b40:	f7ff fed2 	bl	80008e8 <_Z7MainCPPv>
	}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <_ZN9flashOnceD1Ev>:
class flashOnce: public QueueableClass{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <_ZN9flashOnceD1Ev+0x20>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fd1f 	bl	800059c <_ZN14QueueableClassD1Ev>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	080338d8 	.word	0x080338d8

08000b6c <_Z41__static_initialization_and_destruction_0ii>:
}
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af06      	add	r7, sp, #24
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d121      	bne.n	8000bc0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d11c      	bne.n	8000bc0 <_Z41__static_initialization_and_destruction_0ii+0x54>
QueueableClass beep;
 8000b86:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000b88:	f7ff fcf2 	bl	8000570 <_ZN14QueueableClassC1Ev>
Frame_Builder FB;
 8000b8c:	481b      	ldr	r0, [pc, #108]	@ (8000bfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000b8e:	f000 fe11 	bl	80017b4 <_ZN13Frame_BuilderC1Ev>
flashOnce flashOnce;
 8000b92:	481b      	ldr	r0, [pc, #108]	@ (8000c00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000b94:	f7ff fe18 	bl	80007c8 <_ZN9flashOnceC1Ev>
Async_Event_Loop AsyncEventLoop;
 8000b98:	481a      	ldr	r0, [pc, #104]	@ (8000c04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000b9a:	f000 fc93 	bl	80014c4 <_ZN16Async_Event_LoopC1Ev>
		);
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9304      	str	r3, [sp, #16]
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000ba4:	9303      	str	r3, [sp, #12]
 8000ba6:	2324      	movs	r3, #36	@ 0x24
 8000ba8:	9302      	str	r3, [sp, #8]
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4914      	ldr	r1, [pc, #80]	@ (8000c0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000bba:	4815      	ldr	r0, [pc, #84]	@ (8000c10 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000bbc:	f000 ff2c 	bl	8001a18 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>
KY_040 encoder(
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d113      	bne.n	8000bee <_Z41__static_initialization_and_destruction_0ii+0x82>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10e      	bne.n	8000bee <_Z41__static_initialization_and_destruction_0ii+0x82>
 8000bd0:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000bd2:	f000 ff5f 	bl	8001a94 <_ZN6KY_040D1Ev>
Async_Event_Loop AsyncEventLoop;
 8000bd6:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000bd8:	f000 fc8e 	bl	80014f8 <_ZN16Async_Event_LoopD1Ev>
flashOnce flashOnce;
 8000bdc:	4808      	ldr	r0, [pc, #32]	@ (8000c00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000bde:	f7ff ffb3 	bl	8000b48 <_ZN9flashOnceD1Ev>
Frame_Builder FB;
 8000be2:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000be4:	f000 fdf6 	bl	80017d4 <_ZN13Frame_BuilderD1Ev>
QueueableClass beep;
 8000be8:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000bea:	f7ff fcd7 	bl	800059c <_ZN14QueueableClassD1Ev>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a8 	.word	0x200000a8
 8000bfc:	200000b4 	.word	0x200000b4
 8000c00:	200000c4 	.word	0x200000c4
 8000c04:	200000d0 	.word	0x200000d0
 8000c08:	080007ed 	.word	0x080007ed
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	200000e0 	.word	0x200000e0

08000c14 <_GLOBAL__sub_I_beep>:
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff ffa5 	bl	8000b6c <_Z41__static_initialization_and_destruction_0ii>
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_GLOBAL__sub_D_beep>:
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff9d 	bl	8000b6c <_Z41__static_initialization_and_destruction_0ii>
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f001 fa6a 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f814 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 f920 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c44:	f000 f8fe 	bl	8000e44 <MX_DMA_Init>
  MX_SPI1_Init();
 8000c48:	f000 f876 	bl	8000d38 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000c4c:	f000 f8d0 	bl	8000df0 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000c50:	f000 f8aa 	bl	8000da8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //Start Event Loop Timer (TIM11)

  HAL_TIM_Base_Start_IT(&htim11);
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <main+0x30>)
 8000c56:	f003 fa9d 	bl	8004194 <HAL_TIM_Base_Start_IT>


  /*************  CPP Entry point  ****************/
  MainC();
 8000c5a:	f7ff ff6f 	bl	8000b3c <MainC>
  /************************************************/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c5e:	bf00      	nop
 8000c60:	e7fd      	b.n	8000c5e <main+0x2a>
 8000c62:	bf00      	nop
 8000c64:	200001c0 	.word	0x200001c0

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	@ 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	2230      	movs	r2, #48	@ 0x30
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f006 fab8 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <SystemClock_Config+0xc8>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <SystemClock_Config+0xc8>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <SystemClock_Config+0xc8>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <SystemClock_Config+0xcc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000cdc:	23c8      	movs	r3, #200	@ 0xc8
 8000cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 f9af 	bl	8003050 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf8:	f000 f9da 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d00:	2302      	movs	r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2103      	movs	r1, #3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f002 fc11 	bl	8003540 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d24:	f000 f9c4 	bl	80010b0 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3750      	adds	r7, #80	@ 0x50
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d3e:	4a19      	ldr	r2, [pc, #100]	@ (8000da4 <MX_SPI1_Init+0x6c>)
 8000d40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d86:	220a      	movs	r2, #10
 8000d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_SPI1_Init+0x68>)
 8000d8c:	f002 fdb8 	bl	8003900 <HAL_SPI_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000d96:	f000 f98b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000108 	.word	0x20000108
 8000da4:	40013000 	.word	0x40013000

08000da8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dae:	4a0f      	ldr	r2, [pc, #60]	@ (8000dec <MX_TIM11_Init+0x44>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000db4:	2263      	movs	r2, #99	@ 0x63
 8000db6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dc0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dc4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <MX_TIM11_Init+0x40>)
 8000dd4:	f003 f98e 	bl	80040f4 <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000dde:	f000 f967 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001c0 	.word	0x200001c0
 8000dec:	40014800 	.word	0x40014800

08000df0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	@ (8000e40 <MX_USART1_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000dfc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	@ (8000e3c <MX_USART1_UART_Init+0x4c>)
 8000e28:	f003 fbfe 	bl	8004628 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f000 f93d 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000208 	.word	0x20000208
 8000e40:	40011000 	.word	0x40011000

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_DMA_Init+0x3c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a0b      	ldr	r2, [pc, #44]	@ (8000e80 <MX_DMA_Init+0x3c>)
 8000e54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_DMA_Init+0x3c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	203a      	movs	r0, #58	@ 0x3a
 8000e6c:	f001 fae5 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e70:	203a      	movs	r0, #58	@ 0x3a
 8000e72:	f001 fafe 	bl	8002472 <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b59      	ldr	r3, [pc, #356]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b55      	ldr	r3, [pc, #340]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a54      	ldr	r2, [pc, #336]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b52      	ldr	r3, [pc, #328]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a4d      	ldr	r2, [pc, #308]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b47      	ldr	r3, [pc, #284]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a46      	ldr	r2, [pc, #280]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b44      	ldr	r3, [pc, #272]	@ (8001010 <MX_GPIO_Init+0x18c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f10:	4840      	ldr	r0, [pc, #256]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f12:	f002 f86b 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2118      	movs	r1, #24
 8000f1a:	483f      	ldr	r0, [pc, #252]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f1c:	f002 f866 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f240 4107 	movw	r1, #1031	@ 0x407
 8000f26:	483d      	ldr	r0, [pc, #244]	@ (800101c <MX_GPIO_Init+0x198>)
 8000f28:	f002 f860 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4833      	ldr	r0, [pc, #204]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f46:	f001 fecd 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	482e      	ldr	r0, [pc, #184]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f60:	f001 fec0 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DT_ROTARY_Pin CLK_ROTARY_Pin */
  GPIO_InitStruct.Pin = DT_ROTARY_Pin|CLK_ROTARY_Pin;
 8000f64:	2306      	movs	r3, #6
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f68:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4827      	ldr	r0, [pc, #156]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f7a:	f001 feb3 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin;
 8000f7e:	2318      	movs	r3, #24
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4820      	ldr	r0, [pc, #128]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f96:	f001 fea5 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin BUZZER_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin;
 8000f9a:	f240 4307 	movw	r3, #1031	@ 0x407
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481a      	ldr	r0, [pc, #104]	@ (800101c <MX_GPIO_Init+0x198>)
 8000fb4:	f001 fe96 	bl	8002ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_SCL_Pin B7_SDA_Pin */
  GPIO_InitStruct.Pin = B6_SCL_Pin|B7_SDA_Pin;
 8000fb8:	23c0      	movs	r3, #192	@ 0xc0
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fbc:	2312      	movs	r3, #18
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4812      	ldr	r0, [pc, #72]	@ (800101c <MX_GPIO_Init+0x198>)
 8000fd4:	f001 fe86 	bl	8002ce4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2006      	movs	r0, #6
 8000fde:	f001 fa2c 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fe2:	2006      	movs	r0, #6
 8000fe4:	f001 fa45 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2007      	movs	r0, #7
 8000fee:	f001 fa24 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f001 fa3d 	bl	8002472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2008      	movs	r0, #8
 8000ffe:	f001 fa1c 	bl	800243a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001002:	2008      	movs	r0, #8
 8001004:	f001 fa35 	bl	8002472 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400

08001020 <HAL_GPIO_EXTI_Callback>:
/******         EXTI CALLBACK          ******/
/********************************************/
//    This wrapper needs to be placed in here
/********************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
	//DESABLE THE ASYNC LOOP WHILE HANDLING PIN INTERRUPTS
	HAL_TIM_Base_Stop_IT(&htim11);
 800102a:	480b      	ldr	r0, [pc, #44]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x38>)
 800102c:	f003 f914 	bl	8004258 <HAL_TIM_Base_Stop_IT>
	if((GPIO_Pin == GPIO_PIN_1) || (GPIO_Pin == GPIO_PIN_2)){
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d002      	beq.n	800103c <HAL_GPIO_EXTI_Callback+0x1c>
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	2b04      	cmp	r3, #4
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_EXTI_Callback+0x20>
		RotaryEncoderWrapper();//performs the rotary decoding logic here
 800103c:	f7ff fd74 	bl	8000b28 <RotaryEncoderWrapper>
	}
	if(GPIO_Pin == GPIO_PIN_0){
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d101      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x2a>
		ButtonEncoderWrapper();
 8001046:	f7ff fbdd 	bl	8000804 <ButtonEncoderWrapper>
	}
	//ENABLE THE ASYNC LOOP AFTER PIN INTERRUPTS ARE DECODED
	HAL_TIM_Base_Start_IT(&htim11);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <HAL_GPIO_EXTI_Callback+0x38>)
 800104c:	f003 f8a2 	bl	8004194 <HAL_TIM_Base_Start_IT>

	}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001c0 	.word	0x200001c0

0800105c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	GPIOC->ODR &= ~GPIO_PIN_13; // SET BLUE led
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 800106a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800106e:	6153      	str	r3, [r2, #20]
	//DISABLE PIN INTERRUPTS WHILE EXECUTING THE LOOP
	HAL_NVIC_DisableIRQ	(EXTI0_IRQn);
 8001070:	2006      	movs	r0, #6
 8001072:	f001 fa0c 	bl	800248e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI1_IRQn);
 8001076:	2007      	movs	r0, #7
 8001078:	f001 fa09 	bl	800248e <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI2_IRQn);
 800107c:	2008      	movs	r0, #8
 800107e:	f001 fa06 	bl	800248e <HAL_NVIC_DisableIRQ>
	//EXECUTE THE LOOP
	EVENT_LOOP_WRAPPER();
 8001082:	f7ff fd47 	bl	8000b14 <EVENT_LOOP_WRAPPER>
	//ENABLE PIN INTERRUPTS AFTER THE LOOP EXECUTED
	HAL_NVIC_EnableIRQ	(EXTI0_IRQn);
 8001086:	2006      	movs	r0, #6
 8001088:	f001 f9f3 	bl	8002472 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI1_IRQn);
 800108c:	2007      	movs	r0, #7
 800108e:	f001 f9f0 	bl	8002472 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI2_IRQn);
 8001092:	2008      	movs	r0, #8
 8001094:	f001 f9ed 	bl	8002472 <HAL_NVIC_EnableIRQ>
	GPIOC->ODR |= GPIO_PIN_13; // RESET BLUE led
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	4a03      	ldr	r2, [pc, #12]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 800109e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010a2:	6153      	str	r3, [r2, #20]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020800 	.word	0x40020800

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b6:	b672      	cpsid	i
}
 80010b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  GPIOC -> ODR ^= GPIO_PIN_13;
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <Error_Handler+0x30>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <Error_Handler+0x30>)
 80010c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80010c4:	6153      	str	r3, [r2, #20]
	  for(uint32_t _ = 0; _ < 50000000; _++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e003      	b.n	80010d4 <Error_Handler+0x24>
		  __NOP();
 80010cc:	bf00      	nop
	  for(uint32_t _ = 0; _ < 50000000; _++){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a03      	ldr	r2, [pc, #12]	@ (80010e4 <Error_Handler+0x34>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d9f7      	bls.n	80010cc <Error_Handler+0x1c>
	  GPIOC -> ODR ^= GPIO_PIN_13;
 80010dc:	e7ed      	b.n	80010ba <Error_Handler+0xa>
 80010de:	bf00      	nop
 80010e0:	40020800 	.word	0x40020800
 80010e4:	02faf07f 	.word	0x02faf07f

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a30      	ldr	r2, [pc, #192]	@ (8001218 <HAL_SPI_MspInit+0xe0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d159      	bne.n	800120e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a2e      	ldr	r2, [pc, #184]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 8001164:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a27      	ldr	r2, [pc, #156]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b25      	ldr	r3, [pc, #148]	@ (800121c <HAL_SPI_MspInit+0xe4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001192:	23a0      	movs	r3, #160	@ 0xa0
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a2:	2305      	movs	r3, #5
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	4619      	mov	r1, r3
 80011ac:	481c      	ldr	r0, [pc, #112]	@ (8001220 <HAL_SPI_MspInit+0xe8>)
 80011ae:	f001 fd99 	bl	8002ce4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <HAL_SPI_MspInit+0xf0>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011ba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011c2:	2240      	movs	r2, #64	@ 0x40
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 80011f4:	f001 f966 	bl	80024c4 <HAL_DMA_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 80011fe:	f7ff ff57 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a07      	ldr	r2, [pc, #28]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 8001206:	649a      	str	r2, [r3, #72]	@ 0x48
 8001208:	4a06      	ldr	r2, [pc, #24]	@ (8001224 <HAL_SPI_MspInit+0xec>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3728      	adds	r7, #40	@ 0x28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40013000 	.word	0x40013000
 800121c:	40023800 	.word	0x40023800
 8001220:	40020000 	.word	0x40020000
 8001224:	20000160 	.word	0x20000160
 8001228:	40026440 	.word	0x40026440

0800122c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_TIM_Base_MspInit+0x48>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d115      	bne.n	800126a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <HAL_TIM_Base_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <HAL_TIM_Base_MspInit+0x4c>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124c:	6453      	str	r3, [r2, #68]	@ 0x44
 800124e:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <HAL_TIM_Base_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001252:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	201a      	movs	r0, #26
 8001260:	f001 f8eb 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001264:	201a      	movs	r0, #26
 8001266:	f001 f904 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40014800 	.word	0x40014800
 8001278:	40023800 	.word	0x40023800

0800127c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1d      	ldr	r2, [pc, #116]	@ (8001310 <HAL_UART_MspInit+0x94>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d134      	bne.n	8001308 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_UART_MspInit+0x98>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012e8:	2307      	movs	r3, #7
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4809      	ldr	r0, [pc, #36]	@ (8001318 <HAL_UART_MspInit+0x9c>)
 80012f4:	f001 fcf6 	bl	8002ce4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f8:	2200      	movs	r2, #0
 80012fa:	2100      	movs	r1, #0
 80012fc:	2025      	movs	r0, #37	@ 0x25
 80012fe:	f001 f89c 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001302:	2025      	movs	r0, #37	@ 0x25
 8001304:	f001 f8b5 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40011000 	.word	0x40011000
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001372:	f000 ff1f 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}

0800137a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800137e:	2001      	movs	r0, #1
 8001380:	f001 fe4e 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_ROTARY_Pin);
 800138c:	2002      	movs	r0, #2
 800138e:	f001 fe47 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}

08001396 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_ROTARY_Pin);
 800139a:	2004      	movs	r0, #4
 800139c:	f001 fe40 	bl	8003020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80013aa:	f002 ff84 	bl	80042b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001c0 	.word	0x200001c0

080013b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013bc:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <USART1_IRQHandler+0x10>)
 80013be:	f003 f983 	bl	80046c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000208 	.word	0x20000208

080013cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80013d0:	4802      	ldr	r0, [pc, #8]	@ (80013dc <DMA2_Stream2_IRQHandler+0x10>)
 80013d2:	f001 fa0f 	bl	80027f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000160 	.word	0x20000160

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e8:	4a14      	ldr	r2, [pc, #80]	@ (800143c <_sbrk+0x5c>)
 80013ea:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <_sbrk+0x60>)
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f4:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <_sbrk+0x64>)
 80013fe:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <_sbrk+0x68>)
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	429a      	cmp	r2, r3
 800140e:	d207      	bcs.n	8001420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001410:	f005 ff04 	bl	800721c <__errno>
 8001414:	4603      	mov	r3, r0
 8001416:	220c      	movs	r2, #12
 8001418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e009      	b.n	8001434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <_sbrk+0x64>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	4a05      	ldr	r2, [pc, #20]	@ (8001444 <_sbrk+0x64>)
 8001430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001432:	68fb      	ldr	r3, [r7, #12]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20020000 	.word	0x20020000
 8001440:	00000400 	.word	0x00000400
 8001444:	20000250 	.word	0x20000250
 8001448:	2001c638 	.word	0x2001c638

0800144c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001450:	4b06      	ldr	r3, [pc, #24]	@ (800146c <SystemInit+0x20>)
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001456:	4a05      	ldr	r2, [pc, #20]	@ (800146c <SystemInit+0x20>)
 8001458:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800145c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001474:	f7ff ffea 	bl	800144c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	@ (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	@ (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800149e:	f005 fec3 	bl	8007228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fbc7 	bl	8000c34 <main>
  bx  lr    
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80014b4:	0803424c 	.word	0x0803424c
  ldr r2, =_sbss
 80014b8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80014bc:	2001c634 	.word	0x2001c634

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <_ZN16Async_Event_LoopC1Ev>:
 */

#include "../Async_Event_Loop/AsyncEventLoop.hpp"
#include "Types.hpp"

Async_Event_Loop::Async_Event_Loop() :
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    beginning(nullptr),
    previous(nullptr),
    end(nullptr) {
 80014cc:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <_ZN16Async_Event_LoopC1Ev+0x30>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	601a      	str	r2, [r3, #0]
    beginning(nullptr),
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
    previous(nullptr),
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    end(nullptr) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
}
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	08033938 	.word	0x08033938

080014f8 <_ZN16Async_Event_LoopD1Ev>:

Async_Event_Loop::~Async_Event_Loop() {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <_ZN16Async_Event_LoopD1Ev+0x1c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	601a      	str	r2, [r3, #0]
    // Clean up any dynamically allocated resources if needed
}
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	08033938 	.word	0x08033938

08001518 <_ZN16Async_Event_LoopD0Ev>:
Async_Event_Loop::~Async_Event_Loop() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
}
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffe9 	bl	80014f8 <_ZN16Async_Event_LoopD1Ev>
 8001526:	2110      	movs	r1, #16
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f005 fd39 	bl	8006fa0 <_ZdlPvj>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>:

void Async_Event_Loop::setBeginning(QueueableClass* beginning) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    this->beginning = beginning;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_ZN16Async_Event_Loop12getBeginningEv>:

QueueableClass* Async_Event_Loop::getBeginning() {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    return this->beginning;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>:

void Async_Event_Loop::setPrevious(QueueableClass* previous) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    this->previous = previous;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	609a      	str	r2, [r3, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_ZN16Async_Event_Loop11getPreviousEv>:

QueueableClass* Async_Event_Loop::getPrevious() {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    return this->previous;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>:

void Async_Event_Loop::setEnd(QueueableClass* end) {
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    this->end = end;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	60da      	str	r2, [r3, #12]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN16Async_Event_Loop6getEndEv>:

QueueableClass* Async_Event_Loop::getEnd() {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    return this->end;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>:

void Async_Event_Loop::enqueue(QueueableClass* next) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    if (next->getState() == DONE) {
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7fe ffec 	bl	80005bc <_ZN14QueueableClass8getStateEv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d036      	beq.n	8001662 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x8e>
        if (getEnd() == nullptr) {
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe1 	bl	80015bc <_ZN16Async_Event_Loop6getEndEv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x50>
            // Queue is empty, add the first item
            setBeginning(next);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff93 	bl	8001538 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
            setPrevious(next);
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ffa9 	bl	800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ffbf 	bl	80015a0 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 8001622:	e013      	b.n	800164c <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x78>
        } else {
            // Queue is not empty, add to the end
            getEnd()->setNextClass(next);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffc9 	bl	80015bc <_ZN16Async_Event_Loop6getEndEv>
 800162a:	4603      	mov	r3, r0
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffd0 	bl	80005d4 <_ZN14QueueableClass12setNextClassEPS_>
            setPrevious(getEnd());
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffc1 	bl	80015bc <_ZN16Async_Event_Loop6getEndEv>
 800163a:	4603      	mov	r3, r0
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff94 	bl	800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffaa 	bl	80015a0 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        }
        next->enqueue(); // Signal the object it's enqueued
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3310      	adds	r3, #16
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	4798      	blx	r3
        next->setNextClass(nullptr); // Ensure new end points to null
 8001658:	2100      	movs	r1, #0
 800165a:	6838      	ldr	r0, [r7, #0]
 800165c:	f7fe ffba 	bl	80005d4 <_ZN14QueueableClass12setNextClassEPS_>
    } else {
        next->requeue(); // Object is not done, requeue it
    }
}
 8001660:	e005      	b.n	800166e <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x9a>
        next->requeue(); // Object is not done, requeue it
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	330c      	adds	r3, #12
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	4798      	blx	r3
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>:

void Async_Event_Loop::dequeue(QueueableClass* current) {
 8001676:	b590      	push	{r4, r7, lr}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
    if (getBeginning() == current && getEnd() == current) {
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff67 	bl	8001554 <_ZN16Async_Event_Loop12getBeginningEv>
 8001686:	4602      	mov	r2, r0
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4293      	cmp	r3, r2
 800168c:	d108      	bne.n	80016a0 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff94 	bl	80015bc <_ZN16Async_Event_Loop6getEndEv>
 8001694:	4602      	mov	r2, r0
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2c>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00c      	beq.n	80016c0 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x4a>
        // Only one item in the queue
        setBeginning(nullptr);
 80016a6:	2100      	movs	r1, #0
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff45 	bl	8001538 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
        setPrevious(nullptr);
 80016ae:	2100      	movs	r1, #0
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff5b 	bl	800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
        setEnd(nullptr);
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff71 	bl	80015a0 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 80016be:	e020      	b.n	8001702 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else if (getBeginning() == current) {
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff47 	bl	8001554 <_ZN16Async_Event_Loop12getBeginningEv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	bf0c      	ite	eq
 80016ce:	2301      	moveq	r3, #1
 80016d0:	2300      	movne	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d008      	beq.n	80016ea <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x74>
        // Dequeuing the first item
        setBeginning(current->getNextClass());
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f7fe ff89 	bl	80005f0 <_ZN14QueueableClass12getNextClassEv>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff28 	bl	8001538 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
 80016e8:	e00b      	b.n	8001702 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else {
        // Dequeuing an item in the middle or end
        getPrevious()->setNextClass(current->getNextClass());
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff4c 	bl	8001588 <_ZN16Async_Event_Loop11getPreviousEv>
 80016f0:	4604      	mov	r4, r0
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	f7fe ff7c 	bl	80005f0 <_ZN14QueueableClass12getNextClassEv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7fe ff69 	bl	80005d4 <_ZN14QueueableClass12setNextClassEPS_>
    }
    current->setNextClass(nullptr); // Ensure dequeued object points to nothing
 8001702:	2100      	movs	r1, #0
 8001704:	6838      	ldr	r0, [r7, #0]
 8001706:	f7fe ff65 	bl	80005d4 <_ZN14QueueableClass12setNextClassEPS_>
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
	...

08001714 <_ZN16Async_Event_Loop10ASYNC_LOOPEv>:

void Async_Event_Loop::ASYNC_LOOP() {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    QueueableClass* current = getBeginning();
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff19 	bl	8001554 <_ZN16Async_Event_Loop12getBeginningEv>
 8001722:	6178      	str	r0, [r7, #20]
    QueueableClass* next = nullptr;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]

    if (current != nullptr) { // IF THERE IS A QUEUE AT ALL
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d036      	beq.n	800179c <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x88>
        // Resetting for test purposes
        GPIOA->ODR &= ~GPIO_PIN_3; // Reset green led
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a1f      	ldr	r2, [pc, #124]	@ (80017b0 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 8001734:	f023 0308 	bic.w	r3, r3, #8
 8001738:	6153      	str	r3, [r2, #20]

        do {

            uint8_t currentClassState = current->getState();
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7fe ff3e 	bl	80005bc <_ZN14QueueableClass8getStateEv>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
            next = current->getNextClass(); // Save next pointer before any potential dequeue
 8001744:	6978      	ldr	r0, [r7, #20]
 8001746:	f7fe ff53 	bl	80005f0 <_ZN14QueueableClass12getNextClassEv>
 800174a:	6138      	str	r0, [r7, #16]
            // Update pointers for next iteration
            if (currentClassState == DONE) {
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d104      	bne.n	800175c <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x48>
                dequeue(current); // Dequeue the object if it's done
 8001752:	6979      	ldr	r1, [r7, #20]
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff8e 	bl	8001676 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>
 800175a:	e009      	b.n	8001770 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x5c>
            } else {
                current->EXECUTE(); // Execute the object if it's not done
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3314      	adds	r3, #20
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6978      	ldr	r0, [r7, #20]
 8001766:	4798      	blx	r3
                setPrevious(current);
 8001768:	6979      	ldr	r1, [r7, #20]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fefe 	bl	800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
}

            current = next; // Move to the next item in the queue
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	617b      	str	r3, [r7, #20]

        } while (current != nullptr);
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1df      	bne.n	800173a <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x26>
        // After the loop, update end pointer
        setEnd(getPrevious());
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff04 	bl	8001588 <_ZN16Async_Event_Loop11getPreviousEv>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff0b 	bl	80015a0 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        // Reset previous pointer to beginning (if needed)
        setPrevious(getBeginning());
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fee2 	bl	8001554 <_ZN16Async_Event_Loop12getBeginningEv>
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fee9 	bl	800156c <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>

    } else {
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
    }
}
 800179a:	e005      	b.n	80017a8 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x94>
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
 800179c:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4a03      	ldr	r2, [pc, #12]	@ (80017b0 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6153      	str	r3, [r2, #20]
}
 80017a8:	bf00      	nop
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40020000 	.word	0x40020000

080017b4 <_ZN13Frame_BuilderC1Ev>:
#include "Assets.hpp"
#include <cmath>
using namespace std;
//////////////////////////////////////////////////////

Frame_Builder::Frame_Builder() {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <_ZN13Frame_BuilderC1Ev+0x1c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	0803396c 	.word	0x0803396c

080017d4 <_ZN13Frame_BuilderD1Ev>:

Frame_Builder::~Frame_Builder() {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <_ZN13Frame_BuilderD1Ev+0x1c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	0803396c 	.word	0x0803396c

080017f4 <_ZN13Frame_BuilderD0Ev>:
Frame_Builder::~Frame_Builder() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
}
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ffe9 	bl	80017d4 <_ZN13Frame_BuilderD1Ev>
 8001802:	2104      	movs	r1, #4
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f005 fbcb 	bl	8006fa0 <_ZdlPvj>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb>:
								void (*func)(UG_S16, UG_S16, UG_COLOR),
								const uint8_t tile[],
								uint8_t transColor,
								bool setTrans
								)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4603      	mov	r3, r0
 8001824:	70fb      	strb	r3, [r7, #3]
 8001826:	460b      	mov	r3, r1
 8001828:	70bb      	strb	r3, [r7, #2]
 800182a:	4613      	mov	r3, r2
 800182c:	707b      	strb	r3, [r7, #1]
	// check if the tile is not empty
	uint8_t width = ye - yi + 1;
 800182e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001832:	78bb      	ldrb	r3, [r7, #2]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	74fb      	strb	r3, [r7, #19]
	uint8_t height = xe - xi + 1;
 800183c:	787a      	ldrb	r2, [r7, #1]
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	74bb      	strb	r3, [r7, #18]
	if (width < 1|| height < 1) return;
 8001848:	7cfb      	ldrb	r3, [r7, #19]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d061      	beq.n	8001912 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xfe>
 800184e:	7cbb      	ldrb	r3, [r7, #18]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d05e      	beq.n	8001912 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xfe>


	 for(uint16_t Y = 0; Y < width; Y++){
 8001854:	2300      	movs	r3, #0
 8001856:	82fb      	strh	r3, [r7, #22]
 8001858:	e055      	b.n	8001906 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xf2>
		 for(uint16_t X = 0; X < height; X++){
 800185a:	2300      	movs	r3, #0
 800185c:	82bb      	strh	r3, [r7, #20]
 800185e:	e04a      	b.n	80018f6 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xe2>
			 uint16_t position = X + Y * width;
 8001860:	7cfb      	ldrb	r3, [r7, #19]
 8001862:	b29b      	uxth	r3, r3
 8001864:	8afa      	ldrh	r2, [r7, #22]
 8001866:	fb12 f303 	smulbb	r3, r2, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	8abb      	ldrh	r3, [r7, #20]
 800186e:	4413      	add	r3, r2
 8001870:	823b      	strh	r3, [r7, #16]
			 uint8_t color = tile[position];
 8001872:	8a3b      	ldrh	r3, [r7, #16]
 8001874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	73fb      	strb	r3, [r7, #15]
			 if(setTrans){
 800187c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01d      	beq.n	80018c0 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xac>
				 if(color != transColor){
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800188a:	429a      	cmp	r2, r3
 800188c:	d030      	beq.n	80018f0 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xdc>
					 uint8_t pixel16bits = tile[position];
 800188e:	8a3b      	ldrh	r3, [r7, #16]
 8001890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	737b      	strb	r3, [r7, #13]
				 	 func(X + xi, Y + yi, palette[pixel16bits]);
 8001898:	78fb      	ldrb	r3, [r7, #3]
 800189a:	b29a      	uxth	r2, r3
 800189c:	8abb      	ldrh	r3, [r7, #20]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b218      	sxth	r0, r3
 80018a4:	78bb      	ldrb	r3, [r7, #2]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	8afb      	ldrh	r3, [r7, #22]
 80018aa:	4413      	add	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	b219      	sxth	r1, r3
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018b6:	4413      	add	r3, r2
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018bc:	4798      	blx	r3
 80018be:	e017      	b.n	80018f0 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0xdc>
			     }
			 }else{
				 uint8_t pixel16bits = tile[position];
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c4:	4413      	add	r3, r2
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	73bb      	strb	r3, [r7, #14]
				 func(X + xi, Y + yi, palette[pixel16bits]);
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	8abb      	ldrh	r3, [r7, #20]
 80018d0:	4413      	add	r3, r2
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b218      	sxth	r0, r3
 80018d6:	78bb      	ldrb	r3, [r7, #2]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	8afb      	ldrh	r3, [r7, #22]
 80018dc:	4413      	add	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b219      	sxth	r1, r3
 80018e2:	7bbb      	ldrb	r3, [r7, #14]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e8:	4413      	add	r3, r2
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ee:	4798      	blx	r3
		 for(uint16_t X = 0; X < height; X++){
 80018f0:	8abb      	ldrh	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	82bb      	strh	r3, [r7, #20]
 80018f6:	7cbb      	ldrb	r3, [r7, #18]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	8aba      	ldrh	r2, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3af      	bcc.n	8001860 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0x4c>
	 for(uint16_t Y = 0; Y < width; Y++){
 8001900:	8afb      	ldrh	r3, [r7, #22]
 8001902:	3301      	adds	r3, #1
 8001904:	82fb      	strh	r3, [r7, #22]
 8001906:	7cfb      	ldrb	r3, [r7, #19]
 8001908:	b29b      	uxth	r3, r3
 800190a:	8afa      	ldrh	r2, [r7, #22]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3a4      	bcc.n	800185a <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0x46>
 8001910:	e000      	b.n	8001914 <_ZN13Frame_Builder15FB_Draw8bitTileEhhhhPKtPFvsstEPKhhb+0x100>
	if (width < 1|| height < 1) return;
 8001912:	bf00      	nop
			 }
		 }
 	 }
 }
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh>:
								uint16_t BGWidth,
								const uint16_t palette[],
								void (*func)(UG_S16, UG_S16, UG_COLOR),
								const uint8_t tile[]
								)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b088      	sub	sp, #32
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	4608      	mov	r0, r1
 8001924:	4611      	mov	r1, r2
 8001926:	461a      	mov	r2, r3
 8001928:	4603      	mov	r3, r0
 800192a:	817b      	strh	r3, [r7, #10]
 800192c:	460b      	mov	r3, r1
 800192e:	813b      	strh	r3, [r7, #8]
 8001930:	4613      	mov	r3, r2
 8001932:	80fb      	strh	r3, [r7, #6]
	//draws a piece of the background inside the screen, all relative to the background.
	//we make sure everything is in order:
	uint16_t windowWidth = windowXf - windowXi + 1;
 8001934:	88fa      	ldrh	r2, [r7, #6]
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	b29b      	uxth	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	82fb      	strh	r3, [r7, #22]
	uint16_t windowHeight = windowYf - windowYi + 1;
 8001940:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001942:	893b      	ldrh	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	b29b      	uxth	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	82bb      	strh	r3, [r7, #20]
	if(
			(windowWidth > screenWidth) ||
 800194c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001950:	b29b      	uxth	r3, r3
	if(
 8001952:	8afa      	ldrh	r2, [r7, #22]
 8001954:	429a      	cmp	r2, r3
 8001956:	d85a      	bhi.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			(windowHeight > screenHeight)||
 8001958:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800195c:	b29b      	uxth	r3, r3
			(windowWidth > screenWidth) ||
 800195e:	8aba      	ldrh	r2, [r7, #20]
 8001960:	429a      	cmp	r2, r3
 8001962:	d854      	bhi.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			(screenHeight > BGHeight) ||
 8001964:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001968:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
			(windowHeight > screenHeight)||
 800196a:	429a      	cmp	r2, r3
 800196c:	dc4f      	bgt.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			(screenWidth > BGWidth) ||
 800196e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001972:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
			(screenHeight > BGHeight) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	dc49      	bgt.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			(windowXi + windowWidth > BGWidth)||
 800197a:	897a      	ldrh	r2, [r7, #10]
 800197c:	8afb      	ldrh	r3, [r7, #22]
 800197e:	441a      	add	r2, r3
 8001980:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
			(screenWidth > BGWidth) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	dc42      	bgt.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			(windowYi + windowHeight > BGHeight)
 8001988:	893a      	ldrh	r2, [r7, #8]
 800198a:	8abb      	ldrh	r3, [r7, #20]
 800198c:	441a      	add	r2, r3
 800198e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
			(windowXi + windowWidth > BGWidth)||
 8001990:	429a      	cmp	r2, r3
 8001992:	dc3c      	bgt.n	8001a0e <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf4>
			) return;


	for(uint32_t Y = 0; Y < windowWidth; Y++ ){
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	e034      	b.n	8001a04 <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xea>
		for(uint32_t X = 0; X < windowHeight; X++){
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e02a      	b.n	80019f6 <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xdc>
			uint32_t pixel8bits = (screenX +  windowXi + X) + (screenY + windowYi + Y) * BGWidth;
 80019a0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	4413      	add	r3, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	441a      	add	r2, r3
 80019ac:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80019ae:	893b      	ldrh	r3, [r7, #8]
 80019b0:	440b      	add	r3, r1
 80019b2:	4619      	mov	r1, r3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	440b      	add	r3, r1
 80019b8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
			func(X + windowXi, Y + windowYi, palette[tile[pixel8bits]]);
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b218      	sxth	r0, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	893b      	ldrh	r3, [r7, #8]
 80019d6:	4413      	add	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b219      	sxth	r1, r3
 80019dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019e8:	4413      	add	r3, r2
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ee:	4798      	blx	r3
		for(uint32_t X = 0; X < windowHeight; X++){
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	8abb      	ldrh	r3, [r7, #20]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3d0      	bcc.n	80019a0 <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0x86>
	for(uint32_t Y = 0; Y < windowWidth; Y++ ){
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	8afb      	ldrh	r3, [r7, #22]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3c6      	bcc.n	800199a <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0x80>
 8001a0c:	e000      	b.n	8001a10 <_ZN13Frame_Builder20FB_LongBGPartialDrawEtttttthhttPKtPFvsstEPKh+0xf6>
			) return;
 8001a0e:	bf00      	nop
		}
	}
}
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>:
 */
#include <cstdint>
#include "KY040.hpp"
#include "types.hpp"

KY_040::KY_040(
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4613      	mov	r3, r2
 8001a26:	80fb      	strh	r3, [r7, #6]
		bool perform
		)
: CLKPort(CLKPort),
  CLKPin(CLKPin),
  DTPort(DTPort),
  DTPin(DTPin)
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x78>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
: CLKPort(CLKPort),
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	605a      	str	r2, [r3, #4]
  CLKPin(CLKPin),
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	88fa      	ldrh	r2, [r7, #6]
 8001a38:	811a      	strh	r2, [r3, #8]
  DTPort(DTPort),
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	60da      	str	r2, [r3, #12]
  DTPin(DTPin)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8b3a      	ldrh	r2, [r7, #24]
 8001a44:	821a      	strh	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	@ 0x24
   {

	if(maxValue > minValue){//ensure that the min and max values are setup right;
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dd06      	ble.n	8001a62 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x4a>
	    if (minValue < INT32_MIN) {
	        this->minValue = INT32_MIN;  // Set minValue to INT32_MIN if it's too low
	    } else if (minValue > INT32_MAX) {
	        this->minValue = INT32_MAX;  // Set minValue to INT32_MAX if it's too high
	    } else {
	        this->minValue = minValue;   // Otherwise, use the provided minValue
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	69fa      	ldr	r2, [r7, #28]
 8001a58:	61da      	str	r2, [r3, #28]
	    if (maxValue < INT32_MIN) {
	        this->maxValue = INT32_MIN;  // Set maxValue to INT32_MIN if it's too low
	    } else if (maxValue > INT32_MAX) {
	        this->maxValue = INT32_MAX;  // Set maxValue to INT32_MAX if it's too high
	    } else {
	        this->maxValue = maxValue;   // Otherwise, use the provided maxValue
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	621a      	str	r2, [r3, #32]
 8001a60:	e007      	b.n	8001a72 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x5a>
	    }
	}else{//if min >= max, than defaults to int32 bounds.
		this -> minValue = INT32_MIN;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a68:	61da      	str	r2, [r3, #28]
		this -> maxValue = INT32_MAX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8001a70:	621a      	str	r2, [r3, #32]
	}

	this -> perform = perform;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a78:	761a      	strb	r2, [r3, #24]
	this -> toPerform = toPerform;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a7e:	615a      	str	r2, [r3, #20]
}
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	0803397c 	.word	0x0803397c

08001a94 <_ZN6KY_040D1Ev>:

KY_040::~KY_040(void) {
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <_ZN6KY_040D1Ev+0x1c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	601a      	str	r2, [r3, #0]

}
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	0803397c 	.word	0x0803397c

08001ab4 <_ZN6KY_040D0Ev>:
KY_040::~KY_040(void) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
}
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ffe9 	bl	8001a94 <_ZN6KY_040D1Ev>
 8001ac2:	2128      	movs	r1, #40	@ 0x28
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f005 fa6b 	bl	8006fa0 <_ZdlPvj>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZN6KY_0408setStepsEl>:

bool KY_040::getPerform(void){
	return this -> perform;
}

void KY_040::setSteps(int32_t loadToSteps){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	this -> Steps = loadToSteps;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_ZN6KY_0408getStepsEv>:

int32_t KY_040::getSteps(void){
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	return this -> Steps;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_ZN6KY_04015handleInterruptEv>:

void KY_040::resetSteps(void){
	this -> Steps = 0;
}

void KY_040::handleInterrupt(void){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	static uint8_t lrmem = 3;
	static int lrsum = 0;

	int8_t 	CLK, DT;

	CLK = (this-> CLKPort -> IDR & this -> CLKPin)? 1 : 0;//Reads the CLK pin from the encoder
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	8912      	ldrh	r2, [r2, #8]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <_ZN6KY_04015handleInterruptEv+0x1c>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <_ZN6KY_04015handleInterruptEv+0x1e>
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
	DT = (this -> DTPort -> IDR & this -> DTPin)? 1 : 0;//Reads the DT pin from the encoder
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	8a12      	ldrh	r2, [r2, #16]
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <_ZN6KY_04015handleInterruptEv+0x34>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <_ZN6KY_04015handleInterruptEv+0x36>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73bb      	strb	r3, [r7, #14]


	lrmem = ((lrmem & 0x03) << 2) + 2*CLK + DT;
 8001b40:	4b33      	ldr	r3, [pc, #204]	@ (8001c10 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001b60:	701a      	strb	r2, [r3, #0]
	lrsum = lrsum + TRANS[lrmem];
 8001b62:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <_ZN6KY_04015handleInterruptEv+0x10c>)
 8001b6a:	569b      	ldrsb	r3, [r3, r2]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a28      	ldr	r2, [pc, #160]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001b76:	6013      	str	r3, [r2, #0]

    /* encoder not in the neutral state */
	if(lrsum % 4 != 0){
 8001b78:	4b27      	ldr	r3, [pc, #156]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <_ZN6KY_04015handleInterruptEv+0x80>
		__NOP();
 8001b84:	bf00      	nop
		return;
 8001b86:	e03f      	b.n	8001c08 <_ZN6KY_04015handleInterruptEv+0x100>
	}
	/* encoder in the neutral state */
	switch(lrsum){
 8001b88:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f113 0f04 	cmn.w	r3, #4
 8001b90:	d01a      	beq.n	8001bc8 <_ZN6KY_04015handleInterruptEv+0xc0>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d131      	bne.n	8001bfa <_ZN6KY_04015handleInterruptEv+0xf2>
	case 4:
		lrsum=0;
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps + 1 > this -> maxValue? this -> maxValue : this -> Steps + 1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	db02      	blt.n	8001bae <_ZN6KY_04015handleInterruptEv+0xa6>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	e002      	b.n	8001bb4 <_ZN6KY_04015handleInterruptEv+0xac>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d020      	beq.n	8001c02 <_ZN6KY_04015handleInterruptEv+0xfa>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4798      	blx	r3
		break;
 8001bc6:	e01c      	b.n	8001c02 <_ZN6KY_04015handleInterruptEv+0xfa>
	case -4:
		lrsum=0;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps - 1 < this -> minValue? this -> minValue : this -> Steps - 1;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	dc02      	bgt.n	8001be0 <_ZN6KY_04015handleInterruptEv+0xd8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	e002      	b.n	8001be6 <_ZN6KY_04015handleInterruptEv+0xde>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	3b01      	subs	r3, #1
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7e1b      	ldrb	r3, [r3, #24]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <_ZN6KY_04015handleInterruptEv+0xfe>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	4798      	blx	r3
		break;
 8001bf8:	e005      	b.n	8001c06 <_ZN6KY_04015handleInterruptEv+0xfe>
	default:
		lrsum=0;
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
		//showDirection(0);
		break;
 8001c00:	e002      	b.n	8001c08 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 8001c06:	bf00      	nop
	}
}
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000014 	.word	0x20000014
 8001c14:	20000004 	.word	0x20000004
 8001c18:	20000254 	.word	0x20000254

08001c1c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <setSPI_Size+0x74>)
 8001c28:	f993 3000 	ldrsb.w	r3, [r3]
 8001c2c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d026      	beq.n	8001c82 <setSPI_Size+0x66>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <setSPI_Size+0x78>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <setSPI_Size+0x78>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c42:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8001c44:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <setSPI_Size+0x74>)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d10c      	bne.n	8001c6c <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <setSPI_Size+0x78>)
 8001c54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c58:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c94 <setSPI_Size+0x78>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <setSPI_Size+0x78>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c68:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8001c6a:	e00a      	b.n	8001c82 <setSPI_Size+0x66>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <setSPI_Size+0x78>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <setSPI_Size+0x78>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <setSPI_Size+0x78>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c80:	601a      	str	r2, [r3, #0]
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000018 	.word	0x20000018
 8001c94:	20000108 	.word	0x20000108

08001c98 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460a      	mov	r2, r1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001ca8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ffb5 	bl	8001c1c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <setDMAMemMode+0x110>)
 8001cb4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d106      	bne.n	8001cce <setDMAMemMode+0x36>
 8001cc0:	4b39      	ldr	r3, [pc, #228]	@ (8001da8 <setDMAMemMode+0x110>)
 8001cc2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d067      	beq.n	8001d9e <setDMAMemMode+0x106>
    config.dma_sz =size;
 8001cce:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001cd2:	4b35      	ldr	r3, [pc, #212]	@ (8001da8 <setDMAMemMode+0x110>)
 8001cd4:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8001cd6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001cda:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <setDMAMemMode+0x110>)
 8001cdc:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8001cde:	4b33      	ldr	r3, [pc, #204]	@ (8001dac <setDMAMemMode+0x114>)
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <setDMAMemMode+0x114>)
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cf2:	bf00      	nop
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <setDMAMemMode+0x114>)
 8001cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f7      	bne.n	8001cf4 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d10f      	bne.n	8001d2a <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <setDMAMemMode+0x114>)
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d12:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8001d14:	4b25      	ldr	r3, [pc, #148]	@ (8001dac <setDMAMemMode+0x114>)
 8001d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <setDMAMemMode+0x114>)
 8001d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e00d      	b.n	8001d46 <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <setDMAMemMode+0x114>)
 8001d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <setDMAMemMode+0x114>)
 8001d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <setDMAMemMode+0x114>)
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d44:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d116      	bne.n	8001d7a <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d4c:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <setDMAMemMode+0x114>)
 8001d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d54:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <setDMAMemMode+0x114>)
 8001d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d5e:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001d60:	4b12      	ldr	r3, [pc, #72]	@ (8001dac <setDMAMemMode+0x114>)
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <setDMAMemMode+0x114>)
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 5220 	orr.w	r2, r2, #10240	@ 0x2800
 8001d76:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8001d78:	e011      	b.n	8001d9e <setDMAMemMode+0x106>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <setDMAMemMode+0x114>)
 8001d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7e:	2200      	movs	r2, #0
 8001d80:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <setDMAMemMode+0x114>)
 8001d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d86:	2200      	movs	r2, #0
 8001d88:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001d8a:	4b08      	ldr	r3, [pc, #32]	@ (8001dac <setDMAMemMode+0x114>)
 8001d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <setDMAMemMode+0x114>)
 8001d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8001d9c:	601a      	str	r2, [r3, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000018 	.word	0x20000018
 8001dac:	20000108 	.word	0x20000108

08001db0 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f7ff ff2d 	bl	8001c1c <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <LCD_WriteCommand+0x50>)
 8001dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dc8:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	2201      	movs	r2, #1
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <LCD_WriteCommand+0x54>)
 8001dd4:	f001 fe1d 	bl	8003a12 <HAL_SPI_Transmit>
  if(argc){
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <LCD_WriteCommand+0x46>
    LCD_PIN(LCD_DC,SET);
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <LCD_WriteCommand+0x50>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <LCD_WriteCommand+0x54>)
 8001df2:	f001 fe0e 	bl	8003a12 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020400 	.word	0x40020400
 8001e04:	20000108 	.word	0x20000108

08001e08 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <LCD_WriteData+0xb8>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	619a      	str	r2, [r3, #24]
  LCD_PIN(LCD_CS,RESET);
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001e18:	e049      	b.n	8001eae <LCD_WriteData+0xa6>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf28      	it	cs
 8001e24:	4613      	movcs	r3, r2
 8001e26:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d924      	bls.n	8001e78 <LCD_WriteData+0x70>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	461a      	mov	r2, r3
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4823      	ldr	r0, [pc, #140]	@ (8001ec4 <LCD_WriteData+0xbc>)
 8001e36:	f001 ff2f 	bl	8003c98 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8001e3a:	bf00      	nop
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <LCD_WriteData+0xbc>)
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fe61 	bl	8002b08 <HAL_DMA_GetState>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d1f7      	bne.n	8001e3c <LCD_WriteData+0x34>
      if(config.dma_mem_inc==mem_increase){
 8001e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec8 <LCD_WriteData+0xc0>)
 8001e4e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d127      	bne.n	8001ea6 <LCD_WriteData+0x9e>
        if(config.dma_sz==mode_16bit)
 8001e56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <LCD_WriteData+0xc0>)
 8001e58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d104      	bne.n	8001e6a <LCD_WriteData+0x62>
          buff += chunk_size;
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	e01d      	b.n	8001ea6 <LCD_WriteData+0x9e>
        else
          buff += chunk_size*2;
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	461a      	mov	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	e016      	b.n	8001ea6 <LCD_WriteData+0x9e>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001e78:	89fa      	ldrh	r2, [r7, #14]
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4810      	ldr	r0, [pc, #64]	@ (8001ec4 <LCD_WriteData+0xbc>)
 8001e82:	f001 fdc6 	bl	8003a12 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001e86:	4b10      	ldr	r3, [pc, #64]	@ (8001ec8 <LCD_WriteData+0xc0>)
 8001e88:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d104      	bne.n	8001e9a <LCD_WriteData+0x92>
        buff += chunk_size;
 8001e90:	89fb      	ldrh	r3, [r7, #14]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	e005      	b.n	8001ea6 <LCD_WriteData+0x9e>
      else
        buff += chunk_size*2;
 8001e9a:	89fb      	ldrh	r3, [r7, #14]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1b2      	bne.n	8001e1a <LCD_WriteData+0x12>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	20000108 	.word	0x20000108
 8001ec8:	20000018 	.word	0x20000018

08001ecc <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b08b      	sub	sp, #44	@ 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	80fb      	strh	r3, [r7, #6]
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80bb      	strh	r3, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8001ef2:	88bb      	ldrh	r3, [r7, #4]
 8001ef4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001ef6:	883b      	ldrh	r3, [r7, #0]
 8001ef8:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001efa:	232a      	movs	r3, #42	@ 0x2a
 8001efc:	763b      	strb	r3, [r7, #24]
 8001efe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001f02:	121b      	asrs	r3, r3, #8
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	767b      	strb	r3, [r7, #25]
 8001f0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	76bb      	strb	r3, [r7, #26]
 8001f10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001f14:	121b      	asrs	r3, r3, #8
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	76fb      	strb	r3, [r7, #27]
 8001f1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001f22:	f107 0318 	add.w	r3, r7, #24
 8001f26:	2104      	movs	r1, #4
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff41 	bl	8001db0 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001f2e:	232b      	movs	r3, #43	@ 0x2b
 8001f30:	743b      	strb	r3, [r7, #16]
 8001f32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001f36:	121b      	asrs	r3, r3, #8
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	747b      	strb	r3, [r7, #17]
 8001f3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	74bb      	strb	r3, [r7, #18]
 8001f44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001f48:	121b      	asrs	r3, r3, #8
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	74fb      	strb	r3, [r7, #19]
 8001f50:	8c3b      	ldrh	r3, [r7, #32]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff27 	bl	8001db0 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001f62:	232c      	movs	r3, #44	@ 0x2c
 8001f64:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff1f 	bl	8001db0 <LCD_WriteCommand>
  }
}
 8001f72:	bf00      	nop
 8001f74:	372c      	adds	r7, #44	@ 0x2c
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd90      	pop	{r4, r7, pc}
	...

08001f7c <LCD_DrawPixelFB>:
#endif
}

#ifdef LCD_LOCAL_FB
void LCD_DrawPixelFB(int16_t x, int16_t y, uint16_t color)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
 8001f86:	460b      	mov	r3, r1
 8001f88:	80bb      	strh	r3, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x >= LCD_WIDTH) ||
 8001f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db19      	blt.n	8001fca <LCD_DrawPixelFB+0x4e>
 8001f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f9a:	2bef      	cmp	r3, #239	@ 0xef
 8001f9c:	dc15      	bgt.n	8001fca <LCD_DrawPixelFB+0x4e>
 8001f9e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	db11      	blt.n	8001fca <LCD_DrawPixelFB+0x4e>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 8001fa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001faa:	2bef      	cmp	r3, #239	@ 0xef
 8001fac:	dc0d      	bgt.n	8001fca <LCD_DrawPixelFB+0x4e>

  fb[x+(y*LCD_WIDTH)] = color;
 8001fae:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001fb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	440b      	add	r3, r1
 8001fc0:	4905      	ldr	r1, [pc, #20]	@ (8001fd8 <LCD_DrawPixelFB+0x5c>)
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001fc8:	e000      	b.n	8001fcc <LCD_DrawPixelFB+0x50>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 8001fca:	bf00      	nop
}
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000258 	.word	0x20000258

08001fdc <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60ba      	str	r2, [r7, #8]
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	81fb      	strh	r3, [r7, #14]
 8001fea:	460b      	mov	r3, r1
 8001fec:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f003 faea 	bl	80055c8 <UG_FontSelect>
  UG_SetForecolor(color);
 8001ff4:	8b3b      	ldrh	r3, [r7, #24]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fd04 	bl	8005a04 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001ffc:	8bbb      	ldrh	r3, [r7, #28]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fd12 	bl	8005a28 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8002004:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002008:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fc60 	bl	80058d4 <UG_PutString>
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <LCD_setPower+0x14>
 800202c:	2329      	movs	r3, #41	@ 0x29
 800202e:	e000      	b.n	8002032 <LCD_setPower+0x16>
 8002030:	2328      	movs	r3, #40	@ 0x28
 8002032:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff feb8 	bl	8001db0 <LCD_WriteCommand>
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <LCD_Update>:

void LCD_Update(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#ifdef LCD_LOCAL_FB
  setSPI_Size(mode_8bit);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fde5 	bl	8001c1c <setSPI_Size>
  LCD_SetAddressWindow(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 8002052:	23ef      	movs	r3, #239	@ 0xef
 8002054:	22ef      	movs	r2, #239	@ 0xef
 8002056:	2100      	movs	r1, #0
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff ff37 	bl	8001ecc <LCD_SetAddressWindow>
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800205e:	2101      	movs	r1, #1
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff fe19 	bl	8001c98 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
 8002066:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <LCD_Update+0x34>)
 800206c:	f7ff fecc 	bl	8001e08 <LCD_WriteData>
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8002070:	2100      	movs	r1, #0
 8002072:	2001      	movs	r0, #1
 8002074:	f7ff fe10 	bl	8001c98 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000258 	.word	0x20000258

08002080 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <LCD_init+0x80>)
 8002088:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800208c:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 f8b0 	bl	80021f4 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <LCD_init+0x80>)
 8002096:	2201      	movs	r2, #1
 8002098:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 800209a:	20c8      	movs	r0, #200	@ 0xc8
 800209c:	f000 f8aa 	bl	80021f4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80020a0:	4918      	ldr	r1, [pc, #96]	@ (8002104 <LCD_init+0x84>)
 80020a2:	4819      	ldr	r0, [pc, #100]	@ (8002108 <LCD_init+0x88>)
 80020a4:	f003 f9f6 	bl	8005494 <UG_Init>
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
#endif
  UG_FontSetHSpace(0);
 80020a8:	2000      	movs	r0, #0
 80020aa:	f003 fccf 	bl	8005a4c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f003 fce0 	bl	8005a74 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80020b4:	2300      	movs	r3, #0
 80020b6:	80fb      	strh	r3, [r7, #6]
 80020b8:	e013      	b.n	80020e2 <LCD_init+0x62>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	3301      	adds	r3, #1
 80020be:	4a13      	ldr	r2, [pc, #76]	@ (800210c <LCD_init+0x8c>)
 80020c0:	441a      	add	r2, r3
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	4911      	ldr	r1, [pc, #68]	@ (800210c <LCD_init+0x8c>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f7ff fe70 	bl	8001db0 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	4a0e      	ldr	r2, [pc, #56]	@ (800210c <LCD_init+0x8c>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	461a      	mov	r2, r3
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	4413      	add	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3302      	adds	r3, #2
 80020e0:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	2b4b      	cmp	r3, #75	@ 0x4b
 80020e6:	d9e8      	bls.n	80020ba <LCD_init+0x3a>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80020e8:	2000      	movs	r0, #0
 80020ea:	f003 fa7d 	bl	80055e8 <UG_FillScreen>
  LCD_setPower(ENABLE);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff ff94 	bl	800201c <LCD_setPower>
  UG_Update();
 80020f4:	f004 fd2c 	bl	8006b50 <UG_Update>
}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40020400 	.word	0x40020400
 8002104:	2000001c 	.word	0x2000001c
 8002108:	2001c458 	.word	0x2001c458
 800210c:	08033984 	.word	0x08033984

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f973 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	200f      	movs	r0, #15
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7fe ffd0 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f999 	bl	80024aa <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f953 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	2000002c 	.word	0x2000002c
 80021b0:	20000028 	.word	0x20000028

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	2000002c 	.word	0x2000002c
 80021d8:	2001c4cc 	.word	0x2001c4cc

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	2001c4cc 	.word	0x2001c4cc

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000002c 	.word	0x2000002c

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db12      	blt.n	8002314 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	490a      	ldr	r1, [pc, #40]	@ (8002320 <__NVIC_DisableIRQ+0x44>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	3320      	adds	r3, #32
 8002304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002308:	f3bf 8f4f 	dsb	sy
}
 800230c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800230e:	f3bf 8f6f 	isb	sy
}
 8002312:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100

08002324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	6039      	str	r1, [r7, #0]
 800232e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002334:	2b00      	cmp	r3, #0
 8002336:	db0a      	blt.n	800234e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	490c      	ldr	r1, [pc, #48]	@ (8002370 <__NVIC_SetPriority+0x4c>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	0112      	lsls	r2, r2, #4
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	440b      	add	r3, r1
 8002348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800234c:	e00a      	b.n	8002364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4908      	ldr	r1, [pc, #32]	@ (8002374 <__NVIC_SetPriority+0x50>)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3b04      	subs	r3, #4
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	440b      	add	r3, r1
 8002362:	761a      	strb	r2, [r3, #24]
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000e100 	.word	0xe000e100
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f1c3 0307 	rsb	r3, r3, #7
 8002392:	2b04      	cmp	r3, #4
 8002394:	bf28      	it	cs
 8002396:	2304      	movcs	r3, #4
 8002398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3304      	adds	r3, #4
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <NVIC_EncodePriority+0x30>
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3b03      	subs	r3, #3
 80023a6:	e000      	b.n	80023aa <NVIC_EncodePriority+0x32>
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43da      	mvns	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c0:	f04f 31ff 	mov.w	r1, #4294967295
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	4313      	orrs	r3, r2
         );
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff8e 	bl	8002324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff05 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff1a 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff8e 	bl	8002378 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5d 	bl	8002324 <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff0d 	bl	80022a0 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff1d 	bl	80022dc <__NVIC_DisableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ff94 	bl	80023e0 <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff fe84 	bl	80021dc <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e099      	b.n	8002614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002500:	e00f      	b.n	8002522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002502:	f7ff fe6b 	bl	80021dc <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b05      	cmp	r3, #5
 800250e:	d908      	bls.n	8002522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2203      	movs	r2, #3
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e078      	b.n	8002614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1e8      	bne.n	8002502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4b38      	ldr	r3, [pc, #224]	@ (800261c <HAL_DMA_Init+0x158>)
 800253c:	4013      	ands	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800254e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4313      	orrs	r3, r2
 8002572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	2b04      	cmp	r3, #4
 800257a:	d107      	bne.n	800258c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	4313      	orrs	r3, r2
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f023 0307 	bic.w	r3, r3, #7
 80025a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d117      	bne.n	80025e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00e      	beq.n	80025e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fb0f 	bl	8002bec <DMA_CheckFifoParam>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025e2:	2301      	movs	r3, #1
 80025e4:	e016      	b.n	8002614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fac6 	bl	8002b80 <DMA_CalcBaseAndBitshift>
 80025f4:	4603      	mov	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	223f      	movs	r2, #63	@ 0x3f
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	f010803f 	.word	0xf010803f

08002620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_DMA_Start_IT+0x26>
 8002642:	2302      	movs	r3, #2
 8002644:	e040      	b.n	80026c8 <HAL_DMA_Start_IT+0xa8>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d12f      	bne.n	80026ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2202      	movs	r2, #2
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa58 	bl	8002b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	223f      	movs	r2, #63	@ 0x3f
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0216 	orr.w	r2, r2, #22
 800268e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0208 	orr.w	r2, r2, #8
 80026a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e005      	b.n	80026c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
 80026c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026de:	f7ff fd7d 	bl	80021dc <HAL_GetTick>
 80026e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d008      	beq.n	8002702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e052      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0216 	bic.w	r2, r2, #22
 8002710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_DMA_Abort+0x62>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0208 	bic.w	r2, r2, #8
 8002740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002752:	e013      	b.n	800277c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002754:	f7ff fd42 	bl	80021dc <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d90c      	bls.n	800277c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2203      	movs	r2, #3
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e015      	b.n	80027a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e4      	bne.n	8002754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d004      	beq.n	80027ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00c      	b.n	80027e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2205      	movs	r2, #5
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002800:	4b8e      	ldr	r3, [pc, #568]	@ (8002a3c <HAL_DMA_IRQHandler+0x248>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a8e      	ldr	r2, [pc, #568]	@ (8002a40 <HAL_DMA_IRQHandler+0x24c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	2208      	movs	r2, #8
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0204 	bic.w	r2, r2, #4
 8002846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2208      	movs	r2, #8
 800284e:	409a      	lsls	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2201      	movs	r2, #1
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00b      	beq.n	8002896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288e:	f043 0202 	orr.w	r2, r3, #2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	2204      	movs	r2, #4
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b8:	2204      	movs	r2, #4
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	2210      	movs	r2, #16
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d043      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d03c      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	2210      	movs	r2, #16
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d018      	beq.n	8002936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d024      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
 8002922:	e01f      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01b      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
 8002934:	e016      	b.n	8002964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0208 	bic.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	2220      	movs	r2, #32
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 808f 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8087 	beq.w	8002a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2220      	movs	r2, #32
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d136      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0216 	bic.w	r2, r2, #22
 80029ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695a      	ldr	r2, [r3, #20]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_DMA_IRQHandler+0x1da>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d007      	beq.n	80029de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0208 	bic.w	r2, r2, #8
 80029dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	223f      	movs	r2, #63	@ 0x3f
 80029e4:	409a      	lsls	r2, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d07e      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
        }
        return;
 8002a0a:	e079      	b.n	8002b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d031      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
 8002a38:	e02c      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d023      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
 8002a54:	e01e      	b.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10f      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0210 	bic.w	r2, r2, #16
 8002a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d032      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d022      	beq.n	8002aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2205      	movs	r2, #5
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d307      	bcc.n	8002adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f2      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x2cc>
 8002ada:	e000      	b.n	8002ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e000      	b.n	8002b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b00:	bf00      	nop
    }
  }
}
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b16:	b2db      	uxtb	r3, r3
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b40      	cmp	r3, #64	@ 0x40
 8002b50:	d108      	bne.n	8002b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b62:	e007      	b.n	8002b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	3b10      	subs	r3, #16
 8002b90:	4a14      	ldr	r2, [pc, #80]	@ (8002be4 <DMA_CalcBaseAndBitshift+0x64>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b9a:	4a13      	ldr	r2, [pc, #76]	@ (8002be8 <DMA_CalcBaseAndBitshift+0x68>)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d909      	bls.n	8002bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc0:	e007      	b.n	8002bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	aaaaaaab 	.word	0xaaaaaaab
 8002be8:	080339d0 	.word	0x080339d0

08002bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11f      	bne.n	8002c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d856      	bhi.n	8002cba <DMA_CheckFifoParam+0xce>
 8002c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <DMA_CheckFifoParam+0x28>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c37 	.word	0x08002c37
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002cbb 	.word	0x08002cbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d046      	beq.n	8002cbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e043      	b.n	8002cbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c3e:	d140      	bne.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e03d      	b.n	8002cc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c4e:	d121      	bne.n	8002c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d837      	bhi.n	8002cc6 <DMA_CheckFifoParam+0xda>
 8002c56:	a201      	add	r2, pc, #4	@ (adr r2, 8002c5c <DMA_CheckFifoParam+0x70>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c6d 	.word	0x08002c6d
 8002c60:	08002c73 	.word	0x08002c73
 8002c64:	08002c6d 	.word	0x08002c6d
 8002c68:	08002c85 	.word	0x08002c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e030      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d025      	beq.n	8002cca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c82:	e022      	b.n	8002cca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c8c:	d11f      	bne.n	8002cce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c92:	e01c      	b.n	8002cce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d903      	bls.n	8002ca2 <DMA_CheckFifoParam+0xb6>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d003      	beq.n	8002ca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ca0:	e018      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca6:	e015      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00e      	beq.n	8002cd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb8:	e00b      	b.n	8002cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e00a      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e008      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e006      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <DMA_CheckFifoParam+0xe8>
      break;
 8002cd2:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e159      	b.n	8002fb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d00:	2201      	movs	r2, #1
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	f040 8148 	bne.w	8002fae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d130      	bne.n	8002d98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	2203      	movs	r2, #3
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43db      	mvns	r3, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0201 	and.w	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d017      	beq.n	8002dd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d123      	bne.n	8002e28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	08da      	lsrs	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3208      	adds	r2, #8
 8002e22:	69b9      	ldr	r1, [r7, #24]
 8002e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0203 	and.w	r2, r3, #3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a2 	beq.w	8002fae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b57      	ldr	r3, [pc, #348]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	4a56      	ldr	r2, [pc, #344]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e7a:	4b54      	ldr	r3, [pc, #336]	@ (8002fcc <HAL_GPIO_Init+0x2e8>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <HAL_GPIO_Init+0x2f0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x202>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	@ (8002fd8 <HAL_GPIO_Init+0x2f4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x1fe>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a47      	ldr	r2, [pc, #284]	@ (8002fdc <HAL_GPIO_Init+0x2f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x1fa>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <HAL_GPIO_Init+0x2fc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x1f6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <HAL_GPIO_Init+0x300>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x1f2>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e008      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e004      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e002      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <HAL_GPIO_Init+0x204>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f002 0203 	and.w	r2, r2, #3
 8002eee:	0092      	lsls	r2, r2, #2
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef8:	4935      	ldr	r1, [pc, #212]	@ (8002fd0 <HAL_GPIO_Init+0x2ec>)
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f2a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f30:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f54:	4a24      	ldr	r2, [pc, #144]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f84:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <HAL_GPIO_Init+0x304>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b0f      	cmp	r3, #15
 8002fb8:	f67f aea2 	bls.w	8002d00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3724      	adds	r7, #36	@ 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40013c00 	.word	0x40013c00

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003036:	4a05      	ldr	r2, [pc, #20]	@ (800304c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd ffee 	bl	8001020 <HAL_GPIO_EXTI_Callback>
  }
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40013c00 	.word	0x40013c00

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e267      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b85      	ldr	r3, [pc, #532]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b82      	ldr	r3, [pc, #520]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b7e      	ldr	r3, [pc, #504]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e242      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b76      	ldr	r3, [pc, #472]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6d      	ldr	r3, [pc, #436]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6c      	ldr	r2, [pc, #432]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a68      	ldr	r2, [pc, #416]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b66      	ldr	r3, [pc, #408]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f868 	bl	80021dc <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7ff f864 	bl	80021dc <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e207      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7ff f854 	bl	80021dc <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7ff f850 	bl	80021dc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f3      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b51      	ldr	r3, [pc, #324]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b4a      	ldr	r3, [pc, #296]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c7      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x244>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7ff f809 	bl	80021dc <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7ff f805 	bl	80021dc <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a8      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <HAL_RCC_OscConfig+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe ffe8 	bl	80021dc <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe ffe4 	bl	80021dc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e187      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	@ (8003298 <HAL_RCC_OscConfig+0x248>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe ffc8 	bl	80021dc <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe ffc4 	bl	80021dc <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e167      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_OscConfig+0x240>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <HAL_RCC_OscConfig+0x248>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe ffb1 	bl	80021dc <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe ffad 	bl	80021dc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e150      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b88      	ldr	r3, [pc, #544]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7d      	ldr	r3, [pc, #500]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	4a7c      	ldr	r2, [pc, #496]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d6:	4b7a      	ldr	r3, [pc, #488]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b77      	ldr	r3, [pc, #476]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b74      	ldr	r3, [pc, #464]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe ff6d 	bl	80021dc <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe ff69 	bl	80021dc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e10c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <HAL_RCC_OscConfig+0x474>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x2ea>
 800332c:	4b64      	ldr	r3, [pc, #400]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003330:	4a63      	ldr	r2, [pc, #396]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	@ 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x30c>
 8003342:	4b5f      	ldr	r3, [pc, #380]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003346:	4a5e      	ldr	r2, [pc, #376]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	@ 0x70
 800334e:	4b5c      	ldr	r3, [pc, #368]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003352:	4a5b      	ldr	r2, [pc, #364]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800335c:	4b58      	ldr	r3, [pc, #352]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003360:	4a57      	ldr	r2, [pc, #348]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	@ 0x70
 8003368:	4b55      	ldr	r3, [pc, #340]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a54      	ldr	r2, [pc, #336]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe ff2e 	bl	80021dc <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe ff2a 	bl	80021dc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b49      	ldr	r3, [pc, #292]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x334>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe ff18 	bl	80021dc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe ff14 	bl	80021dc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0b5      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	4a38      	ldr	r2, [pc, #224]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a1 	beq.w	8003530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b34      	ldr	r3, [pc, #208]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d05c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d141      	bne.n	8003486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fee8 	bl	80021dc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fee4 	bl	80021dc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e087      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	491b      	ldr	r1, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe febd 	bl	80021dc <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe feb9 	bl	80021dc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x416>
 8003484:	e054      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fea6 	bl	80021dc <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fea2 	bl	80021dc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e045      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x444>
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e038      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d028      	beq.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fdd4 	bl	80021dc <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fdd0 	bl	80021dc <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	@ (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fd34 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08033918 	.word	0x08033918
 8003704:	20000000 	.word	0x20000000
 8003708:	20000028 	.word	0x20000028

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b090      	sub	sp, #64	@ 0x40
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800371c:	2300      	movs	r3, #0
 800371e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80a1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x16c>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e09b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b53      	ldr	r3, [pc, #332]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x184>)
 8003742:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003744:	e09b      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b53      	ldr	r3, [pc, #332]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003748:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800374a:	e098      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b4f      	ldr	r3, [pc, #316]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b4d      	ldr	r3, [pc, #308]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	627a      	str	r2, [r7, #36]	@ 0x24
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003774:	2100      	movs	r1, #0
 8003776:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003778:	fb03 f201 	mul.w	r2, r3, r1
 800377c:	2300      	movs	r3, #0
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	4413      	add	r3, r2
 8003784:	4a43      	ldr	r2, [pc, #268]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003786:	fba0 1202 	umull	r1, r2, r0, r2
 800378a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800378c:	460a      	mov	r2, r1
 800378e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003792:	4413      	add	r3, r2
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003798:	2200      	movs	r2, #0
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037a6:	f7fc fd6b 	bl	8000280 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4613      	mov	r3, r2
 80037b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037b2:	e053      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b4:	4b35      	ldr	r3, [pc, #212]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	2200      	movs	r2, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	617a      	str	r2, [r7, #20]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037c6:	f04f 0b00 	mov.w	fp, #0
 80037ca:	4652      	mov	r2, sl
 80037cc:	465b      	mov	r3, fp
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	ebb2 080a 	subs.w	r8, r2, sl
 80037e6:	eb63 090b 	sbc.w	r9, r3, fp
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003802:	eb63 0509 	sbc.w	r5, r3, r9
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	00eb      	lsls	r3, r5, #3
 8003810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003814:	00e2      	lsls	r2, r4, #3
 8003816:	4614      	mov	r4, r2
 8003818:	461d      	mov	r5, r3
 800381a:	eb14 030a 	adds.w	r3, r4, sl
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	eb45 030b 	adc.w	r3, r5, fp
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003846:	2200      	movs	r2, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	60fa      	str	r2, [r7, #12]
 800384c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003850:	f7fc fd16 	bl	8000280 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800386c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x184>)
 800387a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003880:	4618      	mov	r0, r3
 8003882:	3740      	adds	r7, #64	@ 0x40
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	017d7840 	.word	0x017d7840

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08033928 	.word	0x08033928

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08033928 	.word	0x08033928

08003900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07b      	b.n	8003a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003922:	d009      	beq.n	8003938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
 800392a:	e005      	b.n	8003938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fbf0 	bl	8001138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800396e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	ea42 0103 	orr.w	r1, r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0104 	and.w	r1, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	f003 0210 	and.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_SPI_Transmit+0x22>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e12d      	b.n	8003c90 <HAL_SPI_Transmit+0x27e>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a3c:	f7fe fbce 	bl	80021dc <HAL_GetTick>
 8003a40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
 8003a54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a56:	e116      	b.n	8003c86 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_SPI_Transmit+0x52>
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a68:	e10d      	b.n	8003c86 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d007      	beq.n	8003af0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003af8:	d14f      	bne.n	8003b9a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Transmit+0xf6>
 8003b02:	8afb      	ldrh	r3, [r7, #22]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d142      	bne.n	8003b8e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b18:	1c9a      	adds	r2, r3, #2
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b2c:	e02f      	b.n	8003b8e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d112      	bne.n	8003b62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4c:	1c9a      	adds	r2, r3, #2
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b60:	e015      	b.n	8003b8e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b62:	f7fe fb3b 	bl	80021dc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d803      	bhi.n	8003b7a <HAL_SPI_Transmit+0x168>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d102      	bne.n	8003b80 <HAL_SPI_Transmit+0x16e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003b8c:	e07b      	b.n	8003c86 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1ca      	bne.n	8003b2e <HAL_SPI_Transmit+0x11c>
 8003b98:	e050      	b.n	8003c3c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Transmit+0x196>
 8003ba2:	8afb      	ldrh	r3, [r7, #22]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d144      	bne.n	8003c32 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	330c      	adds	r3, #12
 8003bb2:	7812      	ldrb	r2, [r2, #0]
 8003bb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bce:	e030      	b.n	8003c32 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d113      	bne.n	8003c06 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c04:	e015      	b.n	8003c32 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c06:	f7fe fae9 	bl	80021dc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d803      	bhi.n	8003c1e <HAL_SPI_Transmit+0x20c>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d102      	bne.n	8003c24 <HAL_SPI_Transmit+0x212>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003c30:	e029      	b.n	8003c86 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1c9      	bne.n	8003bd0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fa03 	bl	800404c <SPI_EndRxTxTransaction>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10a      	bne.n	8003c70 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	77fb      	strb	r3, [r7, #31]
 8003c7c:	e003      	b.n	8003c86 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_SPI_Transmit_DMA+0x20>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e097      	b.n	8003de8 <HAL_SPI_Transmit_DMA+0x150>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cd0:	e085      	b.n	8003dde <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <HAL_SPI_Transmit_DMA+0x46>
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ce2:	e07c      	b.n	8003dde <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	88fa      	ldrh	r2, [r7, #6]
 8003d02:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d2a:	d10f      	bne.n	8003d4c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d50:	4a27      	ldr	r2, [pc, #156]	@ (8003df0 <HAL_SPI_Transmit_DMA+0x158>)
 8003d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d58:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_SPI_Transmit_DMA+0x15c>)
 8003d5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d60:	4a25      	ldr	r2, [pc, #148]	@ (8003df8 <HAL_SPI_Transmit_DMA+0x160>)
 8003d62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d68:	2200      	movs	r2, #0
 8003d6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d74:	4619      	mov	r1, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d84:	f7fe fc4c 	bl	8002620 <HAL_DMA_Start_IT>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003d9e:	e01e      	b.n	8003dde <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d007      	beq.n	8003dbe <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0220 	orr.w	r2, r2, #32
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0202 	orr.w	r2, r2, #2
 8003ddc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08003ee1 	.word	0x08003ee1
 8003df4:	08003e39 	.word	0x08003e39
 8003df8:	08003efd 	.word	0x08003efd

08003dfc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e46:	f7fe f9c9 	bl	80021dc <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e5a:	d03b      	beq.n	8003ed4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0220 	bic.w	r2, r2, #32
 8003e6a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0202 	bic.w	r2, r2, #2
 8003e7a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	2164      	movs	r1, #100	@ 0x64
 8003e80:	6978      	ldr	r0, [r7, #20]
 8003e82:	f000 f8e3 	bl	800404c <SPI_EndRxTxTransaction>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10a      	bne.n	8003eb6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ecc:	6978      	ldr	r0, [r7, #20]
 8003ece:	f7ff ffa9 	bl	8003e24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ed2:	e002      	b.n	8003eda <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003ed4:	6978      	ldr	r0, [r7, #20]
 8003ed6:	f7ff ff91 	bl	8003dfc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7ff ff8e 	bl	8003e10 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0203 	bic.w	r2, r2, #3
 8003f18:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff ff78 	bl	8003e24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f4c:	f7fe f946 	bl	80021dc <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f5c:	f7fe f93e 	bl	80021dc <HAL_GetTick>
 8003f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	015b      	lsls	r3, r3, #5
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f72:	e054      	b.n	800401e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d050      	beq.n	800401e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f7c:	f7fe f92e 	bl	80021dc <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d902      	bls.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d13d      	bne.n	800400e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003faa:	d111      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb4:	d004      	beq.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fbe:	d107      	bne.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd8:	d10f      	bne.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e017      	b.n	800403e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	3b01      	subs	r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	429a      	cmp	r2, r3
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	429a      	cmp	r2, r3
 800403a:	d19b      	bne.n	8003f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3720      	adds	r7, #32
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000000 	.word	0x20000000

0800404c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2201      	movs	r2, #1
 8004060:	2102      	movs	r1, #2
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff ff6a 	bl	8003f3c <SPI_WaitFlagStateUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e032      	b.n	80040e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800407e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <SPI_EndRxTxTransaction+0xa0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <SPI_EndRxTxTransaction+0xa4>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	0d5b      	lsrs	r3, r3, #21
 800408a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800409c:	d112      	bne.n	80040c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2200      	movs	r2, #0
 80040a6:	2180      	movs	r1, #128	@ 0x80
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff ff47 	bl	8003f3c <SPI_WaitFlagStateUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d016      	beq.n	80040e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f043 0220 	orr.w	r2, r3, #32
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e00f      	b.n	80040e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d0f2      	beq.n	80040c4 <SPI_EndRxTxTransaction+0x78>
 80040de:	e000      	b.n	80040e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80040e0:	bf00      	nop
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000000 	.word	0x20000000
 80040f0:	165e9f81 	.word	0x165e9f81

080040f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e041      	b.n	800418a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fd f886 	bl	800122c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4619      	mov	r1, r3
 8004132:	4610      	mov	r0, r2
 8004134:	f000 f9d8 	bl	80044e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e044      	b.n	8004236 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004244 <HAL_TIM_Base_Start_IT+0xb0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d6:	d013      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <HAL_TIM_Base_Start_IT+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	@ (800424c <HAL_TIM_Base_Start_IT+0xb8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a17      	ldr	r2, [pc, #92]	@ (8004250 <HAL_TIM_Base_Start_IT+0xbc>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x6c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	@ (8004254 <HAL_TIM_Base_Start_IT+0xc0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b06      	cmp	r3, #6
 8004210:	d010      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004222:	e007      	b.n	8004234 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1a      	ldr	r2, [r3, #32]
 8004276:	f241 1311 	movw	r3, #4369	@ 0x1111
 800427a:	4013      	ands	r3, r2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10f      	bne.n	80042a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	f240 4344 	movw	r3, #1092	@ 0x444
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_Base_Stop_IT+0x48>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01b      	beq.n	800431a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f06f 0202 	mvn.w	r2, #2
 80042ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8d2 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8004306:	e005      	b.n	8004314 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8c4 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f8d5 	bl	80044be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01b      	beq.n	8004366 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f06f 0204 	mvn.w	r2, #4
 8004336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f8ac 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 8004352:	e005      	b.n	8004360 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f89e 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8af 	bl	80044be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01b      	beq.n	80043b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0208 	mvn.w	r2, #8
 8004382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2204      	movs	r2, #4
 8004388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f886 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f878 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f889 	bl	80044be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d020      	beq.n	80043fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0210 	mvn.w	r2, #16
 80043ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2208      	movs	r2, #8
 80043d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f860 	bl	80044aa <HAL_TIM_IC_CaptureCallback>
 80043ea:	e005      	b.n	80043f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f852 	bl	8004496 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f863 	bl	80044be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00c      	beq.n	8004422 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d007      	beq.n	8004422 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 0201 	mvn.w	r2, #1
 800441a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc fe1d 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00c      	beq.n	8004446 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800443e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8e7 	bl	8004614 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00c      	beq.n	800446a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d007      	beq.n	800446a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f834 	bl	80044d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f06f 0220 	mvn.w	r2, #32
 8004486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f8b9 	bl	8004600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800448e:	bf00      	nop
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3a      	ldr	r2, [pc, #232]	@ (80045e4 <TIM_Base_SetConfig+0xfc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00f      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004506:	d00b      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a37      	ldr	r2, [pc, #220]	@ (80045e8 <TIM_Base_SetConfig+0x100>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a36      	ldr	r2, [pc, #216]	@ (80045ec <TIM_Base_SetConfig+0x104>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0x38>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a35      	ldr	r2, [pc, #212]	@ (80045f0 <TIM_Base_SetConfig+0x108>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d108      	bne.n	8004532 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2b      	ldr	r2, [pc, #172]	@ (80045e4 <TIM_Base_SetConfig+0xfc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01b      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004540:	d017      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a28      	ldr	r2, [pc, #160]	@ (80045e8 <TIM_Base_SetConfig+0x100>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a27      	ldr	r2, [pc, #156]	@ (80045ec <TIM_Base_SetConfig+0x104>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00f      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a26      	ldr	r2, [pc, #152]	@ (80045f0 <TIM_Base_SetConfig+0x108>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00b      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a25      	ldr	r2, [pc, #148]	@ (80045f4 <TIM_Base_SetConfig+0x10c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a24      	ldr	r2, [pc, #144]	@ (80045f8 <TIM_Base_SetConfig+0x110>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_Base_SetConfig+0x8a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a23      	ldr	r2, [pc, #140]	@ (80045fc <TIM_Base_SetConfig+0x114>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d108      	bne.n	8004584 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0e      	ldr	r2, [pc, #56]	@ (80045e4 <TIM_Base_SetConfig+0xfc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d103      	bne.n	80045b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d105      	bne.n	80045d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	611a      	str	r2, [r3, #16]
  }
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40010000 	.word	0x40010000
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800

08004600 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e042      	b.n	80046c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fe14 	bl	800127c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2224      	movs	r2, #36	@ 0x24
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800466a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 fc85 	bl	8004f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695a      	ldr	r2, [r3, #20]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b0ba      	sub	sp, #232	@ 0xe8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800470e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_UART_IRQHandler+0x66>
 800471a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fb69 	bl	8004dfe <UART_Receive_IT>
      return;
 800472c:	e25b      	b.n	8004be6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800472e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80de 	beq.w	80048f4 <HAL_UART_IRQHandler+0x22c>
 8004738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004748:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80d1 	beq.w	80048f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_UART_IRQHandler+0xae>
 800475e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00b      	beq.n	800479a <HAL_UART_IRQHandler+0xd2>
 8004782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800479a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00b      	beq.n	80047be <HAL_UART_IRQHandler+0xf6>
 80047a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b6:	f043 0204 	orr.w	r2, r3, #4
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <HAL_UART_IRQHandler+0x126>
 80047ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80047d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e6:	f043 0208 	orr.w	r2, r3, #8
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 81f2 	beq.w	8004bdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_UART_IRQHandler+0x14e>
 8004804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 faf4 	bl	8004dfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004820:	2b40      	cmp	r3, #64	@ 0x40
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_UART_IRQHandler+0x17a>
 800483a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04f      	beq.n	80048e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9fc 	bl	8004c40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b40      	cmp	r3, #64	@ 0x40
 8004854:	d141      	bne.n	80048da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800486c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004882:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800488e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800489a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1d9      	bne.n	8004856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d013      	beq.n	80048d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	4a7e      	ldr	r2, [pc, #504]	@ (8004aa8 <HAL_UART_IRQHandler+0x3e0>)
 80048b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fd ff7a 	bl	80027b0 <HAL_DMA_Abort_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d016      	beq.n	80048f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048cc:	4610      	mov	r0, r2
 80048ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e00e      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f99e 	bl	8004c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	e00a      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f99a 	bl	8004c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	e006      	b.n	80048f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f996 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80048ee:	e175      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048f0:	bf00      	nop
    return;
 80048f2:	e173      	b.n	8004bdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 814f 	bne.w	8004b9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8148 	beq.w	8004b9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8141 	beq.w	8004b9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493a:	2b40      	cmp	r3, #64	@ 0x40
 800493c:	f040 80b6 	bne.w	8004aac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800494c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8145 	beq.w	8004be0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800495e:	429a      	cmp	r2, r3
 8004960:	f080 813e 	bcs.w	8004be0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800496a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004976:	f000 8088 	beq.w	8004a8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	330c      	adds	r3, #12
 8004980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004998:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e1      	bne.n	80049c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e3      	bne.n	8004a02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	330c      	adds	r3, #12
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e3      	bne.n	8004a48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd fe23 	bl	80026d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f8c1 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa6:	e09b      	b.n	8004be0 <HAL_UART_IRQHandler+0x518>
 8004aa8:	08004d07 	.word	0x08004d07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 808e 	beq.w	8004be4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8089 	beq.w	8004be4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004af6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004af8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004afe:	e841 2300 	strex	r3, r2, [r1]
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1e3      	bne.n	8004ad2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	623b      	str	r3, [r7, #32]
   return(result);
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b36:	e841 2300 	strex	r3, r2, [r1]
 8004b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1e3      	bne.n	8004b0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0310 	bic.w	r3, r3, #16
 8004b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b74:	61fa      	str	r2, [r7, #28]
 8004b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	69b9      	ldr	r1, [r7, #24]
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	e841 2300 	strex	r3, r2, [r1]
 8004b80:	617b      	str	r3, [r7, #20]
   return(result);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e3      	bne.n	8004b50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f847 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b9a:	e023      	b.n	8004be4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <HAL_UART_IRQHandler+0x4f4>
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8ba 	bl	8004d2e <UART_Transmit_IT>
    return;
 8004bba:	e014      	b.n	8004be6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <HAL_UART_IRQHandler+0x51e>
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8fa 	bl	8004dce <UART_EndTransmit_IT>
    return;
 8004bda:	e004      	b.n	8004be6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004bdc:	bf00      	nop
 8004bde:	e002      	b.n	8004be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004be0:	bf00      	nop
 8004be2:	e000      	b.n	8004be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004be4:	bf00      	nop
  }
}
 8004be6:	37e8      	adds	r7, #232	@ 0xe8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b095      	sub	sp, #84	@ 0x54
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	330c      	adds	r3, #12
 8004c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c68:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1e5      	bne.n	8004c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d119      	bne.n	8004cec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	330c      	adds	r3, #12
 8004cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	e853 3f00 	ldrex	r3, [r3]
 8004cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 0310 	bic.w	r3, r3, #16
 8004cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cd8:	61ba      	str	r2, [r7, #24]
 8004cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	6979      	ldr	r1, [r7, #20]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e5      	bne.n	8004cb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cfa:	bf00      	nop
 8004cfc:	3754      	adds	r7, #84	@ 0x54
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ff77 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b21      	cmp	r3, #33	@ 0x21
 8004d40:	d13e      	bne.n	8004dc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d4a:	d114      	bne.n	8004d76 <UART_Transmit_IT+0x48>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d110      	bne.n	8004d76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	1c9a      	adds	r2, r3, #2
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	621a      	str	r2, [r3, #32]
 8004d74:	e008      	b.n	8004d88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	1c59      	adds	r1, r3, #1
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	6211      	str	r1, [r2, #32]
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4619      	mov	r1, r3
 8004d96:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10f      	bne.n	8004dbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004daa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68da      	ldr	r2, [r3, #12]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff fefc 	bl	8004bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08c      	sub	sp, #48	@ 0x30
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b22      	cmp	r3, #34	@ 0x22
 8004e10:	f040 80ae 	bne.w	8004f70 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e1c:	d117      	bne.n	8004e4e <UART_Receive_IT+0x50>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d113      	bne.n	8004e4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	1c9a      	adds	r2, r3, #2
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e4c:	e026      	b.n	8004e9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e60:	d007      	beq.n	8004e72 <UART_Receive_IT+0x74>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <UART_Receive_IT+0x82>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e008      	b.n	8004e92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d15d      	bne.n	8004f6c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0220 	bic.w	r2, r2, #32
 8004ebe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695a      	ldr	r2, [r3, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d135      	bne.n	8004f62 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 0310 	bic.w	r3, r3, #16
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1c:	623a      	str	r2, [r7, #32]
 8004f1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	6a3a      	ldr	r2, [r7, #32]
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b10      	cmp	r3, #16
 8004f3c:	d10a      	bne.n	8004f54 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fe64 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
 8004f60:	e002      	b.n	8004f68 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fe4c 	bl	8004c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e002      	b.n	8004f72 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e000      	b.n	8004f72 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
  }
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3730      	adds	r7, #48	@ 0x30
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f80:	b0c0      	sub	sp, #256	@ 0x100
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f98:	68d9      	ldr	r1, [r3, #12]
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	ea40 0301 	orr.w	r3, r0, r1
 8004fa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fd4:	f021 010c 	bic.w	r1, r1, #12
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff6:	6999      	ldr	r1, [r3, #24]
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	ea40 0301 	orr.w	r3, r0, r1
 8005002:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b8f      	ldr	r3, [pc, #572]	@ (8005248 <UART_SetConfig+0x2cc>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d005      	beq.n	800501c <UART_SetConfig+0xa0>
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b8d      	ldr	r3, [pc, #564]	@ (800524c <UART_SetConfig+0x2d0>)
 8005018:	429a      	cmp	r2, r3
 800501a:	d104      	bne.n	8005026 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7fe fc5c 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 8005020:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005024:	e003      	b.n	800502e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005026:	f7fe fc43 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 800502a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005038:	f040 810c 	bne.w	8005254 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800503c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005040:	2200      	movs	r2, #0
 8005042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005046:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800504a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800504e:	4622      	mov	r2, r4
 8005050:	462b      	mov	r3, r5
 8005052:	1891      	adds	r1, r2, r2
 8005054:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005056:	415b      	adcs	r3, r3
 8005058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800505a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800505e:	4621      	mov	r1, r4
 8005060:	eb12 0801 	adds.w	r8, r2, r1
 8005064:	4629      	mov	r1, r5
 8005066:	eb43 0901 	adc.w	r9, r3, r1
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	f04f 0300 	mov.w	r3, #0
 8005072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800507a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800507e:	4690      	mov	r8, r2
 8005080:	4699      	mov	r9, r3
 8005082:	4623      	mov	r3, r4
 8005084:	eb18 0303 	adds.w	r3, r8, r3
 8005088:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800508c:	462b      	mov	r3, r5
 800508e:	eb49 0303 	adc.w	r3, r9, r3
 8005092:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050aa:	460b      	mov	r3, r1
 80050ac:	18db      	adds	r3, r3, r3
 80050ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b0:	4613      	mov	r3, r2
 80050b2:	eb42 0303 	adc.w	r3, r2, r3
 80050b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80050b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050c0:	f7fb f8de 	bl	8000280 <__aeabi_uldivmod>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4b61      	ldr	r3, [pc, #388]	@ (8005250 <UART_SetConfig+0x2d4>)
 80050ca:	fba3 2302 	umull	r2, r3, r3, r2
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	011c      	lsls	r4, r3, #4
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050ec:	415b      	adcs	r3, r3
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050f4:	4641      	mov	r1, r8
 80050f6:	eb12 0a01 	adds.w	sl, r2, r1
 80050fa:	4649      	mov	r1, r9
 80050fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800510c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005114:	4692      	mov	sl, r2
 8005116:	469b      	mov	fp, r3
 8005118:	4643      	mov	r3, r8
 800511a:	eb1a 0303 	adds.w	r3, sl, r3
 800511e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005122:	464b      	mov	r3, r9
 8005124:	eb4b 0303 	adc.w	r3, fp, r3
 8005128:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005138:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800513c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005140:	460b      	mov	r3, r1
 8005142:	18db      	adds	r3, r3, r3
 8005144:	643b      	str	r3, [r7, #64]	@ 0x40
 8005146:	4613      	mov	r3, r2
 8005148:	eb42 0303 	adc.w	r3, r2, r3
 800514c:	647b      	str	r3, [r7, #68]	@ 0x44
 800514e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005152:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005156:	f7fb f893 	bl	8000280 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4611      	mov	r1, r2
 8005160:	4b3b      	ldr	r3, [pc, #236]	@ (8005250 <UART_SetConfig+0x2d4>)
 8005162:	fba3 2301 	umull	r2, r3, r3, r1
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2264      	movs	r2, #100	@ 0x64
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	1acb      	subs	r3, r1, r3
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005176:	4b36      	ldr	r3, [pc, #216]	@ (8005250 <UART_SetConfig+0x2d4>)
 8005178:	fba3 2302 	umull	r2, r3, r3, r2
 800517c:	095b      	lsrs	r3, r3, #5
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005184:	441c      	add	r4, r3
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518a:	2200      	movs	r2, #0
 800518c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005190:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005194:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	1891      	adds	r1, r2, r2
 800519e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051a0:	415b      	adcs	r3, r3
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051a8:	4641      	mov	r1, r8
 80051aa:	1851      	adds	r1, r2, r1
 80051ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80051ae:	4649      	mov	r1, r9
 80051b0:	414b      	adcs	r3, r1
 80051b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051c0:	4659      	mov	r1, fp
 80051c2:	00cb      	lsls	r3, r1, #3
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ca:	4651      	mov	r1, sl
 80051cc:	00ca      	lsls	r2, r1, #3
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	4642      	mov	r2, r8
 80051d6:	189b      	adds	r3, r3, r2
 80051d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051dc:	464b      	mov	r3, r9
 80051de:	460a      	mov	r2, r1
 80051e0:	eb42 0303 	adc.w	r3, r2, r3
 80051e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051fc:	460b      	mov	r3, r1
 80051fe:	18db      	adds	r3, r3, r3
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005202:	4613      	mov	r3, r2
 8005204:	eb42 0303 	adc.w	r3, r2, r3
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800520e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005212:	f7fb f835 	bl	8000280 <__aeabi_uldivmod>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <UART_SetConfig+0x2d4>)
 800521c:	fba3 1302 	umull	r1, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	2164      	movs	r1, #100	@ 0x64
 8005224:	fb01 f303 	mul.w	r3, r1, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	3332      	adds	r3, #50	@ 0x32
 800522e:	4a08      	ldr	r2, [pc, #32]	@ (8005250 <UART_SetConfig+0x2d4>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	f003 0207 	and.w	r2, r3, #7
 800523a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4422      	add	r2, r4
 8005242:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005244:	e106      	b.n	8005454 <UART_SetConfig+0x4d8>
 8005246:	bf00      	nop
 8005248:	40011000 	.word	0x40011000
 800524c:	40011400 	.word	0x40011400
 8005250:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800525e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005262:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005266:	4642      	mov	r2, r8
 8005268:	464b      	mov	r3, r9
 800526a:	1891      	adds	r1, r2, r2
 800526c:	6239      	str	r1, [r7, #32]
 800526e:	415b      	adcs	r3, r3
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
 8005272:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005276:	4641      	mov	r1, r8
 8005278:	1854      	adds	r4, r2, r1
 800527a:	4649      	mov	r1, r9
 800527c:	eb43 0501 	adc.w	r5, r3, r1
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	00eb      	lsls	r3, r5, #3
 800528a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528e:	00e2      	lsls	r2, r4, #3
 8005290:	4614      	mov	r4, r2
 8005292:	461d      	mov	r5, r3
 8005294:	4643      	mov	r3, r8
 8005296:	18e3      	adds	r3, r4, r3
 8005298:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800529c:	464b      	mov	r3, r9
 800529e:	eb45 0303 	adc.w	r3, r5, r3
 80052a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052c2:	4629      	mov	r1, r5
 80052c4:	008b      	lsls	r3, r1, #2
 80052c6:	4621      	mov	r1, r4
 80052c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052cc:	4621      	mov	r1, r4
 80052ce:	008a      	lsls	r2, r1, #2
 80052d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052d4:	f7fa ffd4 	bl	8000280 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4b60      	ldr	r3, [pc, #384]	@ (8005460 <UART_SetConfig+0x4e4>)
 80052de:	fba3 2302 	umull	r2, r3, r3, r2
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	011c      	lsls	r4, r3, #4
 80052e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	61b9      	str	r1, [r7, #24]
 8005300:	415b      	adcs	r3, r3
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005308:	4641      	mov	r1, r8
 800530a:	1851      	adds	r1, r2, r1
 800530c:	6139      	str	r1, [r7, #16]
 800530e:	4649      	mov	r1, r9
 8005310:	414b      	adcs	r3, r1
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005320:	4659      	mov	r1, fp
 8005322:	00cb      	lsls	r3, r1, #3
 8005324:	4651      	mov	r1, sl
 8005326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532a:	4651      	mov	r1, sl
 800532c:	00ca      	lsls	r2, r1, #3
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	4603      	mov	r3, r0
 8005334:	4642      	mov	r2, r8
 8005336:	189b      	adds	r3, r3, r2
 8005338:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800533c:	464b      	mov	r3, r9
 800533e:	460a      	mov	r2, r1
 8005340:	eb42 0303 	adc.w	r3, r2, r3
 8005344:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005352:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005360:	4649      	mov	r1, r9
 8005362:	008b      	lsls	r3, r1, #2
 8005364:	4641      	mov	r1, r8
 8005366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800536a:	4641      	mov	r1, r8
 800536c:	008a      	lsls	r2, r1, #2
 800536e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005372:	f7fa ff85 	bl	8000280 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4611      	mov	r1, r2
 800537c:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <UART_SetConfig+0x4e4>)
 800537e:	fba3 2301 	umull	r2, r3, r3, r1
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	2264      	movs	r2, #100	@ 0x64
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	1acb      	subs	r3, r1, r3
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	3332      	adds	r3, #50	@ 0x32
 8005390:	4a33      	ldr	r2, [pc, #204]	@ (8005460 <UART_SetConfig+0x4e4>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800539c:	441c      	add	r4, r3
 800539e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a2:	2200      	movs	r2, #0
 80053a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80053a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80053a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053ac:	4642      	mov	r2, r8
 80053ae:	464b      	mov	r3, r9
 80053b0:	1891      	adds	r1, r2, r2
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	415b      	adcs	r3, r3
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053bc:	4641      	mov	r1, r8
 80053be:	1851      	adds	r1, r2, r1
 80053c0:	6039      	str	r1, [r7, #0]
 80053c2:	4649      	mov	r1, r9
 80053c4:	414b      	adcs	r3, r1
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	f04f 0200 	mov.w	r2, #0
 80053cc:	f04f 0300 	mov.w	r3, #0
 80053d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053d4:	4659      	mov	r1, fp
 80053d6:	00cb      	lsls	r3, r1, #3
 80053d8:	4651      	mov	r1, sl
 80053da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053de:	4651      	mov	r1, sl
 80053e0:	00ca      	lsls	r2, r1, #3
 80053e2:	4610      	mov	r0, r2
 80053e4:	4619      	mov	r1, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	4642      	mov	r2, r8
 80053ea:	189b      	adds	r3, r3, r2
 80053ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053ee:	464b      	mov	r3, r9
 80053f0:	460a      	mov	r2, r1
 80053f2:	eb42 0303 	adc.w	r3, r2, r3
 80053f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	663b      	str	r3, [r7, #96]	@ 0x60
 8005402:	667a      	str	r2, [r7, #100]	@ 0x64
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005410:	4649      	mov	r1, r9
 8005412:	008b      	lsls	r3, r1, #2
 8005414:	4641      	mov	r1, r8
 8005416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541a:	4641      	mov	r1, r8
 800541c:	008a      	lsls	r2, r1, #2
 800541e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005422:	f7fa ff2d 	bl	8000280 <__aeabi_uldivmod>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4b0d      	ldr	r3, [pc, #52]	@ (8005460 <UART_SetConfig+0x4e4>)
 800542c:	fba3 1302 	umull	r1, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	2164      	movs	r1, #100	@ 0x64
 8005434:	fb01 f303 	mul.w	r3, r1, r3
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	3332      	adds	r3, #50	@ 0x32
 800543e:	4a08      	ldr	r2, [pc, #32]	@ (8005460 <UART_SetConfig+0x4e4>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	095b      	lsrs	r3, r3, #5
 8005446:	f003 020f 	and.w	r2, r3, #15
 800544a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4422      	add	r2, r4
 8005452:	609a      	str	r2, [r3, #8]
}
 8005454:	bf00      	nop
 8005456:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800545a:	46bd      	mov	sp, r7
 800545c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005460:	51eb851f 	.word	0x51eb851f

08005464 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	607a      	str	r2, [r7, #4]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	b21a      	sxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b21b      	sxth	r3, r3
 8005482:	4313      	orrs	r3, r2
 8005484:	b21b      	sxth	r3, r3
 8005486:	b29b      	uxth	r3, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2204      	movs	r2, #4
 80054a8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2204      	movs	r2, #4
 80054ae:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b21a      	sxth	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b21a      	sxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 800555a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005564:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
 8005586:	e010      	b.n	80055aa <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	330a      	adds	r3, #10
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	330a      	adds	r3, #10
 800559c:	00db      	lsls	r3, r3, #3
 800559e:	4413      	add	r3, r2
 80055a0:	2200      	movs	r2, #0
 80055a2:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	3301      	adds	r3, #1
 80055a8:	73fb      	strb	r3, [r7, #15]
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d9eb      	bls.n	8005588 <UG_Init+0xf4>
   }

   gui = g;
 80055b0:	4a04      	ldr	r2, [pc, #16]	@ (80055c4 <UG_Init+0x130>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6013      	str	r3, [r2, #0]
   return 1;
 80055b6:	2301      	movs	r3, #1
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	2001c4d0 	.word	0x2001c4d0

080055c8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80055d0:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <UG_FontSelect+0x1c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	2001c4d0 	.word	0x2001c4d0

080055e8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	4603      	mov	r3, r0
 80055f0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80055f2:	4b0e      	ldr	r3, [pc, #56]	@ (800562c <UG_FillScreen+0x44>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	b21a      	sxth	r2, r3
 8005604:	4b09      	ldr	r3, [pc, #36]	@ (800562c <UG_FillScreen+0x44>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29b      	uxth	r3, r3
 8005614:	b219      	sxth	r1, r3
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	460b      	mov	r3, r1
 800561c:	2100      	movs	r1, #0
 800561e:	2000      	movs	r0, #0
 8005620:	f000 f806 	bl	8005630 <UG_FillFrame>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2001c4d0 	.word	0x2001c4d0

08005630 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005630:	b5b0      	push	{r4, r5, r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af02      	add	r7, sp, #8
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4623      	mov	r3, r4
 8005640:	80fb      	strh	r3, [r7, #6]
 8005642:	4603      	mov	r3, r0
 8005644:	80bb      	strh	r3, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	807b      	strh	r3, [r7, #2]
 800564a:	4613      	mov	r3, r2
 800564c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800564e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005656:	429a      	cmp	r2, r3
 8005658:	da05      	bge.n	8005666 <UG_FillFrame+0x36>
     swap(x1,x2);
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	887b      	ldrh	r3, [r7, #2]
 8005660:	80fb      	strh	r3, [r7, #6]
 8005662:	897b      	ldrh	r3, [r7, #10]
 8005664:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005666:	f9b7 2000 	ldrsh.w	r2, [r7]
 800566a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800566e:	429a      	cmp	r2, r3
 8005670:	da05      	bge.n	800567e <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005672:	88bb      	ldrh	r3, [r7, #4]
 8005674:	813b      	strh	r3, [r7, #8]
 8005676:	883b      	ldrh	r3, [r7, #0]
 8005678:	80bb      	strh	r3, [r7, #4]
 800567a:	893b      	ldrh	r3, [r7, #8]
 800567c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800567e:	4b24      	ldr	r3, [pc, #144]	@ (8005710 <UG_FillFrame+0xe0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800568e:	4b20      	ldr	r3, [pc, #128]	@ (8005710 <UG_FillFrame+0xe0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005694:	461d      	mov	r5, r3
 8005696:	f9b7 4000 	ldrsh.w	r4, [r7]
 800569a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800569e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056a6:	8c3b      	ldrh	r3, [r7, #32]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	4623      	mov	r3, r4
 80056ac:	47a8      	blx	r5
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d028      	beq.n	8005706 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80056b4:	88bb      	ldrh	r3, [r7, #4]
 80056b6:	81bb      	strh	r3, [r7, #12]
 80056b8:	e01e      	b.n	80056f8 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	81fb      	strh	r3, [r7, #14]
 80056be:	e00f      	b.n	80056e0 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80056c0:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <UG_FillFrame+0xe0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	8c3a      	ldrh	r2, [r7, #32]
 80056ca:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80056ce:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80056d2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80056d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	81fb      	strh	r3, [r7, #14]
 80056e0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80056e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	dde9      	ble.n	80056c0 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80056ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3301      	adds	r3, #1
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	81bb      	strh	r3, [r7, #12]
 80056f8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80056fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005700:	429a      	cmp	r2, r3
 8005702:	ddda      	ble.n	80056ba <UG_FillFrame+0x8a>
 8005704:	e000      	b.n	8005708 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005706:	bf00      	nop
      }
   }
}
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bdb0      	pop	{r4, r5, r7, pc}
 800570e:	bf00      	nop
 8005710:	2001c4d0 	.word	0x2001c4d0

08005714 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b08a      	sub	sp, #40	@ 0x28
 8005718:	af02      	add	r7, sp, #8
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	461a      	mov	r2, r3
 8005722:	4623      	mov	r3, r4
 8005724:	80fb      	strh	r3, [r7, #6]
 8005726:	4603      	mov	r3, r0
 8005728:	80bb      	strh	r3, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	807b      	strh	r3, [r7, #2]
 800572e:	4613      	mov	r3, r2
 8005730:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005732:	4b67      	ldr	r3, [pc, #412]	@ (80058d0 <UG_DrawLine+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d013      	beq.n	800576a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005742:	4b63      	ldr	r3, [pc, #396]	@ (80058d0 <UG_DrawLine+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005748:	461d      	mov	r5, r3
 800574a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800574e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005752:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005756:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800575a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4623      	mov	r3, r4
 8005760:	47a8      	blx	r5
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80ae 	beq.w	80058c6 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	b29b      	uxth	r3, r3
 8005772:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005774:	883a      	ldrh	r2, [r7, #0]
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	b29b      	uxth	r3, r3
 800577c:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800577e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfb8      	it	lt
 8005786:	425b      	neglt	r3, r3
 8005788:	b29b      	uxth	r3, r3
 800578a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800578c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfb8      	it	lt
 8005794:	425b      	neglt	r3, r3
 8005796:	b29b      	uxth	r3, r3
 8005798:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800579a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dd01      	ble.n	80057a6 <UG_DrawLine+0x92>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e001      	b.n	80057aa <UG_DrawLine+0x96>
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
 80057aa:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80057ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	dd01      	ble.n	80057b8 <UG_DrawLine+0xa4>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e001      	b.n	80057bc <UG_DrawLine+0xa8>
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80057be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057c2:	105b      	asrs	r3, r3, #1
 80057c4:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80057c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057ca:	105b      	asrs	r3, r3, #1
 80057cc:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 80057d2:	88bb      	ldrh	r3, [r7, #4]
 80057d4:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 80057d6:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <UG_DrawLine+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80057e0:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80057e4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80057e8:	4798      	blx	r3

   if( dxabs >= dyabs )
 80057ea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80057ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	db33      	blt.n	800585e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 80057f6:	2300      	movs	r3, #0
 80057f8:	83fb      	strh	r3, [r7, #30]
 80057fa:	e029      	b.n	8005850 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 80057fc:	8b7a      	ldrh	r2, [r7, #26]
 80057fe:	89fb      	ldrh	r3, [r7, #14]
 8005800:	4413      	add	r3, r2
 8005802:	b29b      	uxth	r3, r3
 8005804:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005806:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800580a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	db09      	blt.n	8005826 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005812:	8b7a      	ldrh	r2, [r7, #26]
 8005814:	8a3b      	ldrh	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	b29b      	uxth	r3, r3
 800581a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800581c:	8afa      	ldrh	r2, [r7, #22]
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	4413      	add	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005826:	8b3a      	ldrh	r2, [r7, #24]
 8005828:	89bb      	ldrh	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <UG_DrawLine+0x1bc>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800583a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800583e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005842:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005844:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005848:	b29b      	uxth	r3, r3
 800584a:	3301      	adds	r3, #1
 800584c:	b29b      	uxth	r3, r3
 800584e:	83fb      	strh	r3, [r7, #30]
 8005850:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005854:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005858:	429a      	cmp	r2, r3
 800585a:	dbcf      	blt.n	80057fc <UG_DrawLine+0xe8>
 800585c:	e034      	b.n	80058c8 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800585e:	2300      	movs	r3, #0
 8005860:	83fb      	strh	r3, [r7, #30]
 8005862:	e029      	b.n	80058b8 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005864:	8bba      	ldrh	r2, [r7, #28]
 8005866:	8a3b      	ldrh	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800586e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005876:	429a      	cmp	r2, r3
 8005878:	db09      	blt.n	800588e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800587a:	8bba      	ldrh	r2, [r7, #28]
 800587c:	89fb      	ldrh	r3, [r7, #14]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	b29b      	uxth	r3, r3
 8005882:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005884:	8b3a      	ldrh	r2, [r7, #24]
 8005886:	89bb      	ldrh	r3, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800588e:	8afa      	ldrh	r2, [r7, #22]
 8005890:	897b      	ldrh	r3, [r7, #10]
 8005892:	4413      	add	r3, r2
 8005894:	b29b      	uxth	r3, r3
 8005896:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005898:	4b0d      	ldr	r3, [pc, #52]	@ (80058d0 <UG_DrawLine+0x1bc>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80058a2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80058a6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80058aa:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80058ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3301      	adds	r3, #1
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	83fb      	strh	r3, [r7, #30]
 80058b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80058bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	dbcf      	blt.n	8005864 <UG_DrawLine+0x150>
 80058c4:	e000      	b.n	80058c8 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80058c6:	bf00      	nop
      }
   }  
}
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bdb0      	pop	{r4, r5, r7, pc}
 80058ce:	bf00      	nop
 80058d0:	2001c4d0 	.word	0x2001c4d0

080058d4 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80058d4:	b590      	push	{r4, r7, lr}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af02      	add	r7, sp, #8
 80058da:	4603      	mov	r3, r0
 80058dc:	603a      	str	r2, [r7, #0]
 80058de:	80fb      	strh	r3, [r7, #6]
 80058e0:	460b      	mov	r3, r1
 80058e2:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80058e8:	88bb      	ldrh	r3, [r7, #4]
 80058ea:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80058ec:	4b44      	ldr	r3, [pc, #272]	@ (8005a00 <UG_PutString+0x12c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fa96 	bl	8005e24 <_UG_FontSelect>
   while ( *str != 0 )
 80058f8:	e064      	b.n	80059c4 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80058fa:	4b41      	ldr	r3, [pc, #260]	@ (8005a00 <UG_PutString+0x12c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8005906:	463b      	mov	r3, r7
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f8c7 	bl	8005a9c <_UG_DecodeUTF8>
 800590e:	4603      	mov	r3, r0
 8005910:	817b      	strh	r3, [r7, #10]
 8005912:	e004      	b.n	800591e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	603a      	str	r2, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800591e:	897b      	ldrh	r3, [r7, #10]
 8005920:	2b0a      	cmp	r3, #10
 8005922:	d105      	bne.n	8005930 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8005924:	4b36      	ldr	r3, [pc, #216]	@ (8005a00 <UG_PutString+0x12c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	81fb      	strh	r3, [r7, #14]
         continue;
 800592e:	e049      	b.n	80059c4 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8005930:	897b      	ldrh	r3, [r7, #10]
 8005932:	2100      	movs	r1, #0
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f929 	bl	8005b8c <_UG_GetCharData>
 800593a:	4603      	mov	r3, r0
 800593c:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800593e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d03c      	beq.n	80059c2 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005948:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <UG_PutString+0x12c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005952:	4619      	mov	r1, r3
 8005954:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005958:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	4299      	cmp	r1, r3
 8005960:	dc11      	bgt.n	8005986 <UG_PutString+0xb2>
      {
         xp = x;
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <UG_PutString+0x12c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800596e:	b21b      	sxth	r3, r3
 8005970:	4a23      	ldr	r2, [pc, #140]	@ (8005a00 <UG_PutString+0x12c>)
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8005978:	4413      	add	r3, r2
 800597a:	b21b      	sxth	r3, r3
 800597c:	b29a      	uxth	r2, r3
 800597e:	89bb      	ldrh	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	b29b      	uxth	r3, r3
 8005984:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8005986:	4b1e      	ldr	r3, [pc, #120]	@ (8005a00 <UG_PutString+0x12c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 800598e:	4b1c      	ldr	r3, [pc, #112]	@ (8005a00 <UG_PutString+0x12c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8005996:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800599a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800599e:	8978      	ldrh	r0, [r7, #10]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	4623      	mov	r3, r4
 80059a4:	f000 fac0 	bl	8005f28 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <UG_PutString+0x12c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	893b      	ldrh	r3, [r7, #8]
 80059b4:	4413      	add	r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	89fb      	ldrh	r3, [r7, #14]
 80059ba:	4413      	add	r3, r2
 80059bc:	b29b      	uxth	r3, r3
 80059be:	81fb      	strh	r3, [r7, #14]
 80059c0:	e000      	b.n	80059c4 <UG_PutString+0xf0>
      if(cw==-1) continue;
 80059c2:	bf00      	nop
   while ( *str != 0 )
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d196      	bne.n	80058fa <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <UG_PutString+0x12c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80059dc:	4b08      	ldr	r3, [pc, #32]	@ (8005a00 <UG_PutString+0x12c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e2:	461c      	mov	r4, r3
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ec:	f04f 31ff 	mov.w	r1, #4294967295
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	47a0      	blx	r4
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	bf00      	nop
 8005a00:	2001c4d0 	.word	0x2001c4d0

08005a04 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8005a0e:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <UG_SetForecolor+0x20>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	2001c4d0 	.word	0x2001c4d0

08005a28 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8005a32:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <UG_SetBackcolor+0x20>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	2001c4d0 	.word	0x2001c4d0

08005a4c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8005a56:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <UG_FontSetHSpace+0x24>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	b252      	sxtb	r2, r2
 8005a5e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	2001c4d0 	.word	0x2001c4d0

08005a74 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8005a7e:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <UG_FontSetVSpace+0x24>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	b252      	sxtb	r2, r2
 8005a86:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	2001c4d0 	.word	0x2001c4d0

08005a9c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

  char c=**str;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8005aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	db07      	blt.n	8005ac4 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	601a      	str	r2, [r3, #0]
    return c;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	e05c      	b.n	8005b7e <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8005acc:	e04f      	b.n	8005b6e <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d130      	bne.n	8005b48 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2bdf      	cmp	r3, #223	@ 0xdf
 8005aea:	d806      	bhi.n	8005afa <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	73fb      	strb	r3, [r7, #15]
 8005af8:	e023      	b.n	8005b42 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2bef      	cmp	r3, #239	@ 0xef
 8005afe:	d806      	bhi.n	8005b0e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8005b00:	2302      	movs	r3, #2
 8005b02:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	73fb      	strb	r3, [r7, #15]
 8005b0c:	e019      	b.n	8005b42 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2bf7      	cmp	r3, #247	@ 0xf7
 8005b12:	d806      	bhi.n	8005b22 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8005b14:	2303      	movs	r3, #3
 8005b16:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e00f      	b.n	8005b42 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2bfb      	cmp	r3, #251	@ 0xfb
 8005b26:	d806      	bhi.n	8005b36 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8005b28:	2304      	movs	r3, #4
 8005b2a:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e005      	b.n	8005b42 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8005b36:	2305      	movs	r3, #5
 8005b38:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	81bb      	strh	r3, [r7, #12]
 8005b46:	e012      	b.n	8005b6e <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8005b48:	89bb      	ldrh	r3, [r7, #12]
 8005b4a:	019b      	lsls	r3, r3, #6
 8005b4c:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	b21b      	sxth	r3, r3
 8005b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b56:	b21a      	sxth	r2, r3
 8005b58:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	73bb      	strb	r3, [r7, #14]
 8005b68:	7bbb      	ldrb	r3, [r7, #14]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <_UG_DecodeUTF8+0xde>
  while(**str)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1aa      	bne.n	8005ace <_UG_DecodeUTF8+0x32>
 8005b78:	e000      	b.n	8005b7c <_UG_DecodeUTF8+0xe0>
        break;
 8005b7a:	bf00      	nop
    }
  }
  return encoding;
 8005b7c:	89bb      	ldrh	r3, [r7, #12]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	4603      	mov	r3, r0
 8005b94:	6039      	str	r1, [r7, #0]
 8005b96:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8005bac:	4b98      	ldr	r3, [pc, #608]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bb2:	4b98      	ldr	r3, [pc, #608]	@ (8005e14 <_UG_GetCharData+0x288>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d10f      	bne.n	8005bda <_UG_GetCharData+0x4e>
 8005bba:	4b97      	ldr	r3, [pc, #604]	@ (8005e18 <_UG_GetCharData+0x28c>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d10a      	bne.n	8005bda <_UG_GetCharData+0x4e>
    if(p){
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8005bca:	4b94      	ldr	r3, [pc, #592]	@ (8005e1c <_UG_GetCharData+0x290>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8005bd2:	4b93      	ldr	r3, [pc, #588]	@ (8005e20 <_UG_GetCharData+0x294>)
 8005bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd8:	e116      	b.n	8005e08 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8005bda:	4b8d      	ldr	r3, [pc, #564]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80cc 	beq.w	8005d80 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	2bfc      	cmp	r3, #252	@ 0xfc
 8005bec:	f300 80c8 	bgt.w	8005d80 <_UG_GetCharData+0x1f4>
 8005bf0:	2bd6      	cmp	r3, #214	@ 0xd6
 8005bf2:	da09      	bge.n	8005c08 <_UG_GetCharData+0x7c>
 8005bf4:	2bc4      	cmp	r3, #196	@ 0xc4
 8005bf6:	d06c      	beq.n	8005cd2 <_UG_GetCharData+0x146>
 8005bf8:	2bc4      	cmp	r3, #196	@ 0xc4
 8005bfa:	f300 80c1 	bgt.w	8005d80 <_UG_GetCharData+0x1f4>
 8005bfe:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c00:	d06d      	beq.n	8005cde <_UG_GetCharData+0x152>
 8005c02:	2bb5      	cmp	r3, #181	@ 0xb5
 8005c04:	d068      	beq.n	8005cd8 <_UG_GetCharData+0x14c>
 8005c06:	e06e      	b.n	8005ce6 <_UG_GetCharData+0x15a>
 8005c08:	3bd6      	subs	r3, #214	@ 0xd6
 8005c0a:	2b26      	cmp	r3, #38	@ 0x26
 8005c0c:	f200 80b8 	bhi.w	8005d80 <_UG_GetCharData+0x1f4>
 8005c10:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <_UG_GetCharData+0x8c>)
 8005c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c16:	bf00      	nop
 8005c18:	08005cbb 	.word	0x08005cbb
 8005c1c:	08005d81 	.word	0x08005d81
 8005c20:	08005d81 	.word	0x08005d81
 8005c24:	08005d81 	.word	0x08005d81
 8005c28:	08005d81 	.word	0x08005d81
 8005c2c:	08005d81 	.word	0x08005d81
 8005c30:	08005cc7 	.word	0x08005cc7
 8005c34:	08005d81 	.word	0x08005d81
 8005c38:	08005d81 	.word	0x08005d81
 8005c3c:	08005d81 	.word	0x08005d81
 8005c40:	08005d81 	.word	0x08005d81
 8005c44:	08005d81 	.word	0x08005d81
 8005c48:	08005d81 	.word	0x08005d81
 8005c4c:	08005d81 	.word	0x08005d81
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005d81 	.word	0x08005d81
 8005c58:	08005d81 	.word	0x08005d81
 8005c5c:	08005d81 	.word	0x08005d81
 8005c60:	08005d81 	.word	0x08005d81
 8005c64:	08005d81 	.word	0x08005d81
 8005c68:	08005d81 	.word	0x08005d81
 8005c6c:	08005d81 	.word	0x08005d81
 8005c70:	08005d81 	.word	0x08005d81
 8005c74:	08005d81 	.word	0x08005d81
 8005c78:	08005d81 	.word	0x08005d81
 8005c7c:	08005d81 	.word	0x08005d81
 8005c80:	08005d81 	.word	0x08005d81
 8005c84:	08005d81 	.word	0x08005d81
 8005c88:	08005d81 	.word	0x08005d81
 8005c8c:	08005d81 	.word	0x08005d81
 8005c90:	08005d81 	.word	0x08005d81
 8005c94:	08005d81 	.word	0x08005d81
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005d81 	.word	0x08005d81
 8005ca0:	08005d81 	.word	0x08005d81
 8005ca4:	08005d81 	.word	0x08005d81
 8005ca8:	08005d81 	.word	0x08005d81
 8005cac:	08005d81 	.word	0x08005d81
 8005cb0:	08005cc1 	.word	0x08005cc1
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005cb4:	2394      	movs	r3, #148	@ 0x94
 8005cb6:	80fb      	strh	r3, [r7, #6]
 8005cb8:	e015      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8005cba:	2399      	movs	r3, #153	@ 0x99
 8005cbc:	80fb      	strh	r3, [r7, #6]
 8005cbe:	e012      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8005cc0:	2381      	movs	r3, #129	@ 0x81
 8005cc2:	80fb      	strh	r3, [r7, #6]
 8005cc4:	e00f      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8005cc6:	239a      	movs	r3, #154	@ 0x9a
 8005cc8:	80fb      	strh	r3, [r7, #6]
 8005cca:	e00c      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8005ccc:	2384      	movs	r3, #132	@ 0x84
 8005cce:	80fb      	strh	r3, [r7, #6]
 8005cd0:	e009      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8005cd2:	238e      	movs	r3, #142	@ 0x8e
 8005cd4:	80fb      	strh	r3, [r7, #6]
 8005cd6:	e006      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8005cd8:	23e6      	movs	r3, #230	@ 0xe6
 8005cda:	80fb      	strh	r3, [r7, #6]
 8005cdc:	e003      	b.n	8005ce6 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8005cde:	23f8      	movs	r3, #248	@ 0xf8
 8005ce0:	80fb      	strh	r3, [r7, #6]
 8005ce2:	bf00      	nop
 8005ce4:	e04c      	b.n	8005d80 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005ce6:	e04b      	b.n	8005d80 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8005ce8:	4b49      	ldr	r3, [pc, #292]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	8a7a      	ldrh	r2, [r7, #18]
 8005cf0:	0052      	lsls	r2, r2, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fbb5 	bl	8005464 <ptr_8to16>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8005cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da06      	bge.n	8005d14 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8005d06:	89fb      	ldrh	r3, [r7, #14]
 8005d08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d0c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8005d0e:	2301      	movs	r3, #1
 8005d10:	747b      	strb	r3, [r7, #17]
 8005d12:	e032      	b.n	8005d7a <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005d14:	7c7b      	ldrb	r3, [r7, #17]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d021      	beq.n	8005d5e <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	8afb      	ldrh	r3, [r7, #22]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d30d      	bcc.n	8005d3e <_UG_GetCharData+0x1b2>
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d809      	bhi.n	8005d3e <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	8afb      	ldrh	r3, [r7, #22]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	8abb      	ldrh	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	743b      	strb	r3, [r7, #16]
        break;
 8005d3c:	e02a      	b.n	8005d94 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	8afb      	ldrh	r3, [r7, #22]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d323      	bcc.n	8005d8e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005d46:	89fa      	ldrh	r2, [r7, #14]
 8005d48:	8afb      	ldrh	r3, [r7, #22]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	8abb      	ldrh	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	747b      	strb	r3, [r7, #17]
 8005d5c:	e00d      	b.n	8005d7a <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	89fb      	ldrh	r3, [r7, #14]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d102      	bne.n	8005d6c <_UG_GetCharData+0x1e0>
      {
        found=1;
 8005d66:	2301      	movs	r3, #1
 8005d68:	743b      	strb	r3, [r7, #16]
        break;
 8005d6a:	e013      	b.n	8005d94 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	89fb      	ldrh	r3, [r7, #14]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d30e      	bcc.n	8005d92 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005d74:	8abb      	ldrh	r3, [r7, #20]
 8005d76:	3301      	adds	r3, #1
 8005d78:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005d7a:	8a7b      	ldrh	r3, [r7, #18]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	827b      	strh	r3, [r7, #18]
 8005d80:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005d86:	8a7a      	ldrh	r2, [r7, #18]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3ad      	bcc.n	8005ce8 <_UG_GetCharData+0x15c>
 8005d8c:	e002      	b.n	8005d94 <_UG_GetCharData+0x208>
        break;
 8005d8e:	bf00      	nop
 8005d90:	e000      	b.n	8005d94 <_UG_GetCharData+0x208>
        break;
 8005d92:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8005d94:	7c3b      	ldrb	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d034      	beq.n	8005e04 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e14 <_UG_GetCharData+0x288>)
 8005da2:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005da4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e18 <_UG_GetCharData+0x28c>)
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005daa:	4b19      	ldr	r3, [pc, #100]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db0:	8aba      	ldrh	r2, [r7, #20]
 8005db2:	4917      	ldr	r1, [pc, #92]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005db4:	6809      	ldr	r1, [r1, #0]
 8005db6:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8005db8:	fb01 f202 	mul.w	r2, r1, r2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <_UG_GetCharData+0x290>)
 8005dc0:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005dc2:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005dcc:	4b10      	ldr	r3, [pc, #64]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd2:	8abb      	ldrh	r3, [r7, #20]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	b21a      	sxth	r2, r3
 8005dda:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <_UG_GetCharData+0x294>)
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	e006      	b.n	8005dee <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005de0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e10 <_UG_GetCharData+0x284>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005de8:	b21a      	sxth	r2, r3
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <_UG_GetCharData+0x294>)
 8005dec:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <_UG_GetCharData+0x290>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005dfc:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <_UG_GetCharData+0x294>)
 8005dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e02:	e001      	b.n	8005e08 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	2001c4d0 	.word	0x2001c4d0
 8005e14:	2001c4d4 	.word	0x2001c4d4
 8005e18:	2001c4d8 	.word	0x2001c4d8
 8005e1c:	2001c4dc 	.word	0x2001c4dc
 8005e20:	2001c4e0 	.word	0x2001c4e0

08005e24 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d070      	beq.n	8005f1a <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005e38:	4b3a      	ldr	r3, [pc, #232]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	4b37      	ldr	r3, [pc, #220]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	b25b      	sxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	da01      	bge.n	8005e64 <_UG_FontSelect+0x40>
 8005e60:	2201      	movs	r2, #1
 8005e62:	e000      	b.n	8005e66 <_UG_FontSelect+0x42>
 8005e64:	2200      	movs	r2, #0
 8005e66:	4b2f      	ldr	r3, [pc, #188]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	4a2b      	ldr	r2, [pc, #172]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e88:	6812      	ldr	r2, [r2, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005e90:	4b24      	ldr	r3, [pc, #144]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005e92:	681c      	ldr	r4, [r3, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fae5 	bl	8005464 <ptr_8to16>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005ea6:	681c      	ldr	r4, [r3, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fadb 	bl	8005464 <ptr_8to16>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3302      	adds	r3, #2
 8005eb6:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005eba:	681c      	ldr	r4, [r3, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fad1 	bl	8005464 <ptr_8to16>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3302      	adds	r3, #2
 8005eca:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005ee0:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	e003      	b.n	8005ef8 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005f00:	4b08      	ldr	r3, [pc, #32]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	461a      	mov	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005f10:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <_UG_FontSelect+0x100>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f18:	e000      	b.n	8005f1c <_UG_FontSelect+0xf8>
    return;
 8005f1a:	bf00      	nop
}
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd90      	pop	{r4, r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2001c4d0 	.word	0x2001c4d0

08005f28 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b08c      	sub	sp, #48	@ 0x30
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	461a      	mov	r2, r3
 8005f36:	4623      	mov	r3, r4
 8005f38:	80fb      	strh	r3, [r7, #6]
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	80bb      	strh	r3, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	807b      	strh	r3, [r7, #2]
 8005f42:	4613      	mov	r3, r2
 8005f44:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005f4e:	2300      	movs	r3, #0
 8005f50:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f52:	2300      	movs	r3, #0
 8005f54:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005f56:	4b8b      	ldr	r3, [pc, #556]	@ (8006184 <_UG_PutChar+0x25c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005f5e:	75fb      	strb	r3, [r7, #23]
 8005f60:	4b88      	ldr	r3, [pc, #544]	@ (8006184 <_UG_PutChar+0x25c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005f72:	f107 0208 	add.w	r2, r7, #8
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fe06 	bl	8005b8c <_UG_GetCharData>
 8005f80:	4603      	mov	r3, r0
 8005f82:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8005f84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d102      	bne.n	8005f94 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e224      	b.n	80063de <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 8005f94:	4b7b      	ldr	r3, [pc, #492]	@ (8006184 <_UG_PutChar+0x25c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005f9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 8005f9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <_UG_PutChar+0x80>
     return 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e21a      	b.n	80063de <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8005fa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005fae:	4b75      	ldr	r3, [pc, #468]	@ (8006184 <_UG_PutChar+0x25c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <_UG_PutChar+0x9e>
 8005fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8005fc6:	7dbb      	ldrb	r3, [r7, #22]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01c      	beq.n	8006006 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005fcc:	4b6d      	ldr	r3, [pc, #436]	@ (8006184 <_UG_PutChar+0x25c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	88ba      	ldrh	r2, [r7, #4]
 8005fd6:	8abb      	ldrh	r3, [r7, #20]
 8005fd8:	4413      	add	r3, r2
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	4b68      	ldr	r3, [pc, #416]	@ (8006184 <_UG_PutChar+0x25c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005fea:	4619      	mov	r1, r3
 8005fec:	887b      	ldrh	r3, [r7, #2]
 8005fee:	440b      	add	r3, r1
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	b21b      	sxth	r3, r3
 8005ff8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005ffc:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8006000:	47a0      	blx	r4
 8006002:	4603      	mov	r3, r0
 8006004:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8006006:	4b5f      	ldr	r3, [pc, #380]	@ (8006184 <_UG_PutChar+0x25c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	f040 8171 	bne.w	80062f6 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006014:	2300      	movs	r3, #0
 8006016:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006018:	e0eb      	b.n	80061f2 <_UG_PutChar+0x2ca>
     {
       c=0;
 800601a:	2300      	movs	r3, #0
 800601c:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800601e:	2300      	movs	r3, #0
 8006020:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006022:	e0de      	b.n	80061e2 <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	60ba      	str	r2, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800602e:	2300      	movs	r3, #0
 8006030:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006032:	e0c9      	b.n	80061c8 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8006034:	7f7b      	ldrb	r3, [r7, #29]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d033      	beq.n	80060a6 <_UG_PutChar+0x17e>
           {
             if(driver)
 800603e:	7dbb      	ldrb	r3, [r7, #22]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01f      	beq.n	8006084 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8006044:	8c3b      	ldrh	r3, [r7, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <_UG_PutChar+0x138>
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d107      	bne.n	8006060 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8006050:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8006054:	8c3a      	ldrh	r2, [r7, #32]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
                 bpixels=0;
 800605c:	2300      	movs	r3, #0
 800605e:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8006060:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <_UG_PutChar+0x154>
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <_UG_PutChar+0x154>
               {
                 x0=x+c;
 800606c:	88ba      	ldrh	r2, [r7, #4]
 800606e:	8bfb      	ldrh	r3, [r7, #30]
 8006070:	4413      	add	r3, r2
 8006072:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8006074:	887a      	ldrh	r2, [r7, #2]
 8006076:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006078:	4413      	add	r3, r2
 800607a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800607c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800607e:	3301      	adds	r3, #1
 8006080:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006082:	e095      	b.n	80061b0 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8006084:	4b3f      	ldr	r3, [pc, #252]	@ (8006184 <_UG_PutChar+0x25c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	88b9      	ldrh	r1, [r7, #4]
 800608e:	8bfa      	ldrh	r2, [r7, #30]
 8006090:	440a      	add	r2, r1
 8006092:	b292      	uxth	r2, r2
 8006094:	b210      	sxth	r0, r2
 8006096:	8879      	ldrh	r1, [r7, #2]
 8006098:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800609a:	440a      	add	r2, r1
 800609c:	b292      	uxth	r2, r2
 800609e:	b211      	sxth	r1, r2
 80060a0:	883a      	ldrh	r2, [r7, #0]
 80060a2:	4798      	blx	r3
 80060a4:	e084      	b.n	80061b0 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80060a6:	7dbb      	ldrb	r3, [r7, #22]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d06d      	beq.n	8006188 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80060ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d064      	beq.n	800617c <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d15e      	bne.n	8006176 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 80060b8:	8839      	ldrh	r1, [r7, #0]
 80060ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	4610      	mov	r0, r2
 80060c0:	4798      	blx	r3
                   fpixels=0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060c6:	e059      	b.n	800617c <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80060c8:	88ba      	ldrh	r2, [r7, #4]
 80060ca:	8abb      	ldrh	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80060d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d003      	beq.n	80060e8 <_UG_PutChar+0x1c0>
 80060e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d224      	bcs.n	8006132 <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80060e8:	4b26      	ldr	r3, [pc, #152]	@ (8006184 <_UG_PutChar+0x25c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ee:	461d      	mov	r5, r3
 80060f0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80060f4:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80060f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060fa:	89fb      	ldrh	r3, [r7, #14]
 80060fc:	4413      	add	r3, r2
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29b      	uxth	r3, r3
 8006104:	b21c      	sxth	r4, r3
 8006106:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006108:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800610c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006110:	b29a      	uxth	r2, r3
 8006112:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006114:	4413      	add	r3, r2
 8006116:	b29b      	uxth	r3, r3
 8006118:	b21b      	sxth	r3, r3
 800611a:	4622      	mov	r2, r4
 800611c:	47a8      	blx	r5
 800611e:	4603      	mov	r3, r0
 8006120:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006122:	8839      	ldrh	r1, [r7, #0]
 8006124:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	4610      	mov	r0, r2
 800612a:	4798      	blx	r3
                       fpixels=0;
 800612c:	2300      	movs	r3, #0
 800612e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006130:	e021      	b.n	8006176 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <_UG_PutChar+0x25c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006138:	461c      	mov	r4, r3
 800613a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800613e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006142:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006144:	89fb      	ldrh	r3, [r7, #14]
 8006146:	4413      	add	r3, r2
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29b      	uxth	r3, r3
 800614e:	b21a      	sxth	r2, r3
 8006150:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8006154:	47a0      	blx	r4
 8006156:	4603      	mov	r3, r0
 8006158:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800615a:	8839      	ldrh	r1, [r7, #0]
 800615c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	4610      	mov	r0, r2
 8006162:	4798      	blx	r3
                       fpixels -= width;
 8006164:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006166:	89fb      	ldrh	r3, [r7, #14]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 800616c:	88bb      	ldrh	r3, [r7, #4]
 800616e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8006170:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006172:	3301      	adds	r3, #1
 8006174:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8006176:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1a5      	bne.n	80060c8 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 800617c:	8c3b      	ldrh	r3, [r7, #32]
 800617e:	3301      	adds	r3, #1
 8006180:	843b      	strh	r3, [r7, #32]
 8006182:	e015      	b.n	80061b0 <_UG_PutChar+0x288>
 8006184:	2001c4d0 	.word	0x2001c4d0
             }
             else if(!trans)                           // Not accelerated output
 8006188:	7dfb      	ldrb	r3, [r7, #23]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d110      	bne.n	80061b0 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 800618e:	4b96      	ldr	r3, [pc, #600]	@ (80063e8 <_UG_PutChar+0x4c0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	88b9      	ldrh	r1, [r7, #4]
 8006198:	8bfa      	ldrh	r2, [r7, #30]
 800619a:	440a      	add	r2, r1
 800619c:	b292      	uxth	r2, r2
 800619e:	b210      	sxth	r0, r2
 80061a0:	8879      	ldrh	r1, [r7, #2]
 80061a2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80061a4:	440a      	add	r2, r1
 80061a6:	b292      	uxth	r2, r2
 80061a8:	b211      	sxth	r1, r2
 80061aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80061ae:	4798      	blx	r3
             }
           }
           b >>= 1;
 80061b0:	7f7b      	ldrb	r3, [r7, #29]
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	777b      	strb	r3, [r7, #29]
           c++;
 80061b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80061c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061c4:	3301      	adds	r3, #1
 80061c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80061c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80061ca:	2b07      	cmp	r3, #7
 80061cc:	d806      	bhi.n	80061dc <_UG_PutChar+0x2b4>
 80061ce:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80061d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	f6ff af2c 	blt.w	8006034 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 80061dc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061de:	3301      	adds	r3, #1
 80061e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80061e2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80061e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80061e6:	429a      	cmp	r2, r3
 80061e8:	f4ff af1c 	bcc.w	8006024 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80061ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061ee:	3301      	adds	r3, #1
 80061f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061f2:	4b7d      	ldr	r3, [pc, #500]	@ (80063e8 <_UG_PutChar+0x4c0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80061fa:	461a      	mov	r2, r3
 80061fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061fe:	4293      	cmp	r3, r2
 8006200:	f4ff af0b 	bcc.w	800601a <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006204:	7dbb      	ldrb	r3, [r7, #22]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80e7 	beq.w	80063da <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 800620c:	8c3b      	ldrh	r3, [r7, #32]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d009      	beq.n	8006226 <_UG_PutChar+0x2fe>
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8006218:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800621c:	8c3a      	ldrh	r2, [r7, #32]
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	e0d9      	b.n	80063da <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8006226:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80d6 	beq.w	80063da <_UG_PutChar+0x4b2>
       {
         if(!trans)
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d15c      	bne.n	80062ee <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8006234:	8839      	ldrh	r1, [r7, #0]
 8006236:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	4610      	mov	r0, r2
 800623c:	4798      	blx	r3
 800623e:	e0cc      	b.n	80063da <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006240:	88ba      	ldrh	r2, [r7, #4]
 8006242:	8abb      	ldrh	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	b29a      	uxth	r2, r3
 8006248:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800624e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006250:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d003      	beq.n	8006260 <_UG_PutChar+0x338>
 8006258:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800625a:	8a3b      	ldrh	r3, [r7, #16]
 800625c:	429a      	cmp	r2, r3
 800625e:	d224      	bcs.n	80062aa <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006260:	4b61      	ldr	r3, [pc, #388]	@ (80063e8 <_UG_PutChar+0x4c0>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006266:	461d      	mov	r5, r3
 8006268:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800626c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006270:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006272:	8a3b      	ldrh	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	b21c      	sxth	r4, r3
 800627e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006280:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006284:	fb92 f3f3 	sdiv	r3, r2, r3
 8006288:	b29a      	uxth	r2, r3
 800628a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800628c:	4413      	add	r3, r2
 800628e:	b29b      	uxth	r3, r3
 8006290:	b21b      	sxth	r3, r3
 8006292:	4622      	mov	r2, r4
 8006294:	47a8      	blx	r5
 8006296:	4603      	mov	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800629a:	8839      	ldrh	r1, [r7, #0]
 800629c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	4610      	mov	r0, r2
 80062a2:	4798      	blx	r3
               fpixels=0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062a8:	e021      	b.n	80062ee <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80062aa:	4b4f      	ldr	r3, [pc, #316]	@ (80063e8 <_UG_PutChar+0x4c0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b0:	461c      	mov	r4, r3
 80062b2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80062b6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80062ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80062bc:	8a3b      	ldrh	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	b21a      	sxth	r2, r3
 80062c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80062cc:	47a0      	blx	r4
 80062ce:	4603      	mov	r3, r0
 80062d0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80062d2:	8839      	ldrh	r1, [r7, #0]
 80062d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
               fpixels -= width;
 80062dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80062de:	8a3b      	ldrh	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 80062e4:	88bb      	ldrh	r3, [r7, #4]
 80062e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 80062e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80062ea:	3301      	adds	r3, #1
 80062ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 80062ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1a5      	bne.n	8006240 <_UG_PutChar+0x318>
 80062f4:	e071      	b.n	80063da <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 80062f6:	4b3c      	ldr	r3, [pc, #240]	@ (80063e8 <_UG_PutChar+0x4c0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d16b      	bne.n	80063da <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006302:	2300      	movs	r3, #0
 8006304:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006306:	e060      	b.n	80063ca <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8006308:	2300      	movs	r3, #0
 800630a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800630c:	e04a      	b.n	80063a4 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	60ba      	str	r2, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006318:	883b      	ldrh	r3, [r7, #0]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	7f7a      	ldrb	r2, [r7, #29]
 800631e:	fb03 f202 	mul.w	r2, r3, r2
 8006322:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006326:	b2db      	uxtb	r3, r3
 8006328:	7f79      	ldrb	r1, [r7, #29]
 800632a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	4413      	add	r3, r2
 8006334:	121b      	asrs	r3, r3, #8
 8006336:	b21b      	sxth	r3, r3
 8006338:	b2db      	uxtb	r3, r3
 800633a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800633c:	883b      	ldrh	r3, [r7, #0]
 800633e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006342:	7f79      	ldrb	r1, [r7, #29]
 8006344:	fb03 f101 	mul.w	r1, r3, r1
 8006348:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800634c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006350:	7f78      	ldrb	r0, [r7, #29]
 8006352:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8006356:	fb00 f303 	mul.w	r3, r0, r3
 800635a:	440b      	add	r3, r1
 800635c:	121b      	asrs	r3, r3, #8
 800635e:	b21b      	sxth	r3, r3
 8006360:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006364:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006366:	4313      	orrs	r3, r2
 8006368:	b21b      	sxth	r3, r3
 800636a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800636c:	7dbb      	ldrb	r3, [r7, #22]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006372:	8a7a      	ldrh	r2, [r7, #18]
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	4611      	mov	r1, r2
 8006378:	2001      	movs	r0, #1
 800637a:	4798      	blx	r3
 800637c:	e00f      	b.n	800639e <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800637e:	4b1a      	ldr	r3, [pc, #104]	@ (80063e8 <_UG_PutChar+0x4c0>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	88b9      	ldrh	r1, [r7, #4]
 8006388:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800638a:	440a      	add	r2, r1
 800638c:	b292      	uxth	r2, r2
 800638e:	b210      	sxth	r0, r2
 8006390:	8879      	ldrh	r1, [r7, #2]
 8006392:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006394:	440a      	add	r2, r1
 8006396:	b292      	uxth	r2, r2
 8006398:	b211      	sxth	r1, r2
 800639a:	8a7a      	ldrh	r2, [r7, #18]
 800639c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800639e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063a0:	3301      	adds	r3, #1
 80063a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80063a4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80063a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	dbaf      	blt.n	800630e <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a0d      	ldr	r2, [pc, #52]	@ (80063e8 <_UG_PutChar+0x4c0>)
 80063b2:	6812      	ldr	r2, [r2, #0]
 80063b4:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80063b8:	4611      	mov	r1, r2
 80063ba:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80063be:	1a8a      	subs	r2, r1, r2
 80063c0:	4413      	add	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80063c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063c6:	3301      	adds	r3, #1
 80063c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80063ca:	4b07      	ldr	r3, [pc, #28]	@ (80063e8 <_UG_PutChar+0x4c0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80063d2:	461a      	mov	r2, r3
 80063d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d396      	bcc.n	8006308 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 80063da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3730      	adds	r7, #48	@ 0x30
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bdb0      	pop	{r4, r5, r7, pc}
 80063e6:	bf00      	nop
 80063e8:	2001c4d0 	.word	0x2001c4d0

080063ec <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b089      	sub	sp, #36	@ 0x24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80063f4:	4b57      	ldr	r3, [pc, #348]	@ (8006554 <_UG_ProcessTouchData+0x168>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	88db      	ldrh	r3, [r3, #6]
 80063fa:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 80063fc:	4b55      	ldr	r3, [pc, #340]	@ (8006554 <_UG_ProcessTouchData+0x168>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	891b      	ldrh	r3, [r3, #8]
 8006402:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8006404:	4b53      	ldr	r3, [pc, #332]	@ (8006554 <_UG_ProcessTouchData+0x168>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	791b      	ldrb	r3, [r3, #4]
 800640a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006412:	2300      	movs	r3, #0
 8006414:	83fb      	strh	r3, [r7, #30]
 8006416:	e090      	b.n	800653a <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	8bfb      	ldrh	r3, [r7, #30]
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	4413      	add	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d179      	bne.n	800652e <_UG_ProcessTouchData+0x142>
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d074      	beq.n	800652e <_UG_ProcessTouchData+0x142>
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	2b00      	cmp	r3, #0
 800644c:	d06f      	beq.n	800652e <_UG_ProcessTouchData+0x142>
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d16a      	bne.n	800652e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d047      	beq.n	80064ee <_UG_ProcessTouchData+0x102>
 800645e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d042      	beq.n	80064ee <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006468:	7f7b      	ldrb	r3, [r7, #29]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8006472:	7f7b      	ldrb	r3, [r7, #29]
 8006474:	f043 0305 	orr.w	r3, r3, #5
 8006478:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 800647a:	7f7b      	ldrb	r3, [r7, #29]
 800647c:	f023 0318 	bic.w	r3, r3, #24
 8006480:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8006482:	7f7b      	ldrb	r3, [r7, #29]
 8006484:	f023 0320 	bic.w	r3, r3, #32
 8006488:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006490:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006494:	429a      	cmp	r2, r3
 8006496:	db25      	blt.n	80064e4 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800649e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	dc1e      	bgt.n	80064e4 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80064ac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	db17      	blt.n	80064e4 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80064ba:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80064be:	429a      	cmp	r2, r3
 80064c0:	dc10      	bgt.n	80064e4 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80064c2:	7f7b      	ldrb	r3, [r7, #29]
 80064c4:	f043 0320 	orr.w	r3, r3, #32
 80064c8:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80064ca:	7f7b      	ldrb	r3, [r7, #29]
 80064cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d107      	bne.n	80064e4 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80064d4:	7f7b      	ldrb	r3, [r7, #29]
 80064d6:	f023 0304 	bic.w	r3, r3, #4
 80064da:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80064dc:	7f7b      	ldrb	r3, [r7, #29]
 80064de:	f043 0302 	orr.w	r3, r3, #2
 80064e2:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 80064e4:	7f7b      	ldrb	r3, [r7, #29]
 80064e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ea:	777b      	strb	r3, [r7, #29]
 80064ec:	e01f      	b.n	800652e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 80064ee:	7f7b      	ldrb	r3, [r7, #29]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01a      	beq.n	800652e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 80064f8:	7f7b      	ldrb	r3, [r7, #29]
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8006502:	7f7b      	ldrb	r3, [r7, #29]
 8006504:	f043 0308 	orr.w	r3, r3, #8
 8006508:	777b      	strb	r3, [r7, #29]
 800650a:	e003      	b.n	8006514 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800650c:	7f7b      	ldrb	r3, [r7, #29]
 800650e:	f043 0310 	orr.w	r3, r3, #16
 8006512:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8006514:	7f7b      	ldrb	r3, [r7, #29]
 8006516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800651e:	7f7b      	ldrb	r3, [r7, #29]
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8006526:	7f7b      	ldrb	r3, [r7, #29]
 8006528:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 800652c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	7f7a      	ldrb	r2, [r7, #29]
 8006532:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8006534:	8bfb      	ldrh	r3, [r7, #30]
 8006536:	3301      	adds	r3, #1
 8006538:	83fb      	strh	r3, [r7, #30]
 800653a:	8bfa      	ldrh	r2, [r7, #30]
 800653c:	8abb      	ldrh	r3, [r7, #20]
 800653e:	429a      	cmp	r2, r3
 8006540:	f4ff af6a 	bcc.w	8006418 <_UG_ProcessTouchData+0x2c>
   }
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3724      	adds	r7, #36	@ 0x24
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	2001c4d0 	.word	0x2001c4d0

08006558 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006566:	2300      	movs	r3, #0
 8006568:	82fb      	strh	r3, [r7, #22]
 800656a:	e035      	b.n	80065d8 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	8afb      	ldrh	r3, [r7, #22]
 8006572:	015b      	lsls	r3, r3, #5
 8006574:	4413      	add	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	785b      	ldrb	r3, [r3, #1]
 8006582:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d121      	bne.n	80065d2 <_UG_UpdateObjects+0x7a>
 800658e:	7bfb      	ldrb	r3, [r7, #15]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01c      	beq.n	80065d2 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d004      	beq.n	80065ac <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	6939      	ldr	r1, [r7, #16]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <_UG_UpdateObjects+0x7a>
 80065b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	da09      	bge.n	80065d2 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	6939      	ldr	r1, [r7, #16]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 80065d2:	8afb      	ldrh	r3, [r7, #22]
 80065d4:	3301      	adds	r3, #1
 80065d6:	82fb      	strh	r3, [r7, #22]
 80065d8:	8afa      	ldrh	r2, [r7, #22]
 80065da:	8abb      	ldrh	r3, [r7, #20]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d3c5      	bcc.n	800656c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 80065f4:	4b22      	ldr	r3, [pc, #136]	@ (8006680 <_UG_HandleEvents+0x94>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 80065fa:	4b21      	ldr	r3, [pc, #132]	@ (8006680 <_UG_HandleEvents+0x94>)
 80065fc:	2202      	movs	r2, #2
 80065fe:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006606:	2300      	movs	r3, #0
 8006608:	82fb      	strh	r3, [r7, #22]
 800660a:	e02f      	b.n	800666c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	8afb      	ldrh	r3, [r7, #22]
 8006612:	015b      	lsls	r3, r3, #5
 8006614:	4413      	add	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d11e      	bne.n	8006666 <_UG_HandleEvents+0x7a>
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d019      	beq.n	8006666 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	7e9b      	ldrb	r3, [r3, #26]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d015      	beq.n	8006666 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800663a:	4a11      	ldr	r2, [pc, #68]	@ (8006680 <_UG_HandleEvents+0x94>)
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	7e1a      	ldrb	r2, [r3, #24]
 8006644:	4b0e      	ldr	r3, [pc, #56]	@ (8006680 <_UG_HandleEvents+0x94>)
 8006646:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	7e5a      	ldrb	r2, [r3, #25]
 800664c:	4b0c      	ldr	r3, [pc, #48]	@ (8006680 <_UG_HandleEvents+0x94>)
 800664e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	7e9a      	ldrb	r2, [r3, #26]
 8006654:	4b0a      	ldr	r3, [pc, #40]	@ (8006680 <_UG_HandleEvents+0x94>)
 8006656:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665c:	4808      	ldr	r0, [pc, #32]	@ (8006680 <_UG_HandleEvents+0x94>)
 800665e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2200      	movs	r2, #0
 8006664:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006666:	8afb      	ldrh	r3, [r7, #22]
 8006668:	3301      	adds	r3, #1
 800666a:	82fb      	strh	r3, [r7, #22]
 800666c:	8afa      	ldrh	r2, [r7, #22]
 800666e:	8abb      	ldrh	r3, [r7, #20]
 8006670:	429a      	cmp	r2, r3
 8006672:	d3cb      	bcc.n	800660c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006674:	bf00      	nop
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	2001c4e4 	.word	0x2001c4e4

08006684 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b08f      	sub	sp, #60	@ 0x3c
 8006688:	af02      	add	r7, sp, #8
 800668a:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 812c 	beq.w	80068ee <_UG_PutText+0x26a>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8127 	beq.w	80068ee <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	89db      	ldrh	r3, [r3, #14]
 80066a4:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	895b      	ldrh	r3, [r3, #10]
 80066aa:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	3302      	adds	r3, #2
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80066b6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80066ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f2c0 8114 	blt.w	80068f2 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	891b      	ldrh	r3, [r3, #8]
 80066ce:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	899b      	ldrh	r3, [r3, #12]
 80066d4:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	7d1b      	ldrb	r3, [r3, #20]
 80066da:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	8adb      	ldrh	r3, [r3, #22]
 80066e0:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8b1b      	ldrh	r3, [r3, #24]
 80066e6:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
   char* c = str;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fb94 	bl	8005e24 <_UG_FontSelect>

   rc=1;
 80066fc:	2301      	movs	r3, #1
 80066fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006704:	4b80      	ldr	r3, [pc, #512]	@ (8006908 <_UG_PutText+0x284>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800670c:	2b00      	cmp	r3, #0
 800670e:	d107      	bne.n	8006720 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8006710:	f107 0308 	add.w	r3, r7, #8
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff f9c1 	bl	8005a9c <_UG_DecodeUTF8>
 800671a:	4603      	mov	r3, r0
 800671c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800671e:	e004      	b.n	800672a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	60ba      	str	r2, [r7, #8]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 800672a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8006730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006732:	2b0a      	cmp	r3, #10
 8006734:	d1e6      	bne.n	8006704 <_UG_PutText+0x80>
 8006736:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006738:	3301      	adds	r3, #1
 800673a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800673c:	e7e2      	b.n	8006704 <_UG_PutText+0x80>
     if(!chr) break;
 800673e:	bf00      	nop
   }

   yp = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006744:	7e7b      	ldrb	r3, [r7, #25]
 8006746:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01f      	beq.n	800678e <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 800674e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006750:	8c3b      	ldrh	r3, [r7, #32]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	3301      	adds	r3, #1
 8006758:	b29b      	uxth	r3, r3
 800675a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 800675c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800675e:	8bfb      	ldrh	r3, [r7, #30]
 8006760:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006762:	fb11 f303 	smulbb	r3, r1, r3
 8006766:	b29b      	uxth	r3, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	b29b      	uxth	r3, r3
 800676c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 800676e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006770:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006772:	3b01      	subs	r3, #1
 8006774:	b299      	uxth	r1, r3
 8006776:	8abb      	ldrh	r3, [r7, #20]
 8006778:	fb11 f303 	smulbb	r3, r1, r3
 800677c:	b29b      	uxth	r3, r3
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 8006784:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8006788:	2b00      	cmp	r3, #0
 800678a:	f2c0 80b4 	blt.w	80068f6 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 800678e:	7e7b      	ldrb	r3, [r7, #25]
 8006790:	f003 0310 	and.w	r3, r3, #16
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <_UG_PutText+0x11c>
 8006798:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800679c:	105b      	asrs	r3, r3, #1
 800679e:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 80067a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80067a2:	8c3b      	ldrh	r3, [r7, #32]
 80067a4:	4413      	add	r3, r2
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80067b6:	4b54      	ldr	r3, [pc, #336]	@ (8006908 <_UG_PutText+0x284>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 80067c2:	f107 0308 	add.w	r3, r7, #8
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff f968 	bl	8005a9c <_UG_DecodeUTF8>
 80067cc:	4603      	mov	r3, r0
 80067ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80067d0:	e004      	b.n	80067dc <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	60ba      	str	r2, [r7, #8]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 80067dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d01b      	beq.n	800681a <_UG_PutText+0x196>
 80067e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067e4:	2b0a      	cmp	r3, #10
 80067e6:	d018      	beq.n	800681a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 80067e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff f9cd 	bl	8005b8c <_UG_GetCharData>
 80067f2:	4603      	mov	r3, r0
 80067f4:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 80067f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	d00a      	beq.n	8006816 <_UG_PutText+0x192>
         sl++;
 8006800:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006802:	3301      	adds	r3, #1
 8006804:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8006806:	8a7a      	ldrh	r2, [r7, #18]
 8006808:	8afb      	ldrh	r3, [r7, #22]
 800680a:	4413      	add	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006810:	4413      	add	r3, r2
 8006812:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006814:	e7cf      	b.n	80067b6 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8006816:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006818:	e7cd      	b.n	80067b6 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 800681a:	8afb      	ldrh	r3, [r7, #22]
 800681c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8006822:	8b7a      	ldrh	r2, [r7, #26]
 8006824:	8bbb      	ldrh	r3, [r7, #28]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	b29b      	uxth	r3, r3
 800682a:	3301      	adds	r3, #1
 800682c:	b29b      	uxth	r3, r3
 800682e:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8006830:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006832:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	b29b      	uxth	r3, r3
 8006838:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 800683a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	db5b      	blt.n	80068fa <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006842:	7e7b      	ldrb	r3, [r7, #25]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <_UG_PutText+0x1ce>
 800684c:	2300      	movs	r3, #0
 800684e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006850:	e008      	b.n	8006864 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006852:	7e7b      	ldrb	r3, [r7, #25]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <_UG_PutText+0x1e0>
 800685c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006860:	105b      	asrs	r3, r3, #1
 8006862:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8006864:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006866:	8bbb      	ldrh	r3, [r7, #28]
 8006868:	4413      	add	r3, r2
 800686a:	b29b      	uxth	r3, r3
 800686c:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800686e:	4b26      	ldr	r3, [pc, #152]	@ (8006908 <_UG_PutText+0x284>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 800687a:	f107 030c 	add.w	r3, r7, #12
 800687e:	4618      	mov	r0, r3
 8006880:	f7ff f90c 	bl	8005a9c <_UG_DecodeUTF8>
 8006884:	4603      	mov	r3, r0
 8006886:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006888:	e004      	b.n	8006894 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8006894:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d031      	beq.n	80068fe <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 800689a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800689c:	2b0a      	cmp	r3, #10
 800689e:	d01c      	beq.n	80068da <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8a1c      	ldrh	r4, [r3, #16]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8a5b      	ldrh	r3, [r3, #18]
 80068a8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80068ac:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 80068b0:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4623      	mov	r3, r4
 80068b6:	f7ff fb37 	bl	8005f28 <_UG_PutChar>
 80068ba:	4603      	mov	r3, r0
 80068bc:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 80068be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d0d2      	beq.n	800686e <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80068c8:	8a7a      	ldrh	r2, [r7, #18]
 80068ca:	8afb      	ldrh	r3, [r7, #22]
 80068cc:	4413      	add	r3, r2
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068d2:	4413      	add	r3, r2
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80068d8:	e7c9      	b.n	800686e <_UG_PutText+0x1ea>
           break;
 80068da:	bf00      	nop
      }
      yp += char_height + char_v_space;
 80068dc:	8bfa      	ldrh	r2, [r7, #30]
 80068de:	8abb      	ldrh	r3, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068e6:	4413      	add	r3, r2
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 80068ec:	e75d      	b.n	80067aa <_UG_PutText+0x126>
     return;
 80068ee:	bf00      	nop
 80068f0:	e006      	b.n	8006900 <_UG_PutText+0x27c>
     return;
 80068f2:	bf00      	nop
 80068f4:	e004      	b.n	8006900 <_UG_PutText+0x27c>
        return;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <_UG_PutText+0x27c>
           return;
 80068fe:	bf00      	nop
   }
}
 8006900:	3734      	adds	r7, #52	@ 0x34
 8006902:	46bd      	mov	sp, r7
 8006904:	bd90      	pop	{r4, r7, pc}
 8006906:	bf00      	nop
 8006908:	2001c4d0 	.word	0x2001c4d0

0800690c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800690c:	b5b0      	push	{r4, r5, r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af02      	add	r7, sp, #8
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	4611      	mov	r1, r2
 8006918:	461a      	mov	r2, r3
 800691a:	4623      	mov	r3, r4
 800691c:	80fb      	strh	r3, [r7, #6]
 800691e:	4603      	mov	r3, r0
 8006920:	80bb      	strh	r3, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	807b      	strh	r3, [r7, #2]
 8006926:	4613      	mov	r3, r2
 8006928:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800692a:	887b      	ldrh	r3, [r7, #2]
 800692c:	3b01      	subs	r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	b21c      	sxth	r4, r3
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	1c9a      	adds	r2, r3, #2
 8006936:	61ba      	str	r2, [r7, #24]
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800693e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006942:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	4622      	mov	r2, r4
 800694c:	f7fe fee2 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006950:	88bb      	ldrh	r3, [r7, #4]
 8006952:	3301      	adds	r3, #1
 8006954:	b29b      	uxth	r3, r3
 8006956:	b219      	sxth	r1, r3
 8006958:	883b      	ldrh	r3, [r7, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	b29b      	uxth	r3, r3
 800695e:	b21c      	sxth	r4, r3
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	61ba      	str	r2, [r7, #24]
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800696c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	4623      	mov	r3, r4
 8006974:	f7fe fece 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	61ba      	str	r2, [r7, #24]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006984:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006988:	f9b7 1000 	ldrsh.w	r1, [r7]
 800698c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4623      	mov	r3, r4
 8006994:	f7fe febe 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8006998:	883b      	ldrh	r3, [r7, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	b21c      	sxth	r4, r3
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	1c9a      	adds	r2, r3, #2
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80069ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80069b0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	4623      	mov	r3, r4
 80069b8:	f7fe feac 	bl	8005714 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80069bc:	88fb      	ldrh	r3, [r7, #6]
 80069be:	3301      	adds	r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	b218      	sxth	r0, r3
 80069c4:	88bb      	ldrh	r3, [r7, #4]
 80069c6:	3301      	adds	r3, #1
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	b219      	sxth	r1, r3
 80069cc:	887b      	ldrh	r3, [r7, #2]
 80069ce:	3b02      	subs	r3, #2
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	b21c      	sxth	r4, r3
 80069d4:	88bb      	ldrh	r3, [r7, #4]
 80069d6:	3301      	adds	r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	b21d      	sxth	r5, r3
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	61ba      	str	r2, [r7, #24]
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	462b      	mov	r3, r5
 80069e8:	4622      	mov	r2, r4
 80069ea:	f7fe fe93 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	3301      	adds	r3, #1
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	b218      	sxth	r0, r3
 80069f6:	88bb      	ldrh	r3, [r7, #4]
 80069f8:	3302      	adds	r3, #2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	b219      	sxth	r1, r3
 80069fe:	88fb      	ldrh	r3, [r7, #6]
 8006a00:	3301      	adds	r3, #1
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	b21c      	sxth	r4, r3
 8006a06:	883b      	ldrh	r3, [r7, #0]
 8006a08:	3b02      	subs	r3, #2
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b21d      	sxth	r5, r3
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	1c9a      	adds	r2, r3, #2
 8006a12:	61ba      	str	r2, [r7, #24]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	462b      	mov	r3, r5
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	f7fe fe7a 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	3301      	adds	r3, #1
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	b218      	sxth	r0, r3
 8006a28:	883b      	ldrh	r3, [r7, #0]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	b219      	sxth	r1, r3
 8006a30:	887b      	ldrh	r3, [r7, #2]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	b21c      	sxth	r4, r3
 8006a38:	883b      	ldrh	r3, [r7, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b21d      	sxth	r5, r3
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	1c9a      	adds	r2, r3, #2
 8006a44:	61ba      	str	r2, [r7, #24]
 8006a46:	881b      	ldrh	r3, [r3, #0]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	f7fe fe61 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006a52:	887b      	ldrh	r3, [r7, #2]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	b218      	sxth	r0, r3
 8006a5a:	88bb      	ldrh	r3, [r7, #4]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	b219      	sxth	r1, r3
 8006a62:	887b      	ldrh	r3, [r7, #2]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	b21c      	sxth	r4, r3
 8006a6a:	883b      	ldrh	r3, [r7, #0]
 8006a6c:	3b02      	subs	r3, #2
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	b21d      	sxth	r5, r3
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	1c9a      	adds	r2, r3, #2
 8006a76:	61ba      	str	r2, [r7, #24]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	4622      	mov	r2, r4
 8006a80:	f7fe fe48 	bl	8005714 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	3302      	adds	r3, #2
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	b218      	sxth	r0, r3
 8006a8c:	88bb      	ldrh	r3, [r7, #4]
 8006a8e:	3302      	adds	r3, #2
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	b219      	sxth	r1, r3
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	3b03      	subs	r3, #3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	b21c      	sxth	r4, r3
 8006a9c:	88bb      	ldrh	r3, [r7, #4]
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	b21d      	sxth	r5, r3
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	61ba      	str	r2, [r7, #24]
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	462b      	mov	r3, r5
 8006ab0:	4622      	mov	r2, r4
 8006ab2:	f7fe fe2f 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	b218      	sxth	r0, r3
 8006abe:	88bb      	ldrh	r3, [r7, #4]
 8006ac0:	3303      	adds	r3, #3
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	b219      	sxth	r1, r3
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	3302      	adds	r3, #2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	b21c      	sxth	r4, r3
 8006ace:	883b      	ldrh	r3, [r7, #0]
 8006ad0:	3b03      	subs	r3, #3
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	b21d      	sxth	r5, r3
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	61ba      	str	r2, [r7, #24]
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	f7fe fe16 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	3302      	adds	r3, #2
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	b218      	sxth	r0, r3
 8006af0:	883b      	ldrh	r3, [r7, #0]
 8006af2:	3b02      	subs	r3, #2
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b219      	sxth	r1, r3
 8006af8:	887b      	ldrh	r3, [r7, #2]
 8006afa:	3b02      	subs	r3, #2
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	b21c      	sxth	r4, r3
 8006b00:	883b      	ldrh	r3, [r7, #0]
 8006b02:	3b02      	subs	r3, #2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	b21d      	sxth	r5, r3
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	1c9a      	adds	r2, r3, #2
 8006b0c:	61ba      	str	r2, [r7, #24]
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	462b      	mov	r3, r5
 8006b14:	4622      	mov	r2, r4
 8006b16:	f7fe fdfd 	bl	8005714 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8006b1a:	887b      	ldrh	r3, [r7, #2]
 8006b1c:	3b02      	subs	r3, #2
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	b218      	sxth	r0, r3
 8006b22:	88bb      	ldrh	r3, [r7, #4]
 8006b24:	3302      	adds	r3, #2
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	b219      	sxth	r1, r3
 8006b2a:	887b      	ldrh	r3, [r7, #2]
 8006b2c:	3b02      	subs	r3, #2
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21a      	sxth	r2, r3
 8006b32:	883b      	ldrh	r3, [r7, #0]
 8006b34:	3b03      	subs	r3, #3
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	b21c      	sxth	r4, r3
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4623      	mov	r3, r4
 8006b42:	f7fe fde7 	bl	8005714 <UG_DrawLine>
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006b50 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006b56:	4b5e      	ldr	r3, [pc, #376]	@ (8006cd0 <UG_Update+0x180>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UG_Update+0x2c>
 8006b66:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd0 <UG_Update+0x180>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 8006b6e:	4b58      	ldr	r3, [pc, #352]	@ (8006cd0 <UG_Update+0x180>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0201 	bic.w	r2, r2, #1
 8006b76:	b2d2      	uxtb	r2, r2
 8006b78:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006b7c:	4b54      	ldr	r3, [pc, #336]	@ (8006cd0 <UG_Update+0x180>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	4b53      	ldr	r3, [pc, #332]	@ (8006cd0 <UG_Update+0x180>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d071      	beq.n	8006c70 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8006b8c:	4b50      	ldr	r3, [pc, #320]	@ (8006cd0 <UG_Update+0x180>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d06c      	beq.n	8006c70 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8006b96:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd0 <UG_Update+0x180>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006cd0 <UG_Update+0x180>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6912      	ldr	r2, [r2, #16]
 8006ba0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8006ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd0 <UG_Update+0x180>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd0 <UG_Update+0x180>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68d2      	ldr	r2, [r2, #12]
 8006bac:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8006bae:	4b48      	ldr	r3, [pc, #288]	@ (8006cd0 <UG_Update+0x180>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d045      	beq.n	8006c44 <UG_Update+0xf4>
 8006bb8:	4b45      	ldr	r3, [pc, #276]	@ (8006cd0 <UG_Update+0x180>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	7d9b      	ldrb	r3, [r3, #22]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d03d      	beq.n	8006c44 <UG_Update+0xf4>
 8006bc8:	4b41      	ldr	r3, [pc, #260]	@ (8006cd0 <UG_Update+0x180>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	7a1b      	ldrb	r3, [r3, #8]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d035      	beq.n	8006c44 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8006cd0 <UG_Update+0x180>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006be2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd0 <UG_Update+0x180>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d123      	bne.n	8006c38 <UG_Update+0xe8>
 8006bf0:	4b37      	ldr	r3, [pc, #220]	@ (8006cd0 <UG_Update+0x180>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006bfa:	4b35      	ldr	r3, [pc, #212]	@ (8006cd0 <UG_Update+0x180>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d117      	bne.n	8006c38 <UG_Update+0xe8>
 8006c08:	4b31      	ldr	r3, [pc, #196]	@ (8006cd0 <UG_Update+0x180>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006c12:	4b2f      	ldr	r3, [pc, #188]	@ (8006cd0 <UG_Update+0x180>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d10b      	bne.n	8006c38 <UG_Update+0xe8>
 8006c20:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <UG_Update+0x180>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <UG_Update+0x180>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d005      	beq.n	8006c44 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006c38:	4b25      	ldr	r3, [pc, #148]	@ (8006cd0 <UG_Update+0x180>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 f848 	bl	8006cd4 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006c44:	4b22      	ldr	r3, [pc, #136]	@ (8006cd0 <UG_Update+0x180>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	7a1a      	ldrb	r2, [r3, #8]
 8006c4c:	4b20      	ldr	r3, [pc, #128]	@ (8006cd0 <UG_Update+0x180>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd0 <UG_Update+0x180>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	7a1a      	ldrb	r2, [r3, #8]
 8006c62:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd0 <UG_Update+0x180>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006c70:	4b17      	ldr	r3, [pc, #92]	@ (8006cd0 <UG_Update+0x180>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01b      	beq.n	8006cb2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8006c7a:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <UG_Update+0x180>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7a1b      	ldrb	r3, [r3, #8]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d002      	beq.n	8006c94 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8c8 	bl	8006e24 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7a1b      	ldrb	r3, [r3, #8]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fba3 	bl	80063ec <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff fc56 	bl	8006558 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f7ff fc9d 	bl	80065ec <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006cb2:	4b07      	ldr	r3, [pc, #28]	@ (8006cd0 <UG_Update+0x180>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <UG_Update+0x178>
     gui->device->flush();
 8006cbe:	4b04      	ldr	r3, [pc, #16]	@ (8006cd0 <UG_Update+0x180>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	4798      	blx	r3
   }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	2001c4d0 	.word	0x2001c4d0

08006cd4 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006cd4:	b590      	push	{r4, r7, lr}
 8006cd6:	b08f      	sub	sp, #60	@ 0x3c
 8006cd8:	af02      	add	r7, sp, #8
 8006cda:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8098 	beq.w	8006e14 <_UG_WindowDrawTitle+0x140>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	7a1b      	ldrb	r3, [r3, #8]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8091 	beq.w	8006e14 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	89db      	ldrh	r3, [r3, #14]
 8006cf6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8a1b      	ldrh	r3, [r3, #16]
 8006cfc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8a5b      	ldrh	r3, [r3, #18]
 8006d02:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	8a9b      	ldrh	r3, [r3, #20]
 8006d08:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	7d9b      	ldrb	r3, [r3, #22]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00f      	beq.n	8006d36 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006d16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d18:	3303      	adds	r3, #3
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 8006d1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d20:	3303      	adds	r3, #3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8006d26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006d28:	3b03      	subs	r3, #3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 8006d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d30:	3b03      	subs	r3, #3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006d36:	4b3a      	ldr	r3, [pc, #232]	@ (8006e20 <_UG_WindowDrawTitle+0x14c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d106      	bne.n	8006d50 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d46:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006d4c:	83bb      	strh	r3, [r7, #28]
 8006d4e:	e005      	b.n	8006d5c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d54:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d62:	461a      	mov	r2, r3
 8006d64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d66:	4413      	add	r3, r2
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	b21c      	sxth	r4, r3
 8006d70:	8bfb      	ldrh	r3, [r7, #30]
 8006d72:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006d76:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006d7a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4623      	mov	r3, r4
 8006d82:	f7fe fc55 	bl	8005630 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8006d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006d94:	3303      	adds	r3, #3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	b21b      	sxth	r3, r3
 8006d9a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006d9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d9e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8006da0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006da2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006daa:	461a      	mov	r2, r3
 8006dac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006dae:	4413      	add	r3, r2
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	3b01      	subs	r3, #1
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	b21b      	sxth	r3, r3
 8006db8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006dc0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006dca:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8006dd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8006dd4:	f107 030c 	add.w	r3, r7, #12
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fc53 	bl	8006684 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006de4:	461a      	mov	r2, r3
 8006de6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006de8:	4413      	add	r3, r2
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	b219      	sxth	r1, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006df4:	461a      	mov	r2, r3
 8006df6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006df8:	4413      	add	r3, r2
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8006e02:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006e06:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006e0a:	9400      	str	r4, [sp, #0]
 8006e0c:	f7fe fc82 	bl	8005714 <UG_DrawLine>
      return UG_RESULT_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e001      	b.n	8006e18 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8006e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3734      	adds	r7, #52	@ 0x34
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd90      	pop	{r4, r7, pc}
 8006e20:	2001c4d0 	.word	0x2001c4d0

08006e24 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b089      	sub	sp, #36	@ 0x24
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	89db      	ldrh	r3, [r3, #14]
 8006e30:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8a1b      	ldrh	r3, [r3, #16]
 8006e36:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	8a5b      	ldrh	r3, [r3, #18]
 8006e3c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	8a9b      	ldrh	r3, [r3, #20]
 8006e42:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	7a1b      	ldrb	r3, [r3, #8]
 8006e48:	f023 0320 	bic.w	r3, r3, #32
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	7a1b      	ldrb	r3, [r3, #8]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8084 	beq.w	8006f68 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	7d9b      	ldrb	r3, [r3, #22]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d021      	beq.n	8006eb0 <_UG_WindowUpdate+0x8c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7a1b      	ldrb	r3, [r3, #8]
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d11b      	bne.n	8006eb0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006e78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e7c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e80:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006e84:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006e88:	4c43      	ldr	r4, [pc, #268]	@ (8006f98 <_UG_WindowUpdate+0x174>)
 8006e8a:	9400      	str	r4, [sp, #0]
 8006e8c:	f7ff fd3e 	bl	800690c <_UG_DrawObjectFrame>
         xs+=3;
 8006e90:	8abb      	ldrh	r3, [r7, #20]
 8006e92:	3303      	adds	r3, #3
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006e98:	8a7b      	ldrh	r3, [r7, #18]
 8006e9a:	3303      	adds	r3, #3
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006ea0:	8a3b      	ldrh	r3, [r7, #16]
 8006ea2:	3b03      	subs	r3, #3
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
 8006eaa:	3b03      	subs	r3, #3
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	7d9b      	ldrb	r3, [r3, #22]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ff09 	bl	8006cd4 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ec8:	461a      	mov	r2, r3
 8006eca:	8a7b      	ldrh	r3, [r7, #18]
 8006ecc:	4413      	add	r3, r2
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	7a1b      	ldrb	r3, [r3, #8]
 8006eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d007      	beq.n	8006ef2 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7a1b      	ldrb	r3, [r3, #8]
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	721a      	strb	r2, [r3, #8]
            return;
 8006ef0:	e04e      	b.n	8006f90 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	899b      	ldrh	r3, [r3, #12]
 8006ef6:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006efa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006efe:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006f02:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	4623      	mov	r3, r4
 8006f0a:	f7fe fb91 	bl	8005630 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	82fb      	strh	r3, [r7, #22]
 8006f18:	e021      	b.n	8006f5e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685a      	ldr	r2, [r3, #4]
 8006f1e:	8afb      	ldrh	r3, [r7, #22]
 8006f20:	015b      	lsls	r3, r3, #5
 8006f22:	4413      	add	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d112      	bne.n	8006f58 <_UG_WindowUpdate+0x134>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <_UG_WindowUpdate+0x134>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <_UG_WindowUpdate+0x134>
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	82fb      	strh	r3, [r7, #22]
 8006f5e:	8afa      	ldrh	r2, [r7, #22]
 8006f60:	89bb      	ldrh	r3, [r7, #12]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d3d9      	bcc.n	8006f1a <_UG_WindowUpdate+0xf6>
 8006f66:	e013      	b.n	8006f90 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <_UG_WindowUpdate+0x178>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	4623      	mov	r3, r4
 8006f8c:	f7fe fb50 	bl	8005630 <UG_FillFrame>
   }
}
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd90      	pop	{r4, r7, pc}
 8006f96:	bf00      	nop
 8006f98:	080341e8 	.word	0x080341e8
 8006f9c:	2001c4d0 	.word	0x2001c4d0

08006fa0 <_ZdlPvj>:
 8006fa0:	f000 b81e 	b.w	8006fe0 <_ZdlPv>

08006fa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8006fa4:	f850 3b08 	ldr.w	r3, [r0], #8
 8006fa8:	1a1b      	subs	r3, r3, r0
 8006faa:	4258      	negs	r0, r3
 8006fac:	4158      	adcs	r0, r3
 8006fae:	4770      	bx	lr

08006fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f7ff fff6 	bl	8006fa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006fb8:	b920      	cbnz	r0, 8006fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8006fba:	6820      	ldr	r0, [r4, #0]
 8006fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fc0:	f000 b80e 	b.w	8006fe0 <_ZdlPv>
 8006fc4:	bd10      	pop	{r4, pc}

08006fc6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006fc6:	f100 0208 	add.w	r2, r0, #8
 8006fca:	6002      	str	r2, [r0, #0]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	6042      	str	r2, [r0, #4]
 8006fd0:	7202      	strb	r2, [r0, #8]
 8006fd2:	4770      	bx	lr

08006fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	f7ff ffea 	bl	8006fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006fdc:	4620      	mov	r0, r4
 8006fde:	bd10      	pop	{r4, pc}

08006fe0 <_ZdlPv>:
 8006fe0:	f000 b800 	b.w	8006fe4 <free>

08006fe4 <free>:
 8006fe4:	4b02      	ldr	r3, [pc, #8]	@ (8006ff0 <free+0xc>)
 8006fe6:	4601      	mov	r1, r0
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	f000 b951 	b.w	8007290 <_free_r>
 8006fee:	bf00      	nop
 8006ff0:	20000030 	.word	0x20000030

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8007034 <sbrk_aligned+0x40>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 f8fc 	bl	80071fc <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 f8f7 	bl	80071fc <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d103      	bne.n	800701a <sbrk_aligned+0x26>
 8007012:	f04f 34ff 	mov.w	r4, #4294967295
 8007016:	4620      	mov	r0, r4
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d0f8      	beq.n	8007016 <sbrk_aligned+0x22>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 f8e8 	bl	80071fc <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d1f2      	bne.n	8007016 <sbrk_aligned+0x22>
 8007030:	e7ef      	b.n	8007012 <sbrk_aligned+0x1e>
 8007032:	bf00      	nop
 8007034:	2001c4ec 	.word	0x2001c4ec

08007038 <_malloc_r>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4606      	mov	r6, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d904      	bls.n	800705e <_malloc_r+0x26>
 8007054:	230c      	movs	r3, #12
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007134 <_malloc_r+0xfc>
 8007062:	f000 f869 	bl	8007138 <__malloc_lock>
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	461c      	mov	r4, r3
 800706c:	bb44      	cbnz	r4, 80070c0 <_malloc_r+0x88>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbf 	bl	8006ff4 <sbrk_aligned>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	4604      	mov	r4, r0
 800707a:	d158      	bne.n	800712e <_malloc_r+0xf6>
 800707c:	f8d8 4000 	ldr.w	r4, [r8]
 8007080:	4627      	mov	r7, r4
 8007082:	2f00      	cmp	r7, #0
 8007084:	d143      	bne.n	800710e <_malloc_r+0xd6>
 8007086:	2c00      	cmp	r4, #0
 8007088:	d04b      	beq.n	8007122 <_malloc_r+0xea>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	eb04 0903 	add.w	r9, r4, r3
 8007094:	f000 f8b2 	bl	80071fc <_sbrk_r>
 8007098:	4581      	cmp	r9, r0
 800709a:	d142      	bne.n	8007122 <_malloc_r+0xea>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	1a6d      	subs	r5, r5, r1
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffa6 	bl	8006ff4 <sbrk_aligned>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d03a      	beq.n	8007122 <_malloc_r+0xea>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	442b      	add	r3, r5
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	bb62      	cbnz	r2, 8007114 <_malloc_r+0xdc>
 80070ba:	f8c8 7000 	str.w	r7, [r8]
 80070be:	e00f      	b.n	80070e0 <_malloc_r+0xa8>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	1b52      	subs	r2, r2, r5
 80070c4:	d420      	bmi.n	8007108 <_malloc_r+0xd0>
 80070c6:	2a0b      	cmp	r2, #11
 80070c8:	d917      	bls.n	80070fa <_malloc_r+0xc2>
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	6025      	str	r5, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	6059      	strne	r1, [r3, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	bf08      	it	eq
 80070d8:	f8c8 1000 	streq.w	r1, [r8]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f82f 	bl	8007144 <__malloc_unlock>
 80070e6:	f104 000b 	add.w	r0, r4, #11
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	f020 0007 	bic.w	r0, r0, #7
 80070f0:	1ac2      	subs	r2, r0, r3
 80070f2:	bf1c      	itt	ne
 80070f4:	1a1b      	subne	r3, r3, r0
 80070f6:	50a3      	strne	r3, [r4, r2]
 80070f8:	e7af      	b.n	800705a <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	f8c8 2000 	streq.w	r2, [r8]
 8007104:	605a      	strne	r2, [r3, #4]
 8007106:	e7eb      	b.n	80070e0 <_malloc_r+0xa8>
 8007108:	4623      	mov	r3, r4
 800710a:	6864      	ldr	r4, [r4, #4]
 800710c:	e7ae      	b.n	800706c <_malloc_r+0x34>
 800710e:	463c      	mov	r4, r7
 8007110:	687f      	ldr	r7, [r7, #4]
 8007112:	e7b6      	b.n	8007082 <_malloc_r+0x4a>
 8007114:	461a      	mov	r2, r3
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	d1fb      	bne.n	8007114 <_malloc_r+0xdc>
 800711c:	2300      	movs	r3, #0
 800711e:	6053      	str	r3, [r2, #4]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa8>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f80c 	bl	8007144 <__malloc_unlock>
 800712c:	e794      	b.n	8007058 <_malloc_r+0x20>
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	e7d6      	b.n	80070e0 <_malloc_r+0xa8>
 8007132:	bf00      	nop
 8007134:	2001c4f0 	.word	0x2001c4f0

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_lock+0x8>)
 800713a:	f000 b899 	b.w	8007270 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	2001c630 	.word	0x2001c630

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_unlock+0x8>)
 8007146:	f000 b894 	b.w	8007272 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	2001c630 	.word	0x2001c630

08007150 <sniprintf>:
 8007150:	b40c      	push	{r2, r3}
 8007152:	b530      	push	{r4, r5, lr}
 8007154:	4b17      	ldr	r3, [pc, #92]	@ (80071b4 <sniprintf+0x64>)
 8007156:	1e0c      	subs	r4, r1, #0
 8007158:	681d      	ldr	r5, [r3, #0]
 800715a:	b09d      	sub	sp, #116	@ 0x74
 800715c:	da08      	bge.n	8007170 <sniprintf+0x20>
 800715e:	238b      	movs	r3, #139	@ 0x8b
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	b01d      	add	sp, #116	@ 0x74
 8007168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800716c:	b002      	add	sp, #8
 800716e:	4770      	bx	lr
 8007170:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007174:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007178:	bf14      	ite	ne
 800717a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800717e:	4623      	moveq	r3, r4
 8007180:	9304      	str	r3, [sp, #16]
 8007182:	9307      	str	r3, [sp, #28]
 8007184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007188:	9002      	str	r0, [sp, #8]
 800718a:	9006      	str	r0, [sp, #24]
 800718c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007190:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007192:	ab21      	add	r3, sp, #132	@ 0x84
 8007194:	a902      	add	r1, sp, #8
 8007196:	4628      	mov	r0, r5
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	f000 f91f 	bl	80073dc <_svfiprintf_r>
 800719e:	1c43      	adds	r3, r0, #1
 80071a0:	bfbc      	itt	lt
 80071a2:	238b      	movlt	r3, #139	@ 0x8b
 80071a4:	602b      	strlt	r3, [r5, #0]
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	d0dd      	beq.n	8007166 <sniprintf+0x16>
 80071aa:	9b02      	ldr	r3, [sp, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e7d9      	b.n	8007166 <sniprintf+0x16>
 80071b2:	bf00      	nop
 80071b4:	20000030 	.word	0x20000030

080071b8 <memmove>:
 80071b8:	4288      	cmp	r0, r1
 80071ba:	b510      	push	{r4, lr}
 80071bc:	eb01 0402 	add.w	r4, r1, r2
 80071c0:	d902      	bls.n	80071c8 <memmove+0x10>
 80071c2:	4284      	cmp	r4, r0
 80071c4:	4623      	mov	r3, r4
 80071c6:	d807      	bhi.n	80071d8 <memmove+0x20>
 80071c8:	1e43      	subs	r3, r0, #1
 80071ca:	42a1      	cmp	r1, r4
 80071cc:	d008      	beq.n	80071e0 <memmove+0x28>
 80071ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071d6:	e7f8      	b.n	80071ca <memmove+0x12>
 80071d8:	4402      	add	r2, r0
 80071da:	4601      	mov	r1, r0
 80071dc:	428a      	cmp	r2, r1
 80071de:	d100      	bne.n	80071e2 <memmove+0x2a>
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071ea:	e7f7      	b.n	80071dc <memmove+0x24>

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_sbrk_r>:
 80071fc:	b538      	push	{r3, r4, r5, lr}
 80071fe:	4d06      	ldr	r5, [pc, #24]	@ (8007218 <_sbrk_r+0x1c>)
 8007200:	2300      	movs	r3, #0
 8007202:	4604      	mov	r4, r0
 8007204:	4608      	mov	r0, r1
 8007206:	602b      	str	r3, [r5, #0]
 8007208:	f7fa f8ea 	bl	80013e0 <_sbrk>
 800720c:	1c43      	adds	r3, r0, #1
 800720e:	d102      	bne.n	8007216 <_sbrk_r+0x1a>
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	b103      	cbz	r3, 8007216 <_sbrk_r+0x1a>
 8007214:	6023      	str	r3, [r4, #0]
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	2001c62c 	.word	0x2001c62c

0800721c <__errno>:
 800721c:	4b01      	ldr	r3, [pc, #4]	@ (8007224 <__errno+0x8>)
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000030 	.word	0x20000030

08007228 <__libc_init_array>:
 8007228:	b570      	push	{r4, r5, r6, lr}
 800722a:	4d0d      	ldr	r5, [pc, #52]	@ (8007260 <__libc_init_array+0x38>)
 800722c:	4c0d      	ldr	r4, [pc, #52]	@ (8007264 <__libc_init_array+0x3c>)
 800722e:	1b64      	subs	r4, r4, r5
 8007230:	10a4      	asrs	r4, r4, #2
 8007232:	2600      	movs	r6, #0
 8007234:	42a6      	cmp	r6, r4
 8007236:	d109      	bne.n	800724c <__libc_init_array+0x24>
 8007238:	4d0b      	ldr	r5, [pc, #44]	@ (8007268 <__libc_init_array+0x40>)
 800723a:	4c0c      	ldr	r4, [pc, #48]	@ (800726c <__libc_init_array+0x44>)
 800723c:	f000 fb8e 	bl	800795c <_init>
 8007240:	1b64      	subs	r4, r4, r5
 8007242:	10a4      	asrs	r4, r4, #2
 8007244:	2600      	movs	r6, #0
 8007246:	42a6      	cmp	r6, r4
 8007248:	d105      	bne.n	8007256 <__libc_init_array+0x2e>
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007250:	4798      	blx	r3
 8007252:	3601      	adds	r6, #1
 8007254:	e7ee      	b.n	8007234 <__libc_init_array+0xc>
 8007256:	f855 3b04 	ldr.w	r3, [r5], #4
 800725a:	4798      	blx	r3
 800725c:	3601      	adds	r6, #1
 800725e:	e7f2      	b.n	8007246 <__libc_init_array+0x1e>
 8007260:	0803423c 	.word	0x0803423c
 8007264:	0803423c 	.word	0x0803423c
 8007268:	0803423c 	.word	0x0803423c
 800726c:	08034244 	.word	0x08034244

08007270 <__retarget_lock_acquire_recursive>:
 8007270:	4770      	bx	lr

08007272 <__retarget_lock_release_recursive>:
 8007272:	4770      	bx	lr

08007274 <memcpy>:
 8007274:	440a      	add	r2, r1
 8007276:	4291      	cmp	r1, r2
 8007278:	f100 33ff 	add.w	r3, r0, #4294967295
 800727c:	d100      	bne.n	8007280 <memcpy+0xc>
 800727e:	4770      	bx	lr
 8007280:	b510      	push	{r4, lr}
 8007282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007286:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728a:	4291      	cmp	r1, r2
 800728c:	d1f9      	bne.n	8007282 <memcpy+0xe>
 800728e:	bd10      	pop	{r4, pc}

08007290 <_free_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	4605      	mov	r5, r0
 8007294:	2900      	cmp	r1, #0
 8007296:	d041      	beq.n	800731c <_free_r+0x8c>
 8007298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800729c:	1f0c      	subs	r4, r1, #4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	bfb8      	it	lt
 80072a2:	18e4      	addlt	r4, r4, r3
 80072a4:	f7ff ff48 	bl	8007138 <__malloc_lock>
 80072a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007320 <_free_r+0x90>)
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	b933      	cbnz	r3, 80072bc <_free_r+0x2c>
 80072ae:	6063      	str	r3, [r4, #4]
 80072b0:	6014      	str	r4, [r2, #0]
 80072b2:	4628      	mov	r0, r5
 80072b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b8:	f7ff bf44 	b.w	8007144 <__malloc_unlock>
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d908      	bls.n	80072d2 <_free_r+0x42>
 80072c0:	6820      	ldr	r0, [r4, #0]
 80072c2:	1821      	adds	r1, r4, r0
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf01      	itttt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	1809      	addeq	r1, r1, r0
 80072ce:	6021      	streq	r1, [r4, #0]
 80072d0:	e7ed      	b.n	80072ae <_free_r+0x1e>
 80072d2:	461a      	mov	r2, r3
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	b10b      	cbz	r3, 80072dc <_free_r+0x4c>
 80072d8:	42a3      	cmp	r3, r4
 80072da:	d9fa      	bls.n	80072d2 <_free_r+0x42>
 80072dc:	6811      	ldr	r1, [r2, #0]
 80072de:	1850      	adds	r0, r2, r1
 80072e0:	42a0      	cmp	r0, r4
 80072e2:	d10b      	bne.n	80072fc <_free_r+0x6c>
 80072e4:	6820      	ldr	r0, [r4, #0]
 80072e6:	4401      	add	r1, r0
 80072e8:	1850      	adds	r0, r2, r1
 80072ea:	4283      	cmp	r3, r0
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	d1e0      	bne.n	80072b2 <_free_r+0x22>
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	6053      	str	r3, [r2, #4]
 80072f6:	4408      	add	r0, r1
 80072f8:	6010      	str	r0, [r2, #0]
 80072fa:	e7da      	b.n	80072b2 <_free_r+0x22>
 80072fc:	d902      	bls.n	8007304 <_free_r+0x74>
 80072fe:	230c      	movs	r3, #12
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	e7d6      	b.n	80072b2 <_free_r+0x22>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	1821      	adds	r1, r4, r0
 8007308:	428b      	cmp	r3, r1
 800730a:	bf04      	itt	eq
 800730c:	6819      	ldreq	r1, [r3, #0]
 800730e:	685b      	ldreq	r3, [r3, #4]
 8007310:	6063      	str	r3, [r4, #4]
 8007312:	bf04      	itt	eq
 8007314:	1809      	addeq	r1, r1, r0
 8007316:	6021      	streq	r1, [r4, #0]
 8007318:	6054      	str	r4, [r2, #4]
 800731a:	e7ca      	b.n	80072b2 <_free_r+0x22>
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	bf00      	nop
 8007320:	2001c4f0 	.word	0x2001c4f0

08007324 <__ssputs_r>:
 8007324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	688e      	ldr	r6, [r1, #8]
 800732a:	461f      	mov	r7, r3
 800732c:	42be      	cmp	r6, r7
 800732e:	680b      	ldr	r3, [r1, #0]
 8007330:	4682      	mov	sl, r0
 8007332:	460c      	mov	r4, r1
 8007334:	4690      	mov	r8, r2
 8007336:	d82d      	bhi.n	8007394 <__ssputs_r+0x70>
 8007338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800733c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007340:	d026      	beq.n	8007390 <__ssputs_r+0x6c>
 8007342:	6965      	ldr	r5, [r4, #20]
 8007344:	6909      	ldr	r1, [r1, #16]
 8007346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800734a:	eba3 0901 	sub.w	r9, r3, r1
 800734e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007352:	1c7b      	adds	r3, r7, #1
 8007354:	444b      	add	r3, r9
 8007356:	106d      	asrs	r5, r5, #1
 8007358:	429d      	cmp	r5, r3
 800735a:	bf38      	it	cc
 800735c:	461d      	movcc	r5, r3
 800735e:	0553      	lsls	r3, r2, #21
 8007360:	d527      	bpl.n	80073b2 <__ssputs_r+0x8e>
 8007362:	4629      	mov	r1, r5
 8007364:	f7ff fe68 	bl	8007038 <_malloc_r>
 8007368:	4606      	mov	r6, r0
 800736a:	b360      	cbz	r0, 80073c6 <__ssputs_r+0xa2>
 800736c:	6921      	ldr	r1, [r4, #16]
 800736e:	464a      	mov	r2, r9
 8007370:	f7ff ff80 	bl	8007274 <memcpy>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800737a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	6126      	str	r6, [r4, #16]
 8007382:	6165      	str	r5, [r4, #20]
 8007384:	444e      	add	r6, r9
 8007386:	eba5 0509 	sub.w	r5, r5, r9
 800738a:	6026      	str	r6, [r4, #0]
 800738c:	60a5      	str	r5, [r4, #8]
 800738e:	463e      	mov	r6, r7
 8007390:	42be      	cmp	r6, r7
 8007392:	d900      	bls.n	8007396 <__ssputs_r+0x72>
 8007394:	463e      	mov	r6, r7
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	4632      	mov	r2, r6
 800739a:	4641      	mov	r1, r8
 800739c:	f7ff ff0c 	bl	80071b8 <memmove>
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	1b9b      	subs	r3, r3, r6
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	4433      	add	r3, r6
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	2000      	movs	r0, #0
 80073ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b2:	462a      	mov	r2, r5
 80073b4:	f000 fa9c 	bl	80078f0 <_realloc_r>
 80073b8:	4606      	mov	r6, r0
 80073ba:	2800      	cmp	r0, #0
 80073bc:	d1e0      	bne.n	8007380 <__ssputs_r+0x5c>
 80073be:	6921      	ldr	r1, [r4, #16]
 80073c0:	4650      	mov	r0, sl
 80073c2:	f7ff ff65 	bl	8007290 <_free_r>
 80073c6:	230c      	movs	r3, #12
 80073c8:	f8ca 3000 	str.w	r3, [sl]
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d2:	81a3      	strh	r3, [r4, #12]
 80073d4:	f04f 30ff 	mov.w	r0, #4294967295
 80073d8:	e7e9      	b.n	80073ae <__ssputs_r+0x8a>
	...

080073dc <_svfiprintf_r>:
 80073dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4698      	mov	r8, r3
 80073e2:	898b      	ldrh	r3, [r1, #12]
 80073e4:	061b      	lsls	r3, r3, #24
 80073e6:	b09d      	sub	sp, #116	@ 0x74
 80073e8:	4607      	mov	r7, r0
 80073ea:	460d      	mov	r5, r1
 80073ec:	4614      	mov	r4, r2
 80073ee:	d510      	bpl.n	8007412 <_svfiprintf_r+0x36>
 80073f0:	690b      	ldr	r3, [r1, #16]
 80073f2:	b973      	cbnz	r3, 8007412 <_svfiprintf_r+0x36>
 80073f4:	2140      	movs	r1, #64	@ 0x40
 80073f6:	f7ff fe1f 	bl	8007038 <_malloc_r>
 80073fa:	6028      	str	r0, [r5, #0]
 80073fc:	6128      	str	r0, [r5, #16]
 80073fe:	b930      	cbnz	r0, 800740e <_svfiprintf_r+0x32>
 8007400:	230c      	movs	r3, #12
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	b01d      	add	sp, #116	@ 0x74
 800740a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740e:	2340      	movs	r3, #64	@ 0x40
 8007410:	616b      	str	r3, [r5, #20]
 8007412:	2300      	movs	r3, #0
 8007414:	9309      	str	r3, [sp, #36]	@ 0x24
 8007416:	2320      	movs	r3, #32
 8007418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800741c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007420:	2330      	movs	r3, #48	@ 0x30
 8007422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075c0 <_svfiprintf_r+0x1e4>
 8007426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800742a:	f04f 0901 	mov.w	r9, #1
 800742e:	4623      	mov	r3, r4
 8007430:	469a      	mov	sl, r3
 8007432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007436:	b10a      	cbz	r2, 800743c <_svfiprintf_r+0x60>
 8007438:	2a25      	cmp	r2, #37	@ 0x25
 800743a:	d1f9      	bne.n	8007430 <_svfiprintf_r+0x54>
 800743c:	ebba 0b04 	subs.w	fp, sl, r4
 8007440:	d00b      	beq.n	800745a <_svfiprintf_r+0x7e>
 8007442:	465b      	mov	r3, fp
 8007444:	4622      	mov	r2, r4
 8007446:	4629      	mov	r1, r5
 8007448:	4638      	mov	r0, r7
 800744a:	f7ff ff6b 	bl	8007324 <__ssputs_r>
 800744e:	3001      	adds	r0, #1
 8007450:	f000 80a7 	beq.w	80075a2 <_svfiprintf_r+0x1c6>
 8007454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007456:	445a      	add	r2, fp
 8007458:	9209      	str	r2, [sp, #36]	@ 0x24
 800745a:	f89a 3000 	ldrb.w	r3, [sl]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 809f 	beq.w	80075a2 <_svfiprintf_r+0x1c6>
 8007464:	2300      	movs	r3, #0
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800746e:	f10a 0a01 	add.w	sl, sl, #1
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9307      	str	r3, [sp, #28]
 8007476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800747a:	931a      	str	r3, [sp, #104]	@ 0x68
 800747c:	4654      	mov	r4, sl
 800747e:	2205      	movs	r2, #5
 8007480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007484:	484e      	ldr	r0, [pc, #312]	@ (80075c0 <_svfiprintf_r+0x1e4>)
 8007486:	f7f8 feab 	bl	80001e0 <memchr>
 800748a:	9a04      	ldr	r2, [sp, #16]
 800748c:	b9d8      	cbnz	r0, 80074c6 <_svfiprintf_r+0xea>
 800748e:	06d0      	lsls	r0, r2, #27
 8007490:	bf44      	itt	mi
 8007492:	2320      	movmi	r3, #32
 8007494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007498:	0711      	lsls	r1, r2, #28
 800749a:	bf44      	itt	mi
 800749c:	232b      	movmi	r3, #43	@ 0x2b
 800749e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074a2:	f89a 3000 	ldrb.w	r3, [sl]
 80074a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074a8:	d015      	beq.n	80074d6 <_svfiprintf_r+0xfa>
 80074aa:	9a07      	ldr	r2, [sp, #28]
 80074ac:	4654      	mov	r4, sl
 80074ae:	2000      	movs	r0, #0
 80074b0:	f04f 0c0a 	mov.w	ip, #10
 80074b4:	4621      	mov	r1, r4
 80074b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074ba:	3b30      	subs	r3, #48	@ 0x30
 80074bc:	2b09      	cmp	r3, #9
 80074be:	d94b      	bls.n	8007558 <_svfiprintf_r+0x17c>
 80074c0:	b1b0      	cbz	r0, 80074f0 <_svfiprintf_r+0x114>
 80074c2:	9207      	str	r2, [sp, #28]
 80074c4:	e014      	b.n	80074f0 <_svfiprintf_r+0x114>
 80074c6:	eba0 0308 	sub.w	r3, r0, r8
 80074ca:	fa09 f303 	lsl.w	r3, r9, r3
 80074ce:	4313      	orrs	r3, r2
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	46a2      	mov	sl, r4
 80074d4:	e7d2      	b.n	800747c <_svfiprintf_r+0xa0>
 80074d6:	9b03      	ldr	r3, [sp, #12]
 80074d8:	1d19      	adds	r1, r3, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	9103      	str	r1, [sp, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfbb      	ittet	lt
 80074e2:	425b      	neglt	r3, r3
 80074e4:	f042 0202 	orrlt.w	r2, r2, #2
 80074e8:	9307      	strge	r3, [sp, #28]
 80074ea:	9307      	strlt	r3, [sp, #28]
 80074ec:	bfb8      	it	lt
 80074ee:	9204      	strlt	r2, [sp, #16]
 80074f0:	7823      	ldrb	r3, [r4, #0]
 80074f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80074f4:	d10a      	bne.n	800750c <_svfiprintf_r+0x130>
 80074f6:	7863      	ldrb	r3, [r4, #1]
 80074f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074fa:	d132      	bne.n	8007562 <_svfiprintf_r+0x186>
 80074fc:	9b03      	ldr	r3, [sp, #12]
 80074fe:	1d1a      	adds	r2, r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	9203      	str	r2, [sp, #12]
 8007504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007508:	3402      	adds	r4, #2
 800750a:	9305      	str	r3, [sp, #20]
 800750c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075d0 <_svfiprintf_r+0x1f4>
 8007510:	7821      	ldrb	r1, [r4, #0]
 8007512:	2203      	movs	r2, #3
 8007514:	4650      	mov	r0, sl
 8007516:	f7f8 fe63 	bl	80001e0 <memchr>
 800751a:	b138      	cbz	r0, 800752c <_svfiprintf_r+0x150>
 800751c:	9b04      	ldr	r3, [sp, #16]
 800751e:	eba0 000a 	sub.w	r0, r0, sl
 8007522:	2240      	movs	r2, #64	@ 0x40
 8007524:	4082      	lsls	r2, r0
 8007526:	4313      	orrs	r3, r2
 8007528:	3401      	adds	r4, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007530:	4824      	ldr	r0, [pc, #144]	@ (80075c4 <_svfiprintf_r+0x1e8>)
 8007532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007536:	2206      	movs	r2, #6
 8007538:	f7f8 fe52 	bl	80001e0 <memchr>
 800753c:	2800      	cmp	r0, #0
 800753e:	d036      	beq.n	80075ae <_svfiprintf_r+0x1d2>
 8007540:	4b21      	ldr	r3, [pc, #132]	@ (80075c8 <_svfiprintf_r+0x1ec>)
 8007542:	bb1b      	cbnz	r3, 800758c <_svfiprintf_r+0x1b0>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3307      	adds	r3, #7
 8007548:	f023 0307 	bic.w	r3, r3, #7
 800754c:	3308      	adds	r3, #8
 800754e:	9303      	str	r3, [sp, #12]
 8007550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007552:	4433      	add	r3, r6
 8007554:	9309      	str	r3, [sp, #36]	@ 0x24
 8007556:	e76a      	b.n	800742e <_svfiprintf_r+0x52>
 8007558:	fb0c 3202 	mla	r2, ip, r2, r3
 800755c:	460c      	mov	r4, r1
 800755e:	2001      	movs	r0, #1
 8007560:	e7a8      	b.n	80074b4 <_svfiprintf_r+0xd8>
 8007562:	2300      	movs	r3, #0
 8007564:	3401      	adds	r4, #1
 8007566:	9305      	str	r3, [sp, #20]
 8007568:	4619      	mov	r1, r3
 800756a:	f04f 0c0a 	mov.w	ip, #10
 800756e:	4620      	mov	r0, r4
 8007570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007574:	3a30      	subs	r2, #48	@ 0x30
 8007576:	2a09      	cmp	r2, #9
 8007578:	d903      	bls.n	8007582 <_svfiprintf_r+0x1a6>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c6      	beq.n	800750c <_svfiprintf_r+0x130>
 800757e:	9105      	str	r1, [sp, #20]
 8007580:	e7c4      	b.n	800750c <_svfiprintf_r+0x130>
 8007582:	fb0c 2101 	mla	r1, ip, r1, r2
 8007586:	4604      	mov	r4, r0
 8007588:	2301      	movs	r3, #1
 800758a:	e7f0      	b.n	800756e <_svfiprintf_r+0x192>
 800758c:	ab03      	add	r3, sp, #12
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	462a      	mov	r2, r5
 8007592:	4b0e      	ldr	r3, [pc, #56]	@ (80075cc <_svfiprintf_r+0x1f0>)
 8007594:	a904      	add	r1, sp, #16
 8007596:	4638      	mov	r0, r7
 8007598:	f3af 8000 	nop.w
 800759c:	1c42      	adds	r2, r0, #1
 800759e:	4606      	mov	r6, r0
 80075a0:	d1d6      	bne.n	8007550 <_svfiprintf_r+0x174>
 80075a2:	89ab      	ldrh	r3, [r5, #12]
 80075a4:	065b      	lsls	r3, r3, #25
 80075a6:	f53f af2d 	bmi.w	8007404 <_svfiprintf_r+0x28>
 80075aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075ac:	e72c      	b.n	8007408 <_svfiprintf_r+0x2c>
 80075ae:	ab03      	add	r3, sp, #12
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	462a      	mov	r2, r5
 80075b4:	4b05      	ldr	r3, [pc, #20]	@ (80075cc <_svfiprintf_r+0x1f0>)
 80075b6:	a904      	add	r1, sp, #16
 80075b8:	4638      	mov	r0, r7
 80075ba:	f000 f879 	bl	80076b0 <_printf_i>
 80075be:	e7ed      	b.n	800759c <_svfiprintf_r+0x1c0>
 80075c0:	08034200 	.word	0x08034200
 80075c4:	0803420a 	.word	0x0803420a
 80075c8:	00000000 	.word	0x00000000
 80075cc:	08007325 	.word	0x08007325
 80075d0:	08034206 	.word	0x08034206

080075d4 <_printf_common>:
 80075d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	4616      	mov	r6, r2
 80075da:	4698      	mov	r8, r3
 80075dc:	688a      	ldr	r2, [r1, #8]
 80075de:	690b      	ldr	r3, [r1, #16]
 80075e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	bfb8      	it	lt
 80075e8:	4613      	movlt	r3, r2
 80075ea:	6033      	str	r3, [r6, #0]
 80075ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075f0:	4607      	mov	r7, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	b10a      	cbz	r2, 80075fa <_printf_common+0x26>
 80075f6:	3301      	adds	r3, #1
 80075f8:	6033      	str	r3, [r6, #0]
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	0699      	lsls	r1, r3, #26
 80075fe:	bf42      	ittt	mi
 8007600:	6833      	ldrmi	r3, [r6, #0]
 8007602:	3302      	addmi	r3, #2
 8007604:	6033      	strmi	r3, [r6, #0]
 8007606:	6825      	ldr	r5, [r4, #0]
 8007608:	f015 0506 	ands.w	r5, r5, #6
 800760c:	d106      	bne.n	800761c <_printf_common+0x48>
 800760e:	f104 0a19 	add.w	sl, r4, #25
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	6832      	ldr	r2, [r6, #0]
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	42ab      	cmp	r3, r5
 800761a:	dc26      	bgt.n	800766a <_printf_common+0x96>
 800761c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007620:	6822      	ldr	r2, [r4, #0]
 8007622:	3b00      	subs	r3, #0
 8007624:	bf18      	it	ne
 8007626:	2301      	movne	r3, #1
 8007628:	0692      	lsls	r2, r2, #26
 800762a:	d42b      	bmi.n	8007684 <_printf_common+0xb0>
 800762c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007630:	4641      	mov	r1, r8
 8007632:	4638      	mov	r0, r7
 8007634:	47c8      	blx	r9
 8007636:	3001      	adds	r0, #1
 8007638:	d01e      	beq.n	8007678 <_printf_common+0xa4>
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	6922      	ldr	r2, [r4, #16]
 800763e:	f003 0306 	and.w	r3, r3, #6
 8007642:	2b04      	cmp	r3, #4
 8007644:	bf02      	ittt	eq
 8007646:	68e5      	ldreq	r5, [r4, #12]
 8007648:	6833      	ldreq	r3, [r6, #0]
 800764a:	1aed      	subeq	r5, r5, r3
 800764c:	68a3      	ldr	r3, [r4, #8]
 800764e:	bf0c      	ite	eq
 8007650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007654:	2500      	movne	r5, #0
 8007656:	4293      	cmp	r3, r2
 8007658:	bfc4      	itt	gt
 800765a:	1a9b      	subgt	r3, r3, r2
 800765c:	18ed      	addgt	r5, r5, r3
 800765e:	2600      	movs	r6, #0
 8007660:	341a      	adds	r4, #26
 8007662:	42b5      	cmp	r5, r6
 8007664:	d11a      	bne.n	800769c <_printf_common+0xc8>
 8007666:	2000      	movs	r0, #0
 8007668:	e008      	b.n	800767c <_printf_common+0xa8>
 800766a:	2301      	movs	r3, #1
 800766c:	4652      	mov	r2, sl
 800766e:	4641      	mov	r1, r8
 8007670:	4638      	mov	r0, r7
 8007672:	47c8      	blx	r9
 8007674:	3001      	adds	r0, #1
 8007676:	d103      	bne.n	8007680 <_printf_common+0xac>
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	3501      	adds	r5, #1
 8007682:	e7c6      	b.n	8007612 <_printf_common+0x3e>
 8007684:	18e1      	adds	r1, r4, r3
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	2030      	movs	r0, #48	@ 0x30
 800768a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800768e:	4422      	add	r2, r4
 8007690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007698:	3302      	adds	r3, #2
 800769a:	e7c7      	b.n	800762c <_printf_common+0x58>
 800769c:	2301      	movs	r3, #1
 800769e:	4622      	mov	r2, r4
 80076a0:	4641      	mov	r1, r8
 80076a2:	4638      	mov	r0, r7
 80076a4:	47c8      	blx	r9
 80076a6:	3001      	adds	r0, #1
 80076a8:	d0e6      	beq.n	8007678 <_printf_common+0xa4>
 80076aa:	3601      	adds	r6, #1
 80076ac:	e7d9      	b.n	8007662 <_printf_common+0x8e>
	...

080076b0 <_printf_i>:
 80076b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	7e0f      	ldrb	r7, [r1, #24]
 80076b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076b8:	2f78      	cmp	r7, #120	@ 0x78
 80076ba:	4691      	mov	r9, r2
 80076bc:	4680      	mov	r8, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	469a      	mov	sl, r3
 80076c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076c6:	d807      	bhi.n	80076d8 <_printf_i+0x28>
 80076c8:	2f62      	cmp	r7, #98	@ 0x62
 80076ca:	d80a      	bhi.n	80076e2 <_printf_i+0x32>
 80076cc:	2f00      	cmp	r7, #0
 80076ce:	f000 80d2 	beq.w	8007876 <_printf_i+0x1c6>
 80076d2:	2f58      	cmp	r7, #88	@ 0x58
 80076d4:	f000 80b9 	beq.w	800784a <_printf_i+0x19a>
 80076d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076e0:	e03a      	b.n	8007758 <_printf_i+0xa8>
 80076e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076e6:	2b15      	cmp	r3, #21
 80076e8:	d8f6      	bhi.n	80076d8 <_printf_i+0x28>
 80076ea:	a101      	add	r1, pc, #4	@ (adr r1, 80076f0 <_printf_i+0x40>)
 80076ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076f0:	08007749 	.word	0x08007749
 80076f4:	0800775d 	.word	0x0800775d
 80076f8:	080076d9 	.word	0x080076d9
 80076fc:	080076d9 	.word	0x080076d9
 8007700:	080076d9 	.word	0x080076d9
 8007704:	080076d9 	.word	0x080076d9
 8007708:	0800775d 	.word	0x0800775d
 800770c:	080076d9 	.word	0x080076d9
 8007710:	080076d9 	.word	0x080076d9
 8007714:	080076d9 	.word	0x080076d9
 8007718:	080076d9 	.word	0x080076d9
 800771c:	0800785d 	.word	0x0800785d
 8007720:	08007787 	.word	0x08007787
 8007724:	08007817 	.word	0x08007817
 8007728:	080076d9 	.word	0x080076d9
 800772c:	080076d9 	.word	0x080076d9
 8007730:	0800787f 	.word	0x0800787f
 8007734:	080076d9 	.word	0x080076d9
 8007738:	08007787 	.word	0x08007787
 800773c:	080076d9 	.word	0x080076d9
 8007740:	080076d9 	.word	0x080076d9
 8007744:	0800781f 	.word	0x0800781f
 8007748:	6833      	ldr	r3, [r6, #0]
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6032      	str	r2, [r6, #0]
 8007750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007758:	2301      	movs	r3, #1
 800775a:	e09d      	b.n	8007898 <_printf_i+0x1e8>
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	6820      	ldr	r0, [r4, #0]
 8007760:	1d19      	adds	r1, r3, #4
 8007762:	6031      	str	r1, [r6, #0]
 8007764:	0606      	lsls	r6, r0, #24
 8007766:	d501      	bpl.n	800776c <_printf_i+0xbc>
 8007768:	681d      	ldr	r5, [r3, #0]
 800776a:	e003      	b.n	8007774 <_printf_i+0xc4>
 800776c:	0645      	lsls	r5, r0, #25
 800776e:	d5fb      	bpl.n	8007768 <_printf_i+0xb8>
 8007770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007774:	2d00      	cmp	r5, #0
 8007776:	da03      	bge.n	8007780 <_printf_i+0xd0>
 8007778:	232d      	movs	r3, #45	@ 0x2d
 800777a:	426d      	negs	r5, r5
 800777c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007780:	4859      	ldr	r0, [pc, #356]	@ (80078e8 <_printf_i+0x238>)
 8007782:	230a      	movs	r3, #10
 8007784:	e011      	b.n	80077aa <_printf_i+0xfa>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	0608      	lsls	r0, r1, #24
 800778c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007790:	d402      	bmi.n	8007798 <_printf_i+0xe8>
 8007792:	0649      	lsls	r1, r1, #25
 8007794:	bf48      	it	mi
 8007796:	b2ad      	uxthmi	r5, r5
 8007798:	2f6f      	cmp	r7, #111	@ 0x6f
 800779a:	4853      	ldr	r0, [pc, #332]	@ (80078e8 <_printf_i+0x238>)
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	bf14      	ite	ne
 80077a0:	230a      	movne	r3, #10
 80077a2:	2308      	moveq	r3, #8
 80077a4:	2100      	movs	r1, #0
 80077a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077aa:	6866      	ldr	r6, [r4, #4]
 80077ac:	60a6      	str	r6, [r4, #8]
 80077ae:	2e00      	cmp	r6, #0
 80077b0:	bfa2      	ittt	ge
 80077b2:	6821      	ldrge	r1, [r4, #0]
 80077b4:	f021 0104 	bicge.w	r1, r1, #4
 80077b8:	6021      	strge	r1, [r4, #0]
 80077ba:	b90d      	cbnz	r5, 80077c0 <_printf_i+0x110>
 80077bc:	2e00      	cmp	r6, #0
 80077be:	d04b      	beq.n	8007858 <_printf_i+0x1a8>
 80077c0:	4616      	mov	r6, r2
 80077c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80077c6:	fb03 5711 	mls	r7, r3, r1, r5
 80077ca:	5dc7      	ldrb	r7, [r0, r7]
 80077cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077d0:	462f      	mov	r7, r5
 80077d2:	42bb      	cmp	r3, r7
 80077d4:	460d      	mov	r5, r1
 80077d6:	d9f4      	bls.n	80077c2 <_printf_i+0x112>
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d10b      	bne.n	80077f4 <_printf_i+0x144>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	07df      	lsls	r7, r3, #31
 80077e0:	d508      	bpl.n	80077f4 <_printf_i+0x144>
 80077e2:	6923      	ldr	r3, [r4, #16]
 80077e4:	6861      	ldr	r1, [r4, #4]
 80077e6:	4299      	cmp	r1, r3
 80077e8:	bfde      	ittt	le
 80077ea:	2330      	movle	r3, #48	@ 0x30
 80077ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077f4:	1b92      	subs	r2, r2, r6
 80077f6:	6122      	str	r2, [r4, #16]
 80077f8:	f8cd a000 	str.w	sl, [sp]
 80077fc:	464b      	mov	r3, r9
 80077fe:	aa03      	add	r2, sp, #12
 8007800:	4621      	mov	r1, r4
 8007802:	4640      	mov	r0, r8
 8007804:	f7ff fee6 	bl	80075d4 <_printf_common>
 8007808:	3001      	adds	r0, #1
 800780a:	d14a      	bne.n	80078a2 <_printf_i+0x1f2>
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	b004      	add	sp, #16
 8007812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007816:	6823      	ldr	r3, [r4, #0]
 8007818:	f043 0320 	orr.w	r3, r3, #32
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	4833      	ldr	r0, [pc, #204]	@ (80078ec <_printf_i+0x23c>)
 8007820:	2778      	movs	r7, #120	@ 0x78
 8007822:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	6831      	ldr	r1, [r6, #0]
 800782a:	061f      	lsls	r7, r3, #24
 800782c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007830:	d402      	bmi.n	8007838 <_printf_i+0x188>
 8007832:	065f      	lsls	r7, r3, #25
 8007834:	bf48      	it	mi
 8007836:	b2ad      	uxthmi	r5, r5
 8007838:	6031      	str	r1, [r6, #0]
 800783a:	07d9      	lsls	r1, r3, #31
 800783c:	bf44      	itt	mi
 800783e:	f043 0320 	orrmi.w	r3, r3, #32
 8007842:	6023      	strmi	r3, [r4, #0]
 8007844:	b11d      	cbz	r5, 800784e <_printf_i+0x19e>
 8007846:	2310      	movs	r3, #16
 8007848:	e7ac      	b.n	80077a4 <_printf_i+0xf4>
 800784a:	4827      	ldr	r0, [pc, #156]	@ (80078e8 <_printf_i+0x238>)
 800784c:	e7e9      	b.n	8007822 <_printf_i+0x172>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f023 0320 	bic.w	r3, r3, #32
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	e7f6      	b.n	8007846 <_printf_i+0x196>
 8007858:	4616      	mov	r6, r2
 800785a:	e7bd      	b.n	80077d8 <_printf_i+0x128>
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	6825      	ldr	r5, [r4, #0]
 8007860:	6961      	ldr	r1, [r4, #20]
 8007862:	1d18      	adds	r0, r3, #4
 8007864:	6030      	str	r0, [r6, #0]
 8007866:	062e      	lsls	r6, r5, #24
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	d501      	bpl.n	8007870 <_printf_i+0x1c0>
 800786c:	6019      	str	r1, [r3, #0]
 800786e:	e002      	b.n	8007876 <_printf_i+0x1c6>
 8007870:	0668      	lsls	r0, r5, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0x1bc>
 8007874:	8019      	strh	r1, [r3, #0]
 8007876:	2300      	movs	r3, #0
 8007878:	6123      	str	r3, [r4, #16]
 800787a:	4616      	mov	r6, r2
 800787c:	e7bc      	b.n	80077f8 <_printf_i+0x148>
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	6032      	str	r2, [r6, #0]
 8007884:	681e      	ldr	r6, [r3, #0]
 8007886:	6862      	ldr	r2, [r4, #4]
 8007888:	2100      	movs	r1, #0
 800788a:	4630      	mov	r0, r6
 800788c:	f7f8 fca8 	bl	80001e0 <memchr>
 8007890:	b108      	cbz	r0, 8007896 <_printf_i+0x1e6>
 8007892:	1b80      	subs	r0, r0, r6
 8007894:	6060      	str	r0, [r4, #4]
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	2300      	movs	r3, #0
 800789c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a0:	e7aa      	b.n	80077f8 <_printf_i+0x148>
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	4632      	mov	r2, r6
 80078a6:	4649      	mov	r1, r9
 80078a8:	4640      	mov	r0, r8
 80078aa:	47d0      	blx	sl
 80078ac:	3001      	adds	r0, #1
 80078ae:	d0ad      	beq.n	800780c <_printf_i+0x15c>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	079b      	lsls	r3, r3, #30
 80078b4:	d413      	bmi.n	80078de <_printf_i+0x22e>
 80078b6:	68e0      	ldr	r0, [r4, #12]
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	4298      	cmp	r0, r3
 80078bc:	bfb8      	it	lt
 80078be:	4618      	movlt	r0, r3
 80078c0:	e7a6      	b.n	8007810 <_printf_i+0x160>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4632      	mov	r2, r6
 80078c6:	4649      	mov	r1, r9
 80078c8:	4640      	mov	r0, r8
 80078ca:	47d0      	blx	sl
 80078cc:	3001      	adds	r0, #1
 80078ce:	d09d      	beq.n	800780c <_printf_i+0x15c>
 80078d0:	3501      	adds	r5, #1
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	9903      	ldr	r1, [sp, #12]
 80078d6:	1a5b      	subs	r3, r3, r1
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dcf2      	bgt.n	80078c2 <_printf_i+0x212>
 80078dc:	e7eb      	b.n	80078b6 <_printf_i+0x206>
 80078de:	2500      	movs	r5, #0
 80078e0:	f104 0619 	add.w	r6, r4, #25
 80078e4:	e7f5      	b.n	80078d2 <_printf_i+0x222>
 80078e6:	bf00      	nop
 80078e8:	08034211 	.word	0x08034211
 80078ec:	08034222 	.word	0x08034222

080078f0 <_realloc_r>:
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4680      	mov	r8, r0
 80078f6:	4615      	mov	r5, r2
 80078f8:	460c      	mov	r4, r1
 80078fa:	b921      	cbnz	r1, 8007906 <_realloc_r+0x16>
 80078fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	4611      	mov	r1, r2
 8007902:	f7ff bb99 	b.w	8007038 <_malloc_r>
 8007906:	b92a      	cbnz	r2, 8007914 <_realloc_r+0x24>
 8007908:	f7ff fcc2 	bl	8007290 <_free_r>
 800790c:	2400      	movs	r4, #0
 800790e:	4620      	mov	r0, r4
 8007910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007914:	f000 f81a 	bl	800794c <_malloc_usable_size_r>
 8007918:	4285      	cmp	r5, r0
 800791a:	4606      	mov	r6, r0
 800791c:	d802      	bhi.n	8007924 <_realloc_r+0x34>
 800791e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007922:	d8f4      	bhi.n	800790e <_realloc_r+0x1e>
 8007924:	4629      	mov	r1, r5
 8007926:	4640      	mov	r0, r8
 8007928:	f7ff fb86 	bl	8007038 <_malloc_r>
 800792c:	4607      	mov	r7, r0
 800792e:	2800      	cmp	r0, #0
 8007930:	d0ec      	beq.n	800790c <_realloc_r+0x1c>
 8007932:	42b5      	cmp	r5, r6
 8007934:	462a      	mov	r2, r5
 8007936:	4621      	mov	r1, r4
 8007938:	bf28      	it	cs
 800793a:	4632      	movcs	r2, r6
 800793c:	f7ff fc9a 	bl	8007274 <memcpy>
 8007940:	4621      	mov	r1, r4
 8007942:	4640      	mov	r0, r8
 8007944:	f7ff fca4 	bl	8007290 <_free_r>
 8007948:	463c      	mov	r4, r7
 800794a:	e7e0      	b.n	800790e <_realloc_r+0x1e>

0800794c <_malloc_usable_size_r>:
 800794c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007950:	1f18      	subs	r0, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfbc      	itt	lt
 8007956:	580b      	ldrlt	r3, [r1, r0]
 8007958:	18c0      	addlt	r0, r0, r3
 800795a:	4770      	bx	lr

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
