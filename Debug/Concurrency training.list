
Concurrency training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ed34  0800743c  0800743c  0000843c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016170  08016170  00018080  2**0
                  CONTENTS
  4 .ARM          00000008  08016170  08016170  00017170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016178  08016178  00018080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016178  08016178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08016180  08016180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08016188  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c5b8  20000080  08016208  00018080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c638  08016208  00018638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc58  00000000  00000000  000180b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d3c  00000000  00000000  00035d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00039a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107a  00000000  00000000  0003af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d04d  00000000  00000000  0003c002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f15  00000000  00000000  0005904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a471a  00000000  00000000  00072f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011767e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c4  00000000  00000000  001176c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007424 	.word	0x08007424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08007424 	.word	0x08007424

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZNSt7__cxx119to_stringEm>:
  inline string
  to_string(unsigned long __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_LONG__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
    string __str(__detail::__to_chars_len(__val), '\0');
 80004e2:	210a      	movs	r1, #10
 80004e4:	6838      	ldr	r0, [r7, #0]
 80004e6:	f000 fa0f 	bl	8000908 <_ZNSt8__detail14__to_chars_lenImEEjT_i>
 80004ea:	4604      	mov	r4, r0
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4618      	mov	r0, r3
 80004f2:	f006 fc6f 	bl	8006dd4 <_ZNSaIcEC1Ev>
 80004f6:	f107 030c 	add.w	r3, r7, #12
 80004fa:	2200      	movs	r2, #0
 80004fc:	4621      	mov	r1, r4
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f006 fceb 	bl	8006eda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	4618      	mov	r0, r3
 800050a:	f006 fc64 	bl	8006dd6 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[0], __str.size(), __val);
 800050e:	2100      	movs	r1, #0
 8000510:	6878      	ldr	r0, [r7, #4]
 8000512:	f006 fd81 	bl	8007018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000516:	4604      	mov	r4, r0
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f006 fd3a 	bl	8006f92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800051e:	4603      	mov	r3, r0
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	4619      	mov	r1, r3
 8000524:	4620      	mov	r0, r4
 8000526:	f000 fa2f 	bl	8000988 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>
    return __str;
 800052a:	bf00      	nop
  }
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bd90      	pop	{r4, r7, pc}

08000534 <_ZN14QueueableClassC1Ev>:
//should have. It has to have methods for determining if its done executing.
//it should be done in a execute method.
 class QueueableClass{
 public:
	 //CONSTRUCTOR
	 QueueableClass(){
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <_ZN14QueueableClassC1Ev+0x28>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	601a      	str	r2, [r3, #0]
		 this -> state = QueueableReturnValue::DONE;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2200      	movs	r2, #0
 8000546:	721a      	strb	r2, [r3, #8]
		 this -> nextClass = nullptr;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
	 }
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	0801583c 	.word	0x0801583c

08000560 <_ZN14QueueableClassD1Ev>:

	 ~QueueableClass(){/*NOTHING TO SEE HERE*/ }
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	4a04      	ldr	r2, [pc, #16]	@ (800057c <_ZN14QueueableClassD1Ev+0x1c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	0801583c 	.word	0x0801583c

08000580 <_ZN14QueueableClass8getStateEv>:

	 virtual QueueableReturnValue getState(void)final{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
		 return this -> state;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7a1b      	ldrb	r3, [r3, #8]
	 }
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <_ZN14QueueableClass12setNextClassEPS_>:

	 virtual void setNextClass(QueueableClass* next)final{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	 	 this -> nextClass = next;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	605a      	str	r2, [r3, #4]
	 }
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <_ZN14QueueableClass12getNextClassEv>:

	 virtual QueueableClass* getNextClass(void) final{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
		 return this -> nextClass;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	685b      	ldr	r3, [r3, #4]
	 }
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_ZN14QueueableClass7requeueEv>:
	 //this method gives the object the ability to decide what to
	 //when the process tells it to requeue.
	 //THIS IS AN EXAMPLE OF WHAT TO DO, BUT YOU SHOULD SO WHAT SOUITS
	 //YOUR CODE BETTER. KEEP IN MIND THE INTEGRITY OF THE LINKED LIST!
	 virtual void requeue(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
		 setState(TODO);//in this case it restarts the buzzer timer.
 80005d4:	2101      	movs	r1, #1
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f000 f86a 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <_ZN14QueueableClass7enqueueEv>:

	 //WHAT DOES THE OBJECT DO WHEN IT GETS IN QUEUE?
	 //IN THIS IMPLEMENTATION, IT JUST CHANGES THE STATE, BUT
	 //YOU COULD REWRITE THIS TO FIT YOUR NEEDS
	 virtual void enqueue(){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
		 setState(TODO);
 80005ec:	2101      	movs	r1, #1
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f85e 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
	 }
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_ZN14QueueableClass7EXECUTEEv>:

	 //this method has to be implemented, but here is an example:
	 virtual void EXECUTE(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
		 static uint32_t prevTime = 0;
		 static uint32_t currentTime = 0;
		 uint32_t elapsedTime;
		 static uint8_t state = 0;

		 if(getState() == TODO){
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffbb 	bl	8000580 <_ZN14QueueableClass8getStateEv>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00b      	beq.n	8000632 <_ZN14QueueableClass7EXECUTEEv+0x36>
		 	state = 1;
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
		 	setState(DOING);
 8000620:	2102      	movs	r1, #2
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f844 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	prevTime = HAL_GetTick();//get the time when the change accurred
 8000628:	f001 fcf0 	bl	800200c <HAL_GetTick>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1d      	ldr	r2, [pc, #116]	@ (80006a4 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000630:	6013      	str	r3, [r2, #0]
		 }

		 if(state){//if the function is in the on state, turns the toPerform on;
 8000632:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d02d      	beq.n	8000696 <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   	GPIOB -> ODR |= GPIO_PIN_2;//SET BUZZER PIN;
 800063a:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	4a1a      	ldr	r2, [pc, #104]	@ (80006a8 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	6153      	str	r3, [r2, #20]
		   	//now we check if the delay time has elapsed.
		   	//first we acquire the current time
		  	currentTime = HAL_GetTick();
 8000646:	f001 fce1 	bl	800200c <HAL_GetTick>
 800064a:	4603      	mov	r3, r0
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800064e:	6013      	str	r3, [r2, #0]
		   	if (currentTime >= prevTime) {//making sure to account for roll over
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	429a      	cmp	r2, r3
 800065a:	d306      	bcc.n	800066a <_ZN14QueueableClass7EXECUTEEv+0x6e>
		   		elapsedTime = currentTime - prevTime;
 800065c:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e005      	b.n	8000676 <_ZN14QueueableClass7EXECUTEEv+0x7a>
		   	} else {
		   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 800066a:	4b10      	ldr	r3, [pc, #64]	@ (80006ac <_ZN14QueueableClass7EXECUTEEv+0xb0>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <_ZN14QueueableClass7EXECUTEEv+0xa8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	60fb      	str	r3, [r7, #12]
		   	}
		   	//if the time has run out, we turn the toPerform off
		   	if(elapsedTime >= delay){
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	2b0e      	cmp	r3, #14
 800067a:	d90c      	bls.n	8000696 <_ZN14QueueableClass7EXECUTEEv+0x9a>
		   		GPIOB -> ODR &= ~GPIO_PIN_2; //RESET BUZZER PIN;
 800067c:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a09      	ldr	r2, [pc, #36]	@ (80006a8 <_ZN14QueueableClass7EXECUTEEv+0xac>)
 8000682:	f023 0304 	bic.w	r3, r3, #4
 8000686:	6153      	str	r3, [r2, #20]
		   		state = 0;//we clear the state.
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <_ZN14QueueableClass7EXECUTEEv+0xa4>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 800068e:	2100      	movs	r1, #0
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f80d 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
		   	}
		   }
	 }
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000a4 	.word	0x200000a4
 80006a4:	2000009c 	.word	0x2000009c
 80006a8:	40020400 	.word	0x40020400
 80006ac:	200000a0 	.word	0x200000a0

080006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>:
 protected:
	 virtual void setState(QueueableReturnValue state)final{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	 	 		 this -> state = state;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	78fa      	ldrb	r2, [r7, #3]
 80006c0:	721a      	strb	r2, [r3, #8]
	 	 	 }
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <_ZN9flashOnce7EXECUTEEv>:
Frame_Builder FB;

//Extension of QueueableClass for demonstration purposes only. Must me done in other file.
class flashOnce: public QueueableClass{
public:
	void EXECUTE(void){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
			 static uint32_t prevTime = 0;
			 static uint32_t currentTime = 0;
			 uint32_t elapsedTime;
			 static uint8_t state = 0;

			 if(getState() == TODO){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff50 	bl	8000580 <_ZN14QueueableClass8getStateEv>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	bf0c      	ite	eq
 80006e6:	2301      	moveq	r3, #1
 80006e8:	2300      	movne	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00c      	beq.n	800070a <_ZN9flashOnce7EXECUTEEv+0x3a>
			 	state = 1;
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <_ZN9flashOnce7EXECUTEEv+0xac>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
			 	setState(DOING);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2102      	movs	r1, #2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ffd8 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	prevTime = HAL_GetTick();//get the time when the change accurred
 8000700:	f001 fc84 	bl	800200c <HAL_GetTick>
 8000704:	4603      	mov	r3, r0
 8000706:	4a1e      	ldr	r2, [pc, #120]	@ (8000780 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 8000708:	6013      	str	r3, [r2, #0]
			 }

			 if(state){//if the function is in the on state, turns the toPerform on;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <_ZN9flashOnce7EXECUTEEv+0xac>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d02f      	beq.n	8000772 <_ZN9flashOnce7EXECUTEEv+0xa2>
			   	GPIOA -> ODR |= GPIO_PIN_4;//SET BUZZER PIN;
 8000712:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000718:	f043 0310 	orr.w	r3, r3, #16
 800071c:	6153      	str	r3, [r2, #20]
			   	//now we check if the delay time has elapsed.
			   	//first we acquire the current time
			  	currentTime = HAL_GetTick();
 800071e:	f001 fc75 	bl	800200c <HAL_GetTick>
 8000722:	4603      	mov	r3, r0
 8000724:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000726:	6013      	str	r3, [r2, #0]
			   	if (currentTime >= prevTime) {//making sure to account for roll over
 8000728:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d306      	bcc.n	8000742 <_ZN9flashOnce7EXECUTEEv+0x72>
			   		elapsedTime = currentTime - prevTime;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e005      	b.n	800074e <_ZN9flashOnce7EXECUTEEv+0x7e>
			   	} else {
			   		elapsedTime = (UINT32_MAX - prevTime) + currentTime + 1;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <_ZN9flashOnce7EXECUTEEv+0xb8>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <_ZN9flashOnce7EXECUTEEv+0xb0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	60fb      	str	r3, [r7, #12]
			   	}
			   	//if the time has run out, we turn the toPerform off
			   	if(elapsedTime >= 1000){
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000754:	d30d      	bcc.n	8000772 <_ZN9flashOnce7EXECUTEEv+0xa2>
			   		GPIOA -> ODR &= ~GPIO_PIN_4; //RESET BUZZER PIN;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <_ZN9flashOnce7EXECUTEEv+0xb4>)
 800075c:	f023 0310 	bic.w	r3, r3, #16
 8000760:	6153      	str	r3, [r2, #20]
			   		state = 0;//we clear the state.
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <_ZN9flashOnce7EXECUTEEv+0xac>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
			   		setState(DONE);//WE SIGNAL IT ENDED EXECUTION;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff9f 	bl	80006b0 <_ZN14QueueableClass8setStateE20QueueableReturnValue>
			   	}
			   }
		 }
 8000772:	bf00      	nop
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200000c0 	.word	0x200000c0
 8000780:	200000b8 	.word	0x200000b8
 8000784:	40020000 	.word	0x40020000
 8000788:	200000bc 	.word	0x200000bc

0800078c <_ZN9flashOnceC1Ev>:
class flashOnce: public QueueableClass{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fecc 	bl	8000534 <_ZN14QueueableClassC1Ev>
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <_ZN9flashOnceC1Ev+0x20>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	08015818 	.word	0x08015818

080007b0 <_Z17beepActionWrapperv>:

flashOnce flashOnce;
Async_Event_Loop AsyncEventLoop;
	//TODO FIND A WAY TO SIMPLIFY THIS
	//IT NEEDS THIS WRAPPER TO CONFORM TO THE EXPECTED FUNCTION SIGNATURE
	void beepActionWrapper(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&beep);
 80007b4:	4902      	ldr	r1, [pc, #8]	@ (80007c0 <_Z17beepActionWrapperv+0x10>)
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <_Z17beepActionWrapperv+0x14>)
 80007b8:	f000 fec8 	bl	800154c <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000a8 	.word	0x200000a8
 80007c4:	200000d0 	.word	0x200000d0

080007c8 <ButtonEncoderWrapper>:
	void ButtonEncoderWrapper(){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
		AsyncEventLoop.enqueue(&flashOnce);
 80007cc:	4902      	ldr	r1, [pc, #8]	@ (80007d8 <ButtonEncoderWrapper+0x10>)
 80007ce:	4803      	ldr	r0, [pc, #12]	@ (80007dc <ButtonEncoderWrapper+0x14>)
 80007d0:	f000 febc 	bl	800154c <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>
	}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	200000d0 	.word	0x200000d0

080007e0 <_Z7MainCPPv>:
		-10,
		10,
		beepActionWrapper
		);
//CPP ENTRY POINT
void MainCPP(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09a      	sub	sp, #104	@ 0x68
 80007e4:	af06      	add	r7, sp, #24

	//SETUP START
	LCD_init();
 80007e6:	f001 fb63 	bl	8001eb0 <LCD_init>
	GPIOC -> ODR |= GPIO_PIN_13;//onboard blue led OFF
 80007ea:	4b32      	ldr	r3, [pc, #200]	@ (80008b4 <_Z7MainCPPv+0xd4>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	4a31      	ldr	r2, [pc, #196]	@ (80008b4 <_Z7MainCPPv+0xd4>)
 80007f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007f4:	6153      	str	r3, [r2, #20]
	//END SETUP

	//MAIN LOOP START
	while(1){
		uint32_t startTime = HAL_GetTick();
 80007f6:	f001 fc09 	bl	800200c <HAL_GetTick>
 80007fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		GPIOB -> ODR ^= GPIO_PIN_10;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <_Z7MainCPPv+0xd8>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	4a2d      	ldr	r2, [pc, #180]	@ (80008b8 <_Z7MainCPPv+0xd8>)
 8000802:	f483 6380 	eor.w	r3, r3, #1024	@ 0x400
 8000806:	6153      	str	r3, [r2, #20]
		FB.FB_Draw8bitTile(0,0, 240,main8bitsPalette, &LCD_DrawPixelFB, SKULL, 0x00, false);
 8000808:	2300      	movs	r3, #0
 800080a:	9304      	str	r3, [sp, #16]
 800080c:	2300      	movs	r3, #0
 800080e:	9303      	str	r3, [sp, #12]
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <_Z7MainCPPv+0xdc>)
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <_Z7MainCPPv+0xe0>)
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <_Z7MainCPPv+0xe4>)
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	23f0      	movs	r3, #240	@ 0xf0
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <_Z7MainCPPv+0xe8>)
 8000824:	f000 ffb2 	bl	800178c <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb>
		std::string str;
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f006 fb4e 	bl	8006ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
		uint32_t FPF = 1000/(HAL_GetTick()-startTime);
 8000830:	f001 fbec 	bl	800200c <HAL_GetTick>
 8000834:	4602      	mov	r2, r0
 8000836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	64bb      	str	r3, [r7, #72]	@ 0x48
		str = std::to_string(FPF) + " fps";
 8000844:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000848:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe44 	bl	80004d8 <_ZNSt7__cxx119to_stringEm>
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000858:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <_Z7MainCPPv+0xec>)
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f8ea 	bl	8000a34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8000860:	f107 0218 	add.w	r2, r7, #24
 8000864:	463b      	mov	r3, r7
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f006 fb64 	bl	8006f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4618      	mov	r0, r3
 8000874:	f006 fb59 	bl	8006f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000878:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800087c:	4618      	mov	r0, r3
 800087e:	f006 fb54 	bl	8006f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		LCD_PutStr(10, 15, &str[0], DEFAULT_FONT, 0x0000, 0xffff );
 8000882:	463b      	mov	r3, r7
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f006 fbc6 	bl	8007018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800088c:	4602      	mov	r2, r0
 800088e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <_Z7MainCPPv+0xf0>)
 800089a:	210f      	movs	r1, #15
 800089c:	200a      	movs	r0, #10
 800089e:	f001 fab5 	bl	8001e0c <LCD_PutStr>

		LCD_Update();
 80008a2:	f001 fae9 	bl	8001e78 <LCD_Update>
	}
 80008a6:	463b      	mov	r3, r7
 80008a8:	4618      	mov	r0, r3
 80008aa:	f006 fb3e 	bl	8006f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80008ae:	bf00      	nop
 80008b0:	e7a1      	b.n	80007f6 <_Z7MainCPPv+0x16>
 80008b2:	bf00      	nop
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	08007644 	.word	0x08007644
 80008c0:	08001dad 	.word	0x08001dad
 80008c4:	08007444 	.word	0x08007444
 80008c8:	200000b4 	.word	0x200000b4
 80008cc:	0800743c 	.word	0x0800743c
 80008d0:	08015918 	.word	0x08015918

080008d4 <EVENT_LOOP_WRAPPER>:
/*********************************************************/
/*               AWAYS LEAVE IT FOR LAST                 */
/*********************************************************/
extern "C"//TODO FIND A WAY TO SIMPLIFY THIS
{
	void EVENT_LOOP_WRAPPER(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
		AsyncEventLoop.ASYNC_LOOP();
 80008d8:	4802      	ldr	r0, [pc, #8]	@ (80008e4 <EVENT_LOOP_WRAPPER+0x10>)
 80008da:	f000 fed7 	bl	800168c <_ZN16Async_Event_Loop10ASYNC_LOOPEv>
	}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000d0 	.word	0x200000d0

080008e8 <RotaryEncoderWrapper>:
	void RotaryEncoderWrapper(){//TODO This needs to be done here
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
		encoder.handleInterrupt();
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <RotaryEncoderWrapper+0x10>)
 80008ee:	f001 f823 	bl	8001938 <_ZN6KY_04015handleInterruptEv>
	}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000e0 	.word	0x200000e0

080008fc <MainC>:
	void MainC(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
		MainCPP();
 8000900:	f7ff ff6e 	bl	80007e0 <_Z7MainCPPv>
	}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <_ZNSt8__detail14__to_chars_lenImEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	fb03 f303 	mul.w	r3, r3, r3
 800091c:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	429a      	cmp	r2, r3
 8000938:	d201      	bcs.n	800093e <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x36>
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	e01d      	b.n	800097a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	429a      	cmp	r2, r3
 8000944:	d202      	bcs.n	800094c <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x44>
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	e016      	b.n	800097a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d202      	bcs.n	800095a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x52>
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	3302      	adds	r3, #2
 8000958:	e00f      	b.n	800097a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	429a      	cmp	r2, r3
 8000960:	d202      	bcs.n	8000968 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x60>
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	3303      	adds	r3, #3
 8000966:	e008      	b.n	800097a <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x72>
	  __value /= __b4;
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000970:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3304      	adds	r3, #4
 8000976:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8000978:	e7db      	b.n	8000932 <_ZNSt8__detail14__to_chars_lenImEEjT_i+0x2a>
	}
    }
 800097a:	4618      	mov	r0, r3
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
	...

08000988 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	3b01      	subs	r3, #1
 8000998:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 800099a:	e024      	b.n	80009e6 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa4>)
 80009a0:	fba3 1302 	umull	r1, r3, r3, r2
 80009a4:	095b      	lsrs	r3, r3, #5
 80009a6:	2164      	movs	r1, #100	@ 0x64
 80009a8:	fb01 f303 	mul.w	r3, r1, r3
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a2c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa4>)
 80009b6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ba:	095b      	lsrs	r3, r3, #5
 80009bc:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	68f9      	ldr	r1, [r7, #12]
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	440b      	add	r3, r1
 80009c8:	4919      	ldr	r1, [pc, #100]	@ (8000a30 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80009ca:	5c8a      	ldrb	r2, [r1, r2]
 80009cc:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4413      	add	r3, r2
 80009d6:	4916      	ldr	r1, [pc, #88]	@ (8000a30 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	440a      	add	r2, r1
 80009dc:	7812      	ldrb	r2, [r2, #0]
 80009de:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	3b02      	subs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b63      	cmp	r3, #99	@ 0x63
 80009ea:	d8d7      	bhi.n	800099c <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x14>
	}
      if (__val >= 10)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b09      	cmp	r3, #9
 80009f0:	d910      	bls.n	8000a14 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	490b      	ldr	r1, [pc, #44]	@ (8000a30 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 8000a02:	5c8a      	ldrb	r2, [r1, r2]
 8000a04:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0xa8>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8000a12:	e005      	b.n	8000a20 <_ZNSt8__detail18__to_chars_10_implImEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3330      	adds	r3, #48	@ 0x30
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	701a      	strb	r2, [r3, #0]
    }
 8000a20:	bf00      	nop
 8000a22:	3724      	adds	r7, #36	@ 0x24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	51eb851f 	.word	0x51eb851f
 8000a30:	08015744 	.word	0x08015744

08000a34 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	68b8      	ldr	r0, [r7, #8]
 8000a44:	f006 fb10 	bl	8007068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f809 	bl	8000a62 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4619      	mov	r1, r3
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f006 fa49 	bl	8006eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_ZN9flashOnceD1Ev>:
class flashOnce: public QueueableClass{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <_ZN9flashOnceD1Ev+0x20>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fd69 	bl	8000560 <_ZN14QueueableClassD1Ev>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	08015818 	.word	0x08015818

08000a9c <_Z41__static_initialization_and_destruction_0ii>:
}
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af06      	add	r7, sp, #24
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d121      	bne.n	8000af0 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d11c      	bne.n	8000af0 <_Z41__static_initialization_and_destruction_0ii+0x54>
QueueableClass beep;
 8000ab6:	481c      	ldr	r0, [pc, #112]	@ (8000b28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000ab8:	f7ff fd3c 	bl	8000534 <_ZN14QueueableClassC1Ev>
Frame_Builder FB;
 8000abc:	481b      	ldr	r0, [pc, #108]	@ (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000abe:	f000 fe35 	bl	800172c <_ZN13Frame_BuilderC1Ev>
flashOnce flashOnce;
 8000ac2:	481b      	ldr	r0, [pc, #108]	@ (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000ac4:	f7ff fe62 	bl	800078c <_ZN9flashOnceC1Ev>
Async_Event_Loop AsyncEventLoop;
 8000ac8:	481a      	ldr	r0, [pc, #104]	@ (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000aca:	f000 fcb7 	bl	800143c <_ZN16Async_Event_LoopC1Ev>
		);
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9304      	str	r3, [sp, #16]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8000ad4:	9303      	str	r3, [sp, #12]
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	9302      	str	r3, [sp, #8]
 8000ada:	f06f 0309 	mvn.w	r3, #9
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4914      	ldr	r1, [pc, #80]	@ (8000b3c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000aea:	4815      	ldr	r0, [pc, #84]	@ (8000b40 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000aec:	f000 fec6 	bl	800187c <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>
KY_040 encoder(
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d113      	bne.n	8000b1e <_Z41__static_initialization_and_destruction_0ii+0x82>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d10e      	bne.n	8000b1e <_Z41__static_initialization_and_destruction_0ii+0x82>
 8000b00:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000b02:	f000 fef9 	bl	80018f8 <_ZN6KY_040D1Ev>
Async_Event_Loop AsyncEventLoop;
 8000b06:	480b      	ldr	r0, [pc, #44]	@ (8000b34 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8000b08:	f000 fcb2 	bl	8001470 <_ZN16Async_Event_LoopD1Ev>
flashOnce flashOnce;
 8000b0c:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8000b0e:	f7ff ffb3 	bl	8000a78 <_ZN9flashOnceD1Ev>
Frame_Builder FB;
 8000b12:	4806      	ldr	r0, [pc, #24]	@ (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8000b14:	f000 fe1a 	bl	800174c <_ZN13Frame_BuilderD1Ev>
QueueableClass beep;
 8000b18:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8000b1a:	f7ff fd21 	bl	8000560 <_ZN14QueueableClassD1Ev>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	200000b4 	.word	0x200000b4
 8000b30:	200000c4 	.word	0x200000c4
 8000b34:	200000d0 	.word	0x200000d0
 8000b38:	080007b1 	.word	0x080007b1
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	200000e0 	.word	0x200000e0

08000b44 <_GLOBAL__sub_I_beep>:
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff ffa5 	bl	8000a9c <_Z41__static_initialization_and_destruction_0ii>
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_GLOBAL__sub_D_beep>:
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff9d 	bl	8000a9c <_Z41__static_initialization_and_destruction_0ii>
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b68:	f001 f9ea 	bl	8001f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6c:	f000 f814 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b70:	f000 f920 	bl	8000db4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b74:	f000 f8fe 	bl	8000d74 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b78:	f000 f876 	bl	8000c68 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b7c:	f000 f8d0 	bl	8000d20 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 8000b80:	f000 f8aa 	bl	8000cd8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //Start Event Loop Timer (TIM11)

  HAL_TIM_Base_Start_IT(&htim11);
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <main+0x30>)
 8000b86:	f003 fa1d 	bl	8003fc4 <HAL_TIM_Base_Start_IT>


  /*************  CPP Entry point  ****************/
  MainC();
 8000b8a:	f7ff feb7 	bl	80008fc <MainC>
  /************************************************/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b8e:	bf00      	nop
 8000b90:	e7fd      	b.n	8000b8e <main+0x2a>
 8000b92:	bf00      	nop
 8000b94:	200001c0 	.word	0x200001c0

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	@ 0x50
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	2230      	movs	r2, #48	@ 0x30
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fb5c 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <SystemClock_Config+0xc8>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	4a26      	ldr	r2, [pc, #152]	@ (8000c60 <SystemClock_Config+0xc8>)
 8000bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <SystemClock_Config+0xc8>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a20      	ldr	r2, [pc, #128]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000be2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c00:	2302      	movs	r3, #2
 8000c02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c08:	2310      	movs	r3, #16
 8000c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000c0c:	23c8      	movs	r3, #200	@ 0xc8
 8000c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c14:	2304      	movs	r3, #4
 8000c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 f92f 	bl	8002e80 <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c28:	f000 f9da 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2103      	movs	r1, #3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fb91 	bl	8003370 <HAL_RCC_ClockConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c54:	f000 f9c4 	bl	8000fe0 <Error_Handler>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	3750      	adds	r7, #80	@ 0x50
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c6e:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <MX_SPI1_Init+0x6c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c72:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_SPI1_Init+0x68>)
 8000cbc:	f002 fd38 	bl	8003730 <HAL_SPI_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000cc6:	f000 f98b 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000108 	.word	0x20000108
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000cde:	4a0f      	ldr	r2, [pc, #60]	@ (8000d1c <MX_TIM11_Init+0x44>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000ce4:	2263      	movs	r2, #99	@ 0x63
 8000ce6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000cf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_TIM11_Init+0x40>)
 8000d04:	f003 f90e 	bl	8003f24 <HAL_TIM_Base_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000d0e:	f000 f967 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200001c0 	.word	0x200001c0
 8000d1c:	40014800 	.word	0x40014800

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <MX_USART1_UART_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USART1_UART_Init+0x4c>)
 8000d58:	f003 fb7e 	bl	8004458 <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 f93d 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000208 	.word	0x20000208
 8000d70:	40011000 	.word	0x40011000

08000d74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000db0 <MX_DMA_Init+0x3c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <MX_DMA_Init+0x3c>)
 8000d84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_DMA_Init+0x3c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	203a      	movs	r0, #58	@ 0x3a
 8000d9c:	f001 fa65 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000da0:	203a      	movs	r0, #58	@ 0x3a
 8000da2:	f001 fa7e 	bl	80022a2 <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b5c      	ldr	r3, [pc, #368]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b59      	ldr	r3, [pc, #356]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b55      	ldr	r3, [pc, #340]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a54      	ldr	r2, [pc, #336]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b52      	ldr	r3, [pc, #328]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b4e      	ldr	r3, [pc, #312]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b4b      	ldr	r3, [pc, #300]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	4b47      	ldr	r3, [pc, #284]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a46      	ldr	r2, [pc, #280]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <MX_GPIO_Init+0x18c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e40:	4840      	ldr	r0, [pc, #256]	@ (8000f44 <MX_GPIO_Init+0x190>)
 8000e42:	f001 ffeb 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2118      	movs	r1, #24
 8000e4a:	483f      	ldr	r0, [pc, #252]	@ (8000f48 <MX_GPIO_Init+0x194>)
 8000e4c:	f001 ffe6 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f240 4107 	movw	r1, #1031	@ 0x407
 8000e56:	483d      	ldr	r0, [pc, #244]	@ (8000f4c <MX_GPIO_Init+0x198>)
 8000e58:	f001 ffe0 	bl	8002e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4833      	ldr	r0, [pc, #204]	@ (8000f44 <MX_GPIO_Init+0x190>)
 8000e76:	f001 fe4d 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	482e      	ldr	r0, [pc, #184]	@ (8000f48 <MX_GPIO_Init+0x194>)
 8000e90:	f001 fe40 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : DT_ROTARY_Pin CLK_ROTARY_Pin */
  GPIO_InitStruct.Pin = DT_ROTARY_Pin|CLK_ROTARY_Pin;
 8000e94:	2306      	movs	r3, #6
 8000e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e98:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4827      	ldr	r0, [pc, #156]	@ (8000f48 <MX_GPIO_Init+0x194>)
 8000eaa:	f001 fe33 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin;
 8000eae:	2318      	movs	r3, #24
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4820      	ldr	r0, [pc, #128]	@ (8000f48 <MX_GPIO_Init+0x194>)
 8000ec6:	f001 fe25 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin BUZZER_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin|BUZZER_Pin|ERROR_LED_Pin;
 8000eca:	f240 4307 	movw	r3, #1031	@ 0x407
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481a      	ldr	r0, [pc, #104]	@ (8000f4c <MX_GPIO_Init+0x198>)
 8000ee4:	f001 fe16 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : B6_SCL_Pin B7_SDA_Pin */
  GPIO_InitStruct.Pin = B6_SCL_Pin|B7_SDA_Pin;
 8000ee8:	23c0      	movs	r3, #192	@ 0xc0
 8000eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eec:	2312      	movs	r3, #18
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <MX_GPIO_Init+0x198>)
 8000f04:	f001 fe06 	bl	8002b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2006      	movs	r0, #6
 8000f0e:	f001 f9ac 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f12:	2006      	movs	r0, #6
 8000f14:	f001 f9c5 	bl	80022a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f001 f9a4 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f22:	2007      	movs	r0, #7
 8000f24:	f001 f9bd 	bl	80022a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2008      	movs	r0, #8
 8000f2e:	f001 f99c 	bl	800226a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f32:	2008      	movs	r0, #8
 8000f34:	f001 f9b5 	bl	80022a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	@ 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020000 	.word	0x40020000
 8000f4c:	40020400 	.word	0x40020400

08000f50 <HAL_GPIO_EXTI_Callback>:
/******         EXTI CALLBACK          ******/
/********************************************/
//    This wrapper needs to be placed in here
/********************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	//DESABLE THE ASYNC LOOP WHILE HANDLING PIN INTERRUPTS
	HAL_TIM_Base_Stop_IT(&htim11);
 8000f5a:	480b      	ldr	r0, [pc, #44]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f5c:	f003 f894 	bl	8004088 <HAL_TIM_Base_Stop_IT>
	if((GPIO_Pin == GPIO_PIN_1) || (GPIO_Pin == GPIO_PIN_2)){
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d002      	beq.n	8000f6c <HAL_GPIO_EXTI_Callback+0x1c>
 8000f66:	88fb      	ldrh	r3, [r7, #6]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_EXTI_Callback+0x20>
		RotaryEncoderWrapper();//performs the rotary decoding logic here
 8000f6c:	f7ff fcbc 	bl	80008e8 <RotaryEncoderWrapper>
	}
	if(GPIO_Pin == GPIO_PIN_0){
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_EXTI_Callback+0x2a>
		ButtonEncoderWrapper();
 8000f76:	f7ff fc27 	bl	80007c8 <ButtonEncoderWrapper>
	}
	//ENABLE THE ASYNC LOOP AFTER PIN INTERRUPTS ARE DECODED
	HAL_TIM_Base_Start_IT(&htim11);
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <HAL_GPIO_EXTI_Callback+0x38>)
 8000f7c:	f003 f822 	bl	8003fc4 <HAL_TIM_Base_Start_IT>

	}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200001c0 	.word	0x200001c0

08000f8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	GPIOC->ODR &= ~GPIO_PIN_13; // SET BLUE led
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f9e:	6153      	str	r3, [r2, #20]
	//DISABLE PIN INTERRUPTS WHILE EXECUTING THE LOOP
	HAL_NVIC_DisableIRQ	(EXTI0_IRQn);
 8000fa0:	2006      	movs	r0, #6
 8000fa2:	f001 f98c 	bl	80022be <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI1_IRQn);
 8000fa6:	2007      	movs	r0, #7
 8000fa8:	f001 f989 	bl	80022be <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ	(EXTI2_IRQn);
 8000fac:	2008      	movs	r0, #8
 8000fae:	f001 f986 	bl	80022be <HAL_NVIC_DisableIRQ>
	//EXECUTE THE LOOP
	EVENT_LOOP_WRAPPER();
 8000fb2:	f7ff fc8f 	bl	80008d4 <EVENT_LOOP_WRAPPER>
	//ENABLE PIN INTERRUPTS AFTER THE LOOP EXECUTED
	HAL_NVIC_EnableIRQ	(EXTI0_IRQn);
 8000fb6:	2006      	movs	r0, #6
 8000fb8:	f001 f973 	bl	80022a2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI1_IRQn);
 8000fbc:	2007      	movs	r0, #7
 8000fbe:	f001 f970 	bl	80022a2 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ	(EXTI2_IRQn);
 8000fc2:	2008      	movs	r0, #8
 8000fc4:	f001 f96d 	bl	80022a2 <HAL_NVIC_EnableIRQ>
	GPIOC->ODR |= GPIO_PIN_13; // RESET BLUE led
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	4a03      	ldr	r2, [pc, #12]	@ (8000fdc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd2:	6153      	str	r3, [r2, #20]
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe6:	b672      	cpsid	i
}
 8000fe8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  GPIOC -> ODR ^= GPIO_PIN_13;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <Error_Handler+0x30>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <Error_Handler+0x30>)
 8000ff0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000ff4:	6153      	str	r3, [r2, #20]
	  for(uint32_t _ = 0; _ < 50000000; _++){
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	e003      	b.n	8001004 <Error_Handler+0x24>
		  __NOP();
 8000ffc:	bf00      	nop
	  for(uint32_t _ = 0; _ < 50000000; _++){
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <Error_Handler+0x34>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d9f7      	bls.n	8000ffc <Error_Handler+0x1c>
	  GPIOC -> ODR ^= GPIO_PIN_13;
 800100c:	e7ed      	b.n	8000fea <Error_Handler+0xa>
 800100e:	bf00      	nop
 8001010:	40020800 	.word	0x40020800
 8001014:	02faf07f 	.word	0x02faf07f

08001018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a0f      	ldr	r2, [pc, #60]	@ (8001064 <HAL_MspInit+0x4c>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b0d      	ldr	r3, [pc, #52]	@ (8001064 <HAL_MspInit+0x4c>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x4c>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	@ 0x40
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x4c>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	@ 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a30      	ldr	r2, [pc, #192]	@ (8001148 <HAL_SPI_MspInit+0xe0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d159      	bne.n	800113e <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001092:	4a2e      	ldr	r2, [pc, #184]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 8001094:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001098:	6453      	str	r3, [r2, #68]	@ 0x44
 800109a:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a27      	ldr	r2, [pc, #156]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_SPI_MspInit+0xe4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010d2:	2305      	movs	r3, #5
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	481c      	ldr	r0, [pc, #112]	@ (8001150 <HAL_SPI_MspInit+0xe8>)
 80010de:	f001 fd19 	bl	8002b14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 80010e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001158 <HAL_SPI_MspInit+0xf0>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 80010ea:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010ee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010f0:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 80010f2:	2240      	movs	r2, #64	@ 0x40
 80010f4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 80010fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001102:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001110:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111c:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001122:	480c      	ldr	r0, [pc, #48]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 8001124:	f001 f8e6 	bl	80022f4 <HAL_DMA_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 800112e:	f7ff ff57 	bl	8000fe0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 8001136:	649a      	str	r2, [r3, #72]	@ 0x48
 8001138:	4a06      	ldr	r2, [pc, #24]	@ (8001154 <HAL_SPI_MspInit+0xec>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40013000 	.word	0x40013000
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000
 8001154:	20000160 	.word	0x20000160
 8001158:	40026440 	.word	0x40026440

0800115c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_TIM_Base_MspInit+0x48>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d115      	bne.n	800119a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a0c      	ldr	r2, [pc, #48]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_TIM_Base_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	201a      	movs	r0, #26
 8001190:	f001 f86b 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001194:	201a      	movs	r0, #26
 8001196:	f001 f884 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40014800 	.word	0x40014800
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	@ 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <HAL_UART_MspInit+0x94>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d134      	bne.n	8001238 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_UART_MspInit+0x98>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001206:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001218:	2307      	movs	r3, #7
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <HAL_UART_MspInit+0x9c>)
 8001224:	f001 fc76 	bl	8002b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2025      	movs	r0, #37	@ 0x25
 800122e:	f001 f81c 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001232:	2025      	movs	r0, #37	@ 0x25
 8001234:	f001 f835 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40011000 	.word	0x40011000
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 fe9f 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}

080012aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 fdce 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_ROTARY_Pin);
 80012bc:	2002      	movs	r0, #2
 80012be:	f001 fdc7 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_ROTARY_Pin);
 80012ca:	2004      	movs	r0, #4
 80012cc:	f001 fdc0 	bl	8002e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80012d8:	4802      	ldr	r0, [pc, #8]	@ (80012e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80012da:	f002 ff04 	bl	80040e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001c0 	.word	0x200001c0

080012e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ec:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <USART1_IRQHandler+0x10>)
 80012ee:	f003 f903 	bl	80044f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000208 	.word	0x20000208

080012fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <DMA2_Stream2_IRQHandler+0x10>)
 8001302:	f001 f98f 	bl	8002624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000160 	.word	0x20000160

08001310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_kill>:

int _kill(int pid, int sig)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132a:	f005 fff7 	bl	800731c <__errno>
 800132e:	4603      	mov	r3, r0
 8001330:	2216      	movs	r2, #22
 8001332:	601a      	str	r2, [r3, #0]
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_exit>:

void _exit (int status)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001348:	f04f 31ff 	mov.w	r1, #4294967295
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ffe7 	bl	8001320 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001352:	bf00      	nop
 8001354:	e7fd      	b.n	8001352 <_exit+0x12>
	...

08001358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001360:	4a14      	ldr	r2, [pc, #80]	@ (80013b4 <_sbrk+0x5c>)
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <_sbrk+0x60>)
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d102      	bne.n	800137a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001374:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <_sbrk+0x64>)
 8001376:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <_sbrk+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001388:	f005 ffc8 	bl	800731c <__errno>
 800138c:	4603      	mov	r3, r0
 800138e:	220c      	movs	r2, #12
 8001390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	e009      	b.n	80013ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001398:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <_sbrk+0x64>)
 80013a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20020000 	.word	0x20020000
 80013b8:	00000400 	.word	0x00000400
 80013bc:	20000250 	.word	0x20000250
 80013c0:	2001c638 	.word	0x2001c638

080013c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <SystemInit+0x20>)
 80013ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ce:	4a05      	ldr	r2, [pc, #20]	@ (80013e4 <SystemInit+0x20>)
 80013d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001420 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ec:	f7ff ffea 	bl	80013c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013f2:	490d      	ldr	r1, [pc, #52]	@ (8001428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f4:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f8:	e002      	b.n	8001400 <LoopCopyDataInit>

080013fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fe:	3304      	adds	r3, #4

08001400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001404:	d3f9      	bcc.n	80013fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001406:	4a0a      	ldr	r2, [pc, #40]	@ (8001430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001408:	4c0a      	ldr	r4, [pc, #40]	@ (8001434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800140c:	e001      	b.n	8001412 <LoopFillZerobss>

0800140e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001410:	3204      	adds	r2, #4

08001412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001414:	d3fb      	bcc.n	800140e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001416:	f005 ff87 	bl	8007328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800141a:	f7ff fba3 	bl	8000b64 <main>
  bx  lr    
 800141e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001428:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800142c:	08016188 	.word	0x08016188
  ldr r2, =_sbss
 8001430:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001434:	2001c638 	.word	0x2001c638

08001438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001438:	e7fe      	b.n	8001438 <ADC_IRQHandler>
	...

0800143c <_ZN16Async_Event_LoopC1Ev>:
 */

#include "../Async_Event_Loop/AsyncEventLoop.hpp"
#include "Types.hpp"

Async_Event_Loop::Async_Event_Loop() :
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
    beginning(nullptr),
    previous(nullptr),
    end(nullptr) {
 8001444:	4a09      	ldr	r2, [pc, #36]	@ (800146c <_ZN16Async_Event_LoopC1Ev+0x30>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
    beginning(nullptr),
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
    previous(nullptr),
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
    end(nullptr) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
}
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	08015878 	.word	0x08015878

08001470 <_ZN16Async_Event_LoopD1Ev>:

Async_Event_Loop::~Async_Event_Loop() {
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	4a04      	ldr	r2, [pc, #16]	@ (800148c <_ZN16Async_Event_LoopD1Ev+0x1c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
    // Clean up any dynamically allocated resources if needed
}
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	08015878 	.word	0x08015878

08001490 <_ZN16Async_Event_LoopD0Ev>:
Async_Event_Loop::~Async_Event_Loop() {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
}
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe9 	bl	8001470 <_ZN16Async_Event_LoopD1Ev>
 800149e:	2110      	movs	r1, #16
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f005 fc95 	bl	8006dd0 <_ZdlPvj>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>:

void Async_Event_Loop::setBeginning(QueueableClass* beginning) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
    this->beginning = beginning;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	605a      	str	r2, [r3, #4]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <_ZN16Async_Event_Loop12getBeginningEv>:

QueueableClass* Async_Event_Loop::getBeginning() {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    return this->beginning;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>:

void Async_Event_Loop::setPrevious(QueueableClass* previous) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
    this->previous = previous;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	609a      	str	r2, [r3, #8]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN16Async_Event_Loop11getPreviousEv>:

QueueableClass* Async_Event_Loop::getPrevious() {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    return this->previous;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>:

void Async_Event_Loop::setEnd(QueueableClass* end) {
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    this->end = end;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	60da      	str	r2, [r3, #12]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_ZN16Async_Event_Loop6getEndEv>:

QueueableClass* Async_Event_Loop::getEnd() {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    return this->end;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZN16Async_Event_Loop7enqueueEP14QueueableClass>:

void Async_Event_Loop::enqueue(QueueableClass* next) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
    if (next->getState() == DONE) {
 8001556:	6838      	ldr	r0, [r7, #0]
 8001558:	f7ff f812 	bl	8000580 <_ZN14QueueableClass8getStateEv>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d036      	beq.n	80015da <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x8e>
        if (getEnd() == nullptr) {
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe1 	bl	8001534 <_ZN16Async_Event_Loop6getEndEv>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00c      	beq.n	800159c <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x50>
            // Queue is empty, add the first item
            setBeginning(next);
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff93 	bl	80014b0 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
            setPrevious(next);
 800158a:	6839      	ldr	r1, [r7, #0]
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffa9 	bl	80014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffbf 	bl	8001518 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 800159a:	e013      	b.n	80015c4 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x78>
        } else {
            // Queue is not empty, add to the end
            getEnd()->setNextClass(next);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ffc9 	bl	8001534 <_ZN16Async_Event_Loop6getEndEv>
 80015a2:	4603      	mov	r3, r0
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fff6 	bl	8000598 <_ZN14QueueableClass12setNextClassEPS_>
            setPrevious(getEnd());
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffc1 	bl	8001534 <_ZN16Async_Event_Loop6getEndEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff94 	bl	80014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
            setEnd(next);
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffaa 	bl	8001518 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        }
        next->enqueue(); // Signal the object it's enqueued
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3310      	adds	r3, #16
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6838      	ldr	r0, [r7, #0]
 80015ce:	4798      	blx	r3
        next->setNextClass(nullptr); // Ensure new end points to null
 80015d0:	2100      	movs	r1, #0
 80015d2:	6838      	ldr	r0, [r7, #0]
 80015d4:	f7fe ffe0 	bl	8000598 <_ZN14QueueableClass12setNextClassEPS_>
    } else {
        next->requeue(); // Object is not done, requeue it
    }
}
 80015d8:	e005      	b.n	80015e6 <_ZN16Async_Event_Loop7enqueueEP14QueueableClass+0x9a>
        next->requeue(); // Object is not done, requeue it
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	330c      	adds	r3, #12
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6838      	ldr	r0, [r7, #0]
 80015e4:	4798      	blx	r3
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>:

void Async_Event_Loop::dequeue(QueueableClass* current) {
 80015ee:	b590      	push	{r4, r7, lr}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
    if (getBeginning() == current && getEnd() == current) {
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff67 	bl	80014cc <_ZN16Async_Event_Loop12getBeginningEv>
 80015fe:	4602      	mov	r2, r0
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4293      	cmp	r3, r2
 8001604:	d108      	bne.n	8001618 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff94 	bl	8001534 <_ZN16Async_Event_Loop6getEndEv>
 800160c:	4602      	mov	r2, r0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2a>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x2c>
 8001618:	2300      	movs	r3, #0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x4a>
        // Only one item in the queue
        setBeginning(nullptr);
 800161e:	2100      	movs	r1, #0
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff45 	bl	80014b0 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
        setPrevious(nullptr);
 8001626:	2100      	movs	r1, #0
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff5b 	bl	80014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
        setEnd(nullptr);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff71 	bl	8001518 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
 8001636:	e020      	b.n	800167a <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else if (getBeginning() == current) {
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff ff47 	bl	80014cc <_ZN16Async_Event_Loop12getBeginningEv>
 800163e:	4602      	mov	r2, r0
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4293      	cmp	r3, r2
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x74>
        // Dequeuing the first item
        setBeginning(current->getNextClass());
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7fe ffaf 	bl	80005b4 <_ZN14QueueableClass12getNextClassEv>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff28 	bl	80014b0 <_ZN16Async_Event_Loop12setBeginningEP14QueueableClass>
 8001660:	e00b      	b.n	800167a <_ZN16Async_Event_Loop7dequeueEP14QueueableClass+0x8c>
    } else {
        // Dequeuing an item in the middle or end
        getPrevious()->setNextClass(current->getNextClass());
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff4c 	bl	8001500 <_ZN16Async_Event_Loop11getPreviousEv>
 8001668:	4604      	mov	r4, r0
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f7fe ffa2 	bl	80005b4 <_ZN14QueueableClass12getNextClassEv>
 8001670:	4603      	mov	r3, r0
 8001672:	4619      	mov	r1, r3
 8001674:	4620      	mov	r0, r4
 8001676:	f7fe ff8f 	bl	8000598 <_ZN14QueueableClass12setNextClassEPS_>
    }
    current->setNextClass(nullptr); // Ensure dequeued object points to nothing
 800167a:	2100      	movs	r1, #0
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f7fe ff8b 	bl	8000598 <_ZN14QueueableClass12setNextClassEPS_>
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bd90      	pop	{r4, r7, pc}
	...

0800168c <_ZN16Async_Event_Loop10ASYNC_LOOPEv>:

void Async_Event_Loop::ASYNC_LOOP() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    QueueableClass* current = getBeginning();
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff19 	bl	80014cc <_ZN16Async_Event_Loop12getBeginningEv>
 800169a:	6178      	str	r0, [r7, #20]
    QueueableClass* next = nullptr;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]

    if (current != nullptr) { // IF THERE IS A QUEUE AT ALL
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d036      	beq.n	8001714 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x88>
        // Resetting for test purposes
        GPIOA->ODR &= ~GPIO_PIN_3; // Reset green led
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 80016ac:	f023 0308 	bic.w	r3, r3, #8
 80016b0:	6153      	str	r3, [r2, #20]

        do {

            uint8_t currentClassState = current->getState();
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7fe ff64 	bl	8000580 <_ZN14QueueableClass8getStateEv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]
            next = current->getNextClass(); // Save next pointer before any potential dequeue
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7fe ff79 	bl	80005b4 <_ZN14QueueableClass12getNextClassEv>
 80016c2:	6138      	str	r0, [r7, #16]
            // Update pointers for next iteration
            if (currentClassState == DONE) {
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d104      	bne.n	80016d4 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x48>
                dequeue(current); // Dequeue the object if it's done
 80016ca:	6979      	ldr	r1, [r7, #20]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff8e 	bl	80015ee <_ZN16Async_Event_Loop7dequeueEP14QueueableClass>
 80016d2:	e009      	b.n	80016e8 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x5c>
            } else {
                current->EXECUTE(); // Execute the object if it's not done
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3314      	adds	r3, #20
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6978      	ldr	r0, [r7, #20]
 80016de:	4798      	blx	r3
                setPrevious(current);
 80016e0:	6979      	ldr	r1, [r7, #20]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fefe 	bl	80014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>
}

            current = next; // Move to the next item in the queue
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	617b      	str	r3, [r7, #20]

        } while (current != nullptr);
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1df      	bne.n	80016b2 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x26>
        // After the loop, update end pointer
        setEnd(getPrevious());
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ff04 	bl	8001500 <_ZN16Async_Event_Loop11getPreviousEv>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff0b 	bl	8001518 <_ZN16Async_Event_Loop6setEndEP14QueueableClass>
        // Reset previous pointer to beginning (if needed)
        setPrevious(getBeginning());
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fee2 	bl	80014cc <_ZN16Async_Event_Loop12getBeginningEv>
 8001708:	4603      	mov	r3, r0
 800170a:	4619      	mov	r1, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff fee9 	bl	80014e4 <_ZN16Async_Event_Loop11setPreviousEP14QueueableClass>

    } else {
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
    }
}
 8001712:	e005      	b.n	8001720 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x94>
        GPIOA->ODR |= GPIO_PIN_3; // Set green led (no queue case)
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4a03      	ldr	r2, [pc, #12]	@ (8001728 <_ZN16Async_Event_Loop10ASYNC_LOOPEv+0x9c>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6153      	str	r3, [r2, #20]
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020000 	.word	0x40020000

0800172c <_ZN13Frame_BuilderC1Ev>:
#include "Assets.hpp"
#include <cmath>
using namespace std;
//////////////////////////////////////////////////////

Frame_Builder::Frame_Builder() {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <_ZN13Frame_BuilderC1Ev+0x1c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	080158ac 	.word	0x080158ac

0800174c <_ZN13Frame_BuilderD1Ev>:

Frame_Builder::~Frame_Builder() {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	4a04      	ldr	r2, [pc, #16]	@ (8001768 <_ZN13Frame_BuilderD1Ev+0x1c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	080158ac 	.word	0x080158ac

0800176c <_ZN13Frame_BuilderD0Ev>:
Frame_Builder::~Frame_Builder() {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
}
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ffe9 	bl	800174c <_ZN13Frame_BuilderD1Ev>
 800177a:	2104      	movs	r1, #4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fb27 	bl	8006dd0 <_ZdlPvj>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb>:
								void (*func)(UG_S16, UG_S16, UG_COLOR),
								const uint8_t tile[],
								uint8_t transColor,
								bool setTrans
								)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	4608      	mov	r0, r1
 8001796:	4611      	mov	r1, r2
 8001798:	461a      	mov	r2, r3
 800179a:	4603      	mov	r3, r0
 800179c:	70fb      	strb	r3, [r7, #3]
 800179e:	460b      	mov	r3, r1
 80017a0:	70bb      	strb	r3, [r7, #2]
 80017a2:	4613      	mov	r3, r2
 80017a4:	803b      	strh	r3, [r7, #0]

	// check if the tile is a perfect square and if its not empty
	if (tileSide == 0.0f) return;
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	ee07 3a90 	vmov	s15, r3
 80017ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d05b      	beq.n	8001872 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xe6>


	 for(uint16_t Y = 0; Y < (uint16_t)tileSide; Y++){
 80017ba:	2300      	movs	r3, #0
 80017bc:	82fb      	strh	r3, [r7, #22]
 80017be:	e053      	b.n	8001868 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xdc>
		 for(uint16_t X = 0; X < (uint16_t)tileSide; X++){
 80017c0:	2300      	movs	r3, #0
 80017c2:	82bb      	strh	r3, [r7, #20]
 80017c4:	e049      	b.n	800185a <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xce>
			 uint16_t position = X+Y*tileSide;
 80017c6:	8afa      	ldrh	r2, [r7, #22]
 80017c8:	883b      	ldrh	r3, [r7, #0]
 80017ca:	fb12 f303 	smulbb	r3, r2, r3
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	8abb      	ldrh	r3, [r7, #20]
 80017d2:	4413      	add	r3, r2
 80017d4:	827b      	strh	r3, [r7, #18]
			 uint8_t color = tile[position];
 80017d6:	8a7b      	ldrh	r3, [r7, #18]
 80017d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	747b      	strb	r3, [r7, #17]
			 if(setTrans){
 80017e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01d      	beq.n	8001824 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0x98>
				 if(color != transColor){
 80017e8:	7c7a      	ldrb	r2, [r7, #17]
 80017ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d030      	beq.n	8001854 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xc8>
					 uint8_t pixel16bits = tile[position];
 80017f2:	8a7b      	ldrh	r3, [r7, #18]
 80017f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	73fb      	strb	r3, [r7, #15]
				 	 func(X + x, Y + y, palette[pixel16bits]);
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	8abb      	ldrh	r3, [r7, #20]
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	b218      	sxth	r0, r3
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	b29a      	uxth	r2, r3
 800180c:	8afb      	ldrh	r3, [r7, #22]
 800180e:	4413      	add	r3, r2
 8001810:	b29b      	uxth	r3, r3
 8001812:	b219      	sxth	r1, r3
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	6a3a      	ldr	r2, [r7, #32]
 800181a:	4413      	add	r3, r2
 800181c:	881a      	ldrh	r2, [r3, #0]
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	4798      	blx	r3
 8001822:	e017      	b.n	8001854 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xc8>
			     }
			 }else{
				 uint8_t pixel16bits = tile[position];
 8001824:	8a7b      	ldrh	r3, [r7, #18]
 8001826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001828:	4413      	add	r3, r2
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	743b      	strb	r3, [r7, #16]
				 func(X + x, Y + y, palette[pixel16bits]);
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	b29a      	uxth	r2, r3
 8001832:	8abb      	ldrh	r3, [r7, #20]
 8001834:	4413      	add	r3, r2
 8001836:	b29b      	uxth	r3, r3
 8001838:	b218      	sxth	r0, r3
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	b29a      	uxth	r2, r3
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	4413      	add	r3, r2
 8001842:	b29b      	uxth	r3, r3
 8001844:	b219      	sxth	r1, r3
 8001846:	7c3b      	ldrb	r3, [r7, #16]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	4413      	add	r3, r2
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	4798      	blx	r3
		 for(uint16_t X = 0; X < (uint16_t)tileSide; X++){
 8001854:	8abb      	ldrh	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	82bb      	strh	r3, [r7, #20]
 800185a:	8aba      	ldrh	r2, [r7, #20]
 800185c:	883b      	ldrh	r3, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3b1      	bcc.n	80017c6 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0x3a>
	 for(uint16_t Y = 0; Y < (uint16_t)tileSide; Y++){
 8001862:	8afb      	ldrh	r3, [r7, #22]
 8001864:	3301      	adds	r3, #1
 8001866:	82fb      	strh	r3, [r7, #22]
 8001868:	8afa      	ldrh	r2, [r7, #22]
 800186a:	883b      	ldrh	r3, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d3a7      	bcc.n	80017c0 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0x34>
 8001870:	e000      	b.n	8001874 <_ZN13Frame_Builder15FB_Draw8bitTileEhhtPKtPFvsstEPKhhb+0xe8>
	if (tileSide == 0.0f) return;
 8001872:	bf00      	nop
			 }
		 }
 	 }
 }
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb>:
 */
#include <cstdint>
#include "KY040.hpp"
#include "types.hpp"

KY_040::KY_040(
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
		bool perform
		)
: CLKPort(CLKPort),
  CLKPin(CLKPin),
  DTPort(DTPort),
  DTPin(DTPin)
 800188c:	4a19      	ldr	r2, [pc, #100]	@ (80018f4 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x78>)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	601a      	str	r2, [r3, #0]
: CLKPort(CLKPort),
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	68ba      	ldr	r2, [r7, #8]
 8001896:	605a      	str	r2, [r3, #4]
  CLKPin(CLKPin),
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	811a      	strh	r2, [r3, #8]
  DTPort(DTPort),
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	60da      	str	r2, [r3, #12]
  DTPin(DTPin)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8b3a      	ldrh	r2, [r7, #24]
 80018a8:	821a      	strh	r2, [r3, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
   {

	if(maxValue > minValue){//ensure that the min and max values are setup right;
 80018b0:	6a3a      	ldr	r2, [r7, #32]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	dd06      	ble.n	80018c6 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x4a>
	    if (minValue < INT32_MIN) {
	        this->minValue = INT32_MIN;  // Set minValue to INT32_MIN if it's too low
	    } else if (minValue > INT32_MAX) {
	        this->minValue = INT32_MAX;  // Set minValue to INT32_MAX if it's too high
	    } else {
	        this->minValue = minValue;   // Otherwise, use the provided minValue
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	61da      	str	r2, [r3, #28]
	    if (maxValue < INT32_MIN) {
	        this->maxValue = INT32_MIN;  // Set maxValue to INT32_MIN if it's too low
	    } else if (maxValue > INT32_MAX) {
	        this->maxValue = INT32_MAX;  // Set maxValue to INT32_MAX if it's too high
	    } else {
	        this->maxValue = maxValue;   // Otherwise, use the provided maxValue
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6a3a      	ldr	r2, [r7, #32]
 80018c2:	621a      	str	r2, [r3, #32]
 80018c4:	e007      	b.n	80018d6 <_ZN6KY_040C1EP12GPIO_TypeDeftS1_tllPFvvEb+0x5a>
	    }
	}else{//if min >= max, than defaults to int32 bounds.
		this -> minValue = INT32_MIN;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018cc:	61da      	str	r2, [r3, #28]
		this -> maxValue = INT32_MAX;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80018d4:	621a      	str	r2, [r3, #32]
	}

	this -> perform = perform;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018dc:	761a      	strb	r2, [r3, #24]
	this -> toPerform = toPerform;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e2:	615a      	str	r2, [r3, #20]
}
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	080158bc 	.word	0x080158bc

080018f8 <_ZN6KY_040D1Ev>:

KY_040::~KY_040(void) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <_ZN6KY_040D1Ev+0x1c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]

}
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	080158bc 	.word	0x080158bc

08001918 <_ZN6KY_040D0Ev>:
KY_040::~KY_040(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
}
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe9 	bl	80018f8 <_ZN6KY_040D1Ev>
 8001926:	2128      	movs	r1, #40	@ 0x28
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f005 fa51 	bl	8006dd0 <_ZdlPvj>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN6KY_04015handleInterruptEv>:

void KY_040::resetSteps(void){
	this -> Steps = 0;
}

void KY_040::handleInterrupt(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	static uint8_t lrmem = 3;
	static int lrsum = 0;

	int8_t 	CLK, DT;

	CLK = (this-> CLKPort -> IDR & this -> CLKPin)? 1 : 0;//Reads the CLK pin from the encoder
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	8912      	ldrh	r2, [r2, #8]
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_ZN6KY_04015handleInterruptEv+0x1c>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <_ZN6KY_04015handleInterruptEv+0x1e>
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
	DT = (this -> DTPort -> IDR & this -> DTPin)? 1 : 0;//Reads the DT pin from the encoder
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	8a12      	ldrh	r2, [r2, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <_ZN6KY_04015handleInterruptEv+0x34>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <_ZN6KY_04015handleInterruptEv+0x36>
 800196c:	2300      	movs	r3, #0
 800196e:	73bb      	strb	r3, [r7, #14]


	lrmem = ((lrmem & 0x03) << 2) + 2*CLK + DT;
 8001970:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	b2da      	uxtb	r2, r3
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	b2da      	uxtb	r2, r3
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	4413      	add	r3, r2
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001990:	701a      	strb	r2, [r3, #0]
	lrsum = lrsum + TRANS[lrmem];
 8001992:	4b2b      	ldr	r3, [pc, #172]	@ (8001a40 <_ZN6KY_04015handleInterruptEv+0x108>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <_ZN6KY_04015handleInterruptEv+0x10c>)
 800199a:	569b      	ldrsb	r3, [r3, r2]
 800199c:	461a      	mov	r2, r3
 800199e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019a6:	6013      	str	r3, [r2, #0]

    /* encoder not in the neutral state */
	if(lrsum % 4 != 0){
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <_ZN6KY_04015handleInterruptEv+0x80>
		__NOP();
 80019b4:	bf00      	nop
		return;
 80019b6:	e03f      	b.n	8001a38 <_ZN6KY_04015handleInterruptEv+0x100>
	}
	/* encoder in the neutral state */
	switch(lrsum){
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f113 0f04 	cmn.w	r3, #4
 80019c0:	d01a      	beq.n	80019f8 <_ZN6KY_04015handleInterruptEv+0xc0>
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d131      	bne.n	8001a2a <_ZN6KY_04015handleInterruptEv+0xf2>
	case 4:
		lrsum=0;
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps + 1 > this -> maxValue? this -> maxValue : this -> Steps + 1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	db02      	blt.n	80019de <_ZN6KY_04015handleInterruptEv+0xa6>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	e002      	b.n	80019e4 <_ZN6KY_04015handleInterruptEv+0xac>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e2:	3301      	adds	r3, #1
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <_ZN6KY_04015handleInterruptEv+0xfa>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4798      	blx	r3
		break;
 80019f6:	e01c      	b.n	8001a32 <_ZN6KY_04015handleInterruptEv+0xfa>
	case -4:
		lrsum=0;
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
		this -> Steps = this -> Steps - 1 < this -> minValue? this -> minValue : this -> Steps - 1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	dc02      	bgt.n	8001a10 <_ZN6KY_04015handleInterruptEv+0xd8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	e002      	b.n	8001a16 <_ZN6KY_04015handleInterruptEv+0xde>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	3b01      	subs	r3, #1
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6253      	str	r3, [r2, #36]	@ 0x24
		if(perform) this -> toPerform();
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	7e1b      	ldrb	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <_ZN6KY_04015handleInterruptEv+0xfe>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4798      	blx	r3
		break;
 8001a28:	e005      	b.n	8001a36 <_ZN6KY_04015handleInterruptEv+0xfe>
	default:
		lrsum=0;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <_ZN6KY_04015handleInterruptEv+0x110>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
		//showDirection(0);
		break;
 8001a30:	e002      	b.n	8001a38 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <_ZN6KY_04015handleInterruptEv+0x100>
		break;
 8001a36:	bf00      	nop
	}
}
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000014 	.word	0x20000014
 8001a44:	20000004 	.word	0x20000004
 8001a48:	20000254 	.word	0x20000254

08001a4c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8001a56:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac0 <setSPI_Size+0x74>)
 8001a58:	f993 3000 	ldrsb.w	r3, [r3]
 8001a5c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d026      	beq.n	8001ab2 <setSPI_Size+0x66>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a72:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8001a74:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <setSPI_Size+0x74>)
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d10c      	bne.n	8001a9c <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a88:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a98:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8001a9a:	e00a      	b.n	8001ab2 <setSPI_Size+0x66>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <setSPI_Size+0x78>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8001aa2:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <setSPI_Size+0x78>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <setSPI_Size+0x78>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000018 	.word	0x20000018
 8001ac4:	20000108 	.word	0x20000108

08001ac8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001ad8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ffb5 	bl	8001a4c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <setDMAMemMode+0x110>)
 8001ae4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	79bb      	ldrb	r3, [r7, #6]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <setDMAMemMode+0x36>
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <setDMAMemMode+0x110>)
 8001af2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001af6:	461a      	mov	r2, r3
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d067      	beq.n	8001bce <setDMAMemMode+0x106>
    config.dma_sz =size;
 8001afe:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <setDMAMemMode+0x110>)
 8001b04:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8001b06:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001b0a:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <setDMAMemMode+0x110>)
 8001b0c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8001b0e:	4b33      	ldr	r3, [pc, #204]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b22:	bf00      	nop
 8001b24:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f7      	bne.n	8001b24 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d10f      	bne.n	8001b5a <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b42:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	4b23      	ldr	r3, [pc, #140]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e00d      	b.n	8001b76 <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8001b5a:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b74:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d116      	bne.n	8001baa <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b84:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b8e:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <setDMAMemMode+0x114>)
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 5220 	orr.w	r2, r2, #10240	@ 0x2800
 8001ba6:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8001ba8:	e011      	b.n	8001bce <setDMAMemMode+0x106>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <setDMAMemMode+0x114>)
 8001bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <setDMAMemMode+0x114>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <setDMAMemMode+0x114>)
 8001bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <setDMAMemMode+0x114>)
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000018 	.word	0x20000018
 8001bdc:	20000108 	.word	0x20000108

08001be0 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ff2d 	bl	8001a4c <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <LCD_WriteCommand+0x50>)
 8001bf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bf8:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	2201      	movs	r2, #1
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <LCD_WriteCommand+0x54>)
 8001c04:	f001 fe1d 	bl	8003842 <HAL_SPI_Transmit>
  if(argc){
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <LCD_WriteCommand+0x46>
    LCD_PIN(LCD_DC,SET);
 8001c0e:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <LCD_WriteCommand+0x50>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1c59      	adds	r1, r3, #1
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	4804      	ldr	r0, [pc, #16]	@ (8001c34 <LCD_WriteCommand+0x54>)
 8001c22:	f001 fe0e 	bl	8003842 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020400 	.word	0x40020400
 8001c34:	20000108 	.word	0x20000108

08001c38 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8001c42:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <LCD_WriteData+0xb8>)
 8001c44:	2202      	movs	r2, #2
 8001c46:	619a      	str	r2, [r3, #24]
  LCD_PIN(LCD_CS,RESET);
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001c48:	e049      	b.n	8001cde <LCD_WriteData+0xa6>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf28      	it	cs
 8001c54:	4613      	movcs	r3, r2
 8001c56:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b40      	cmp	r3, #64	@ 0x40
 8001c5c:	d924      	bls.n	8001ca8 <LCD_WriteData+0x70>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4823      	ldr	r0, [pc, #140]	@ (8001cf4 <LCD_WriteData+0xbc>)
 8001c66:	f001 ff2f 	bl	8003ac8 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8001c6a:	bf00      	nop
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <LCD_WriteData+0xbc>)
 8001c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fe61 	bl	8002938 <HAL_DMA_GetState>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d1f7      	bne.n	8001c6c <LCD_WriteData+0x34>
      if(config.dma_mem_inc==mem_increase){
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <LCD_WriteData+0xc0>)
 8001c7e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d127      	bne.n	8001cd6 <LCD_WriteData+0x9e>
        if(config.dma_sz==mode_16bit)
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <LCD_WriteData+0xc0>)
 8001c88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d104      	bne.n	8001c9a <LCD_WriteData+0x62>
          buff += chunk_size;
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	e01d      	b.n	8001cd6 <LCD_WriteData+0x9e>
        else
          buff += chunk_size*2;
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	e016      	b.n	8001cd6 <LCD_WriteData+0x9e>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001ca8:	89fa      	ldrh	r2, [r7, #14]
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4810      	ldr	r0, [pc, #64]	@ (8001cf4 <LCD_WriteData+0xbc>)
 8001cb2:	f001 fdc6 	bl	8003842 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <LCD_WriteData+0xc0>)
 8001cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d104      	bne.n	8001cca <LCD_WriteData+0x92>
        buff += chunk_size;
 8001cc0:	89fb      	ldrh	r3, [r7, #14]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	e005      	b.n	8001cd6 <LCD_WriteData+0x9e>
      else
        buff += chunk_size*2;
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	461a      	mov	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1b2      	bne.n	8001c4a <LCD_WriteData+0x12>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	20000108 	.word	0x20000108
 8001cf8:	20000018 	.word	0x20000018

08001cfc <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b08b      	sub	sp, #44	@ 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4604      	mov	r4, r0
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4623      	mov	r3, r4
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80bb      	strh	r3, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]
 8001d16:	4613      	mov	r3, r2
 8001d18:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d1e:	887b      	ldrh	r3, [r7, #2]
 8001d20:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001d26:	883b      	ldrh	r3, [r7, #0]
 8001d28:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001d2a:	232a      	movs	r3, #42	@ 0x2a
 8001d2c:	763b      	strb	r3, [r7, #24]
 8001d2e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001d32:	121b      	asrs	r3, r3, #8
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	767b      	strb	r3, [r7, #25]
 8001d3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	76bb      	strb	r3, [r7, #26]
 8001d40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d44:	121b      	asrs	r3, r3, #8
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	76fb      	strb	r3, [r7, #27]
 8001d4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001d52:	f107 0318 	add.w	r3, r7, #24
 8001d56:	2104      	movs	r1, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff41 	bl	8001be0 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001d5e:	232b      	movs	r3, #43	@ 0x2b
 8001d60:	743b      	strb	r3, [r7, #16]
 8001d62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001d66:	121b      	asrs	r3, r3, #8
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	747b      	strb	r3, [r7, #17]
 8001d6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	74bb      	strb	r3, [r7, #18]
 8001d74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001d78:	121b      	asrs	r3, r3, #8
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	74fb      	strb	r3, [r7, #19]
 8001d80:	8c3b      	ldrh	r3, [r7, #32]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff27 	bl	8001be0 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001d92:	232c      	movs	r3, #44	@ 0x2c
 8001d94:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff1f 	bl	8001be0 <LCD_WriteCommand>
  }
}
 8001da2:	bf00      	nop
 8001da4:	372c      	adds	r7, #44	@ 0x2c
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
	...

08001dac <LCD_DrawPixelFB>:
#endif
}

#ifdef LCD_LOCAL_FB
void LCD_DrawPixelFB(int16_t x, int16_t y, uint16_t color)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
 8001db6:	460b      	mov	r3, r1
 8001db8:	80bb      	strh	r3, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x >= LCD_WIDTH) ||
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db19      	blt.n	8001dfa <LCD_DrawPixelFB+0x4e>
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2bef      	cmp	r3, #239	@ 0xef
 8001dcc:	dc15      	bgt.n	8001dfa <LCD_DrawPixelFB+0x4e>
 8001dce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	db11      	blt.n	8001dfa <LCD_DrawPixelFB+0x4e>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 8001dd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dda:	2bef      	cmp	r3, #239	@ 0xef
 8001ddc:	dc0d      	bgt.n	8001dfa <LCD_DrawPixelFB+0x4e>

  fb[x+(y*LCD_WIDTH)] = color;
 8001dde:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001de2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	1a9b      	subs	r3, r3, r2
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	4905      	ldr	r1, [pc, #20]	@ (8001e08 <LCD_DrawPixelFB+0x5c>)
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001df8:	e000      	b.n	8001dfc <LCD_DrawPixelFB+0x50>
     (y < 0) || (y >= LCD_HEIGHT)) return;
 8001dfa:	bf00      	nop
}
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20000258 	.word	0x20000258

08001e0c <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60ba      	str	r2, [r7, #8]
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4603      	mov	r3, r0
 8001e18:	81fb      	strh	r3, [r7, #14]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f003 faea 	bl	80053f8 <UG_FontSelect>
  UG_SetForecolor(color);
 8001e24:	8b3b      	ldrh	r3, [r7, #24]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fd04 	bl	8005834 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001e2c:	8bbb      	ldrh	r3, [r7, #28]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd12 	bl	8005858 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e38:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fc60 	bl	8005704 <UG_PutString>
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <LCD_setPower+0x14>
 8001e5c:	2329      	movs	r3, #41	@ 0x29
 8001e5e:	e000      	b.n	8001e62 <LCD_setPower+0x16>
 8001e60:	2328      	movs	r3, #40	@ 0x28
 8001e62:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff feb8 	bl	8001be0 <LCD_WriteCommand>
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <LCD_Update>:

void LCD_Update(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
#ifdef LCD_LOCAL_FB
  setSPI_Size(mode_8bit);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fde5 	bl	8001a4c <setSPI_Size>
  LCD_SetAddressWindow(0,0,LCD_WIDTH-1,LCD_HEIGHT-1);
 8001e82:	23ef      	movs	r3, #239	@ 0xef
 8001e84:	22ef      	movs	r2, #239	@ 0xef
 8001e86:	2100      	movs	r1, #0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff ff37 	bl	8001cfc <LCD_SetAddressWindow>
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fe19 	bl	8001ac8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
 8001e96:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8001e9a:	4804      	ldr	r0, [pc, #16]	@ (8001eac <LCD_Update+0x34>)
 8001e9c:	f7ff fecc 	bl	8001c38 <LCD_WriteData>
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7ff fe10 	bl	8001ac8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000258 	.word	0x20000258

08001eb0 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f30 <LCD_init+0x80>)
 8001eb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ebc:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f000 f8b0 	bl	8002024 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <LCD_init+0x80>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001eca:	20c8      	movs	r0, #200	@ 0xc8
 8001ecc:	f000 f8aa 	bl	8002024 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001ed0:	4918      	ldr	r1, [pc, #96]	@ (8001f34 <LCD_init+0x84>)
 8001ed2:	4819      	ldr	r0, [pc, #100]	@ (8001f38 <LCD_init+0x88>)
 8001ed4:	f003 f9f6 	bl	80052c4 <UG_Init>
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
#endif
  UG_FontSetHSpace(0);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f003 fccf 	bl	800587c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f003 fce0 	bl	80058a4 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	80fb      	strh	r3, [r7, #6]
 8001ee8:	e013      	b.n	8001f12 <LCD_init+0x62>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <LCD_init+0x8c>)
 8001ef0:	441a      	add	r2, r3
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4911      	ldr	r1, [pc, #68]	@ (8001f3c <LCD_init+0x8c>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fe70 	bl	8001be0 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <LCD_init+0x8c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	461a      	mov	r2, r3
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3302      	adds	r3, #2
 8001f10:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b4b      	cmp	r3, #75	@ 0x4b
 8001f16:	d9e8      	bls.n	8001eea <LCD_init+0x3a>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f003 fa7d 	bl	8005418 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff ff94 	bl	8001e4c <LCD_setPower>
  UG_Update();
 8001f24:	f004 fd2c 	bl	8006980 <UG_Update>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020400 	.word	0x40020400
 8001f34:	2000001c 	.word	0x2000001c
 8001f38:	2001c458 	.word	0x2001c458
 8001f3c:	080158c4 	.word	0x080158c4

08001f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <HAL_Init+0x40>)
 8001f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <HAL_Init+0x40>)
 8001f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	@ (8001f80 <HAL_Init+0x40>)
 8001f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 f973 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	200f      	movs	r0, #15
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff f850 	bl	8001018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f999 	bl	80022da <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 f953 	bl	800226a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	2000002c 	.word	0x2000002c
 8001fe0:	20000028 	.word	0x20000028

08001fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x20>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <HAL_IncTick+0x24>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	2000002c 	.word	0x2000002c
 8002008:	2001c4cc 	.word	0x2001c4cc

0800200c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <HAL_GetTick+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	2001c4cc 	.word	0x2001c4cc

08002024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff ffee 	bl	800200c <HAL_GetTick>
 8002030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800203c:	d005      	beq.n	800204a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_Delay+0x44>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800204a:	bf00      	nop
 800204c:	f7ff ffde 	bl	800200c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	429a      	cmp	r2, r3
 800205a:	d8f7      	bhi.n	800204c <HAL_Delay+0x28>
  {
  }
}
 800205c:	bf00      	nop
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000002c 	.word	0x2000002c

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db12      	blt.n	8002144 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	490a      	ldr	r1, [pc, #40]	@ (8002150 <__NVIC_DisableIRQ+0x44>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	3320      	adds	r3, #32
 8002134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002138:	f3bf 8f4f 	dsb	sy
}
 800213c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213e:	f3bf 8f6f 	isb	sy
}
 8002142:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	@ (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	@ (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	@ 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff05 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff1a 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff8e 	bl	80021a8 <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff0d 	bl	80020d0 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff1d 	bl	800210c <__NVIC_DisableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ff94 	bl	8002210 <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fe84 	bl	800200c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e099      	b.n	8002444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e00f      	b.n	8002352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff fe6b 	bl	800200c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d908      	bls.n	8002352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e078      	b.n	8002444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e8      	bne.n	8002332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4b38      	ldr	r3, [pc, #224]	@ (800244c <HAL_DMA_Init+0x158>)
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4313      	orrs	r3, r2
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d117      	bne.n	8002416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fb0f 	bl	8002a1c <DMA_CheckFifoParam>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002412:	2301      	movs	r3, #1
 8002414:	e016      	b.n	8002444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fac6 	bl	80029b0 <DMA_CalcBaseAndBitshift>
 8002424:	4603      	mov	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800242c:	223f      	movs	r2, #63	@ 0x3f
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f010803f 	.word	0xf010803f

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Start_IT+0x26>
 8002472:	2302      	movs	r3, #2
 8002474:	e040      	b.n	80024f8 <HAL_DMA_Start_IT+0xa8>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12f      	bne.n	80024ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 fa58 	bl	8002954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	223f      	movs	r2, #63	@ 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0216 	orr.w	r2, r2, #22
 80024be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e005      	b.n	80024f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800250e:	f7ff fd7d 	bl	800200c <HAL_GetTick>
 8002512:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d008      	beq.n	8002532 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e052      	b.n	80025d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0216 	bic.w	r2, r2, #22
 8002540:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002550:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <HAL_DMA_Abort+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800255e:	2b00      	cmp	r3, #0
 8002560:	d007      	beq.n	8002572 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0208 	bic.w	r2, r2, #8
 8002570:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0201 	bic.w	r2, r2, #1
 8002580:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002582:	e013      	b.n	80025ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002584:	f7ff fd42 	bl	800200c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b05      	cmp	r3, #5
 8002590:	d90c      	bls.n	80025ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2220      	movs	r2, #32
 8002596:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e015      	b.n	80025d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e4      	bne.n	8002584 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	223f      	movs	r2, #63	@ 0x3f
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d004      	beq.n	80025fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002630:	4b8e      	ldr	r3, [pc, #568]	@ (800286c <HAL_DMA_IRQHandler+0x248>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a8e      	ldr	r2, [pc, #568]	@ (8002870 <HAL_DMA_IRQHandler+0x24c>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264e:	2208      	movs	r2, #8
 8002650:	409a      	lsls	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01a      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0204 	bic.w	r2, r2, #4
 8002676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2208      	movs	r2, #8
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2201      	movs	r2, #1
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d012      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026be:	f043 0202 	orr.w	r2, r3, #2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2204      	movs	r2, #4
 80026cc:	409a      	lsls	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d012      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e8:	2204      	movs	r2, #4
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002700:	2210      	movs	r2, #16
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d043      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03c      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271e:	2210      	movs	r2, #16
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d018      	beq.n	8002766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d024      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
 8002752:	e01f      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e016      	b.n	8002794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0208 	bic.w	r2, r2, #8
 8002782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002798:	2220      	movs	r2, #32
 800279a:	409a      	lsls	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 808f 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8087 	beq.w	80028c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ba:	2220      	movs	r2, #32
 80027bc:	409a      	lsls	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d136      	bne.n	800283c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0216 	bic.w	r2, r2, #22
 80027dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d103      	bne.n	80027fe <HAL_DMA_IRQHandler+0x1da>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d007      	beq.n	800280e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0208 	bic.w	r2, r2, #8
 800280c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002812:	223f      	movs	r2, #63	@ 0x3f
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d07e      	beq.n	8002930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
        }
        return;
 800283a:	e079      	b.n	8002930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d01d      	beq.n	8002886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10d      	bne.n	8002874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	2b00      	cmp	r3, #0
 800285e:	d031      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
 8002868:	e02c      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000
 8002870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d023      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e01e      	b.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10f      	bne.n	80028b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0210 	bic.w	r2, r2, #16
 80028a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d022      	beq.n	800291e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2205      	movs	r2, #5
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d307      	bcc.n	800290c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f2      	bne.n	80028f0 <HAL_DMA_IRQHandler+0x2cc>
 800290a:	e000      	b.n	800290e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800290c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
 800292e:	e000      	b.n	8002932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002930:	bf00      	nop
    }
  }
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002946:	b2db      	uxtb	r3, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b40      	cmp	r3, #64	@ 0x40
 8002980:	d108      	bne.n	8002994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002992:	e007      	b.n	80029a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3b10      	subs	r3, #16
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <DMA_CalcBaseAndBitshift+0x64>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ca:	4a13      	ldr	r2, [pc, #76]	@ (8002a18 <DMA_CalcBaseAndBitshift+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d909      	bls.n	80029f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80029f0:	e007      	b.n	8002a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	08015910 	.word	0x08015910

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d856      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a44 <DMA_CheckFifoParam+0x28>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a67 	.word	0x08002a67
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002aeb 	.word	0x08002aeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e043      	b.n	8002aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a6e:	d140      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e03d      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a7e:	d121      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d837      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a86:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d903      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
      break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
    }
  } 
  
  return status; 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	@ 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e159      	b.n	8002de4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 8148 	bne.w	8002dde <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d005      	beq.n	8002b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d130      	bne.n	8002bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 0201 	and.w	r2, r3, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d017      	beq.n	8002c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a2 	beq.w	8002dde <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b57      	ldr	r3, [pc, #348]	@ (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4a56      	ldr	r2, [pc, #344]	@ (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002caa:	4b54      	ldr	r3, [pc, #336]	@ (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a49      	ldr	r2, [pc, #292]	@ (8002e04 <HAL_GPIO_Init+0x2f0>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d019      	beq.n	8002d16 <HAL_GPIO_Init+0x202>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a48      	ldr	r2, [pc, #288]	@ (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d013      	beq.n	8002d12 <HAL_GPIO_Init+0x1fe>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a47      	ldr	r2, [pc, #284]	@ (8002e0c <HAL_GPIO_Init+0x2f8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00d      	beq.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a46      	ldr	r2, [pc, #280]	@ (8002e10 <HAL_GPIO_Init+0x2fc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <HAL_GPIO_Init+0x1f6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a45      	ldr	r2, [pc, #276]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d101      	bne.n	8002d06 <HAL_GPIO_Init+0x1f2>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e008      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d06:	2307      	movs	r3, #7
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e004      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e002      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <HAL_GPIO_Init+0x204>
 8002d16:	2300      	movs	r3, #0
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f002 0203 	and.w	r2, r2, #3
 8002d1e:	0092      	lsls	r2, r2, #2
 8002d20:	4093      	lsls	r3, r2
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d28:	4935      	ldr	r1, [pc, #212]	@ (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	089b      	lsrs	r3, r3, #2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d36:	4b38      	ldr	r3, [pc, #224]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d60:	4b2d      	ldr	r3, [pc, #180]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d84:	4a24      	ldr	r2, [pc, #144]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	43db      	mvns	r3, r3
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dae:	4a1a      	ldr	r2, [pc, #104]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db4:	4b18      	ldr	r3, [pc, #96]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e18 <HAL_GPIO_Init+0x304>)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	f67f aea2 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3724      	adds	r7, #36	@ 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	40013800 	.word	0x40013800
 8002e04:	40020000 	.word	0x40020000
 8002e08:	40020400 	.word	0x40020400
 8002e0c:	40020800 	.word	0x40020800
 8002e10:	40020c00 	.word	0x40020c00
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40013c00 	.word	0x40013c00

08002e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e2c:	787b      	ldrb	r3, [r7, #1]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e38:	e003      	b.n	8002e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	041a      	lsls	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	619a      	str	r2, [r3, #24]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e5a:	4b08      	ldr	r3, [pc, #32]	@ (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f86e 	bl	8000f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40013c00 	.word	0x40013c00

08002e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e267      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d075      	beq.n	8002f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9e:	4b88      	ldr	r3, [pc, #544]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eaa:	4b85      	ldr	r3, [pc, #532]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d112      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb6:	4b82      	ldr	r3, [pc, #520]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b7e      	ldr	r3, [pc, #504]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_RCC_OscConfig+0x108>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d157      	bne.n	8002f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e242      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x74>
 8002ee6:	4b76      	ldr	r3, [pc, #472]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a75      	ldr	r2, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e01d      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002efc:	d10c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x98>
 8002efe:	4b70      	ldr	r3, [pc, #448]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6f      	ldr	r2, [pc, #444]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	4b6d      	ldr	r3, [pc, #436]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a6c      	ldr	r2, [pc, #432]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e00b      	b.n	8002f30 <HAL_RCC_OscConfig+0xb0>
 8002f18:	4b69      	ldr	r3, [pc, #420]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a68      	ldr	r2, [pc, #416]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7ff f868 	bl	800200c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f40:	f7ff f864 	bl	800200c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	@ 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e207      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b5b      	ldr	r3, [pc, #364]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc0>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff f854 	bl	800200c <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7ff f850 	bl	800200c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	@ 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1f3      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xe8>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d063      	beq.n	800305e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f96:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 030c 	and.w	r3, r3, #12
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00b      	beq.n	8002fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fa2:	4b47      	ldr	r3, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d11c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fae:	4b44      	ldr	r3, [pc, #272]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d116      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e1c7      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4937      	ldr	r1, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	e03a      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d020      	beq.n	8003032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff0:	4b34      	ldr	r3, [pc, #208]	@ (80030c4 <HAL_RCC_OscConfig+0x244>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7ff f809 	bl	800200c <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7ff f805 	bl	800200c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e1a8      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4b2b      	ldr	r3, [pc, #172]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b28      	ldr	r3, [pc, #160]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4925      	ldr	r1, [pc, #148]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	e015      	b.n	800305e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x244>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003038:	f7fe ffe8 	bl	800200c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003040:	f7fe ffe4 	bl	800200c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e187      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	4b15      	ldr	r3, [pc, #84]	@ (80030c8 <HAL_RCC_OscConfig+0x248>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003078:	f7fe ffc8 	bl	800200c <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7fe ffc4 	bl	800200c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e167      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	4b0b      	ldr	r3, [pc, #44]	@ (80030c0 <HAL_RCC_OscConfig+0x240>)
 8003094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x200>
 800309e:	e01b      	b.n	80030d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_OscConfig+0x248>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a6:	f7fe ffb1 	bl	800200c <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ac:	e00e      	b.n	80030cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ae:	f7fe ffad 	bl	800200c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d907      	bls.n	80030cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e150      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80030c0:	40023800 	.word	0x40023800
 80030c4:	42470000 	.word	0x42470000
 80030c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	4b88      	ldr	r3, [pc, #544]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ea      	bne.n	80030ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8097 	beq.w	8003214 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ea:	4b81      	ldr	r3, [pc, #516]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	4b7d      	ldr	r3, [pc, #500]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	4a7c      	ldr	r2, [pc, #496]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	@ 0x40
 8003106:	4b7a      	ldr	r3, [pc, #488]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003116:	4b77      	ldr	r3, [pc, #476]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d118      	bne.n	8003154 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003122:	4b74      	ldr	r3, [pc, #464]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a73      	ldr	r2, [pc, #460]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312e:	f7fe ff6d 	bl	800200c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003136:	f7fe ff69 	bl	800200c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e10c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <HAL_RCC_OscConfig+0x474>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0f0      	beq.n	8003136 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d106      	bne.n	800316a <HAL_RCC_OscConfig+0x2ea>
 800315c:	4b64      	ldr	r3, [pc, #400]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003160:	4a63      	ldr	r2, [pc, #396]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6713      	str	r3, [r2, #112]	@ 0x70
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b05      	cmp	r3, #5
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x30c>
 8003172:	4b5f      	ldr	r3, [pc, #380]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003176:	4a5e      	ldr	r2, [pc, #376]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 0304 	orr.w	r3, r3, #4
 800317c:	6713      	str	r3, [r2, #112]	@ 0x70
 800317e:	4b5c      	ldr	r3, [pc, #368]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	4a5b      	ldr	r2, [pc, #364]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	@ 0x70
 800318a:	e00b      	b.n	80031a4 <HAL_RCC_OscConfig+0x324>
 800318c:	4b58      	ldr	r3, [pc, #352]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003190:	4a57      	ldr	r2, [pc, #348]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6713      	str	r3, [r2, #112]	@ 0x70
 8003198:	4b55      	ldr	r3, [pc, #340]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319c:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800319e:	f023 0304 	bic.w	r3, r3, #4
 80031a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7fe ff2e 	bl	800200c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe ff2a 	bl	800200c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0cb      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b49      	ldr	r3, [pc, #292]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCC_OscConfig+0x334>
 80031d6:	e014      	b.n	8003202 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d8:	f7fe ff18 	bl	800200c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe ff14 	bl	800200c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0b5      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f6:	4b3e      	ldr	r3, [pc, #248]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1ee      	bne.n	80031e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d105      	bne.n	8003214 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	4a38      	ldr	r2, [pc, #224]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003212:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 80a1 	beq.w	8003360 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d05c      	beq.n	80032e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d141      	bne.n	80032b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b31      	ldr	r3, [pc, #196]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fe fee8 	bl	800200c <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003240:	f7fe fee4 	bl	800200c <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e087      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	4b27      	ldr	r3, [pc, #156]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	491b      	ldr	r1, [pc, #108]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe febd 	bl	800200c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe feb9 	bl	800200c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e05c      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	4b11      	ldr	r3, [pc, #68]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x416>
 80032b4:	e054      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <HAL_RCC_OscConfig+0x478>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fe fea6 	bl	800200c <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c4:	f7fe fea2 	bl	800200c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e045      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x444>
 80032e2:	e03d      	b.n	8003360 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e038      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000
 80032f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x4ec>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d028      	beq.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d121      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d11a      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800332c:	4013      	ands	r3, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003332:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003334:	4293      	cmp	r3, r2
 8003336:	d111      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0cc      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003384:	4b68      	ldr	r3, [pc, #416]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d90c      	bls.n	80033ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b63      	ldr	r3, [pc, #396]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e0b8      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d020      	beq.n	80033fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c4:	4b59      	ldr	r3, [pc, #356]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	4a58      	ldr	r2, [pc, #352]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033dc:	4b53      	ldr	r3, [pc, #332]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a52      	ldr	r2, [pc, #328]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e8:	4b50      	ldr	r3, [pc, #320]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	494d      	ldr	r1, [pc, #308]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d044      	beq.n	8003490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d119      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e07f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d003      	beq.n	800342e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800342a:	2b03      	cmp	r3, #3
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342e:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343e:	4b3b      	ldr	r3, [pc, #236]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e067      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4934      	ldr	r1, [pc, #208]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fe fdd4 	bl	800200c <HAL_GetTick>
 8003464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fe fdd0 	bl	800200c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e04f      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b2b      	ldr	r3, [pc, #172]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b25      	ldr	r3, [pc, #148]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d20c      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b22      	ldr	r3, [pc, #136]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e032      	b.n	800351e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4916      	ldr	r1, [pc, #88]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034e2:	4b12      	ldr	r3, [pc, #72]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	490e      	ldr	r1, [pc, #56]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f6:	f000 f821 	bl	800353c <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	091b      	lsrs	r3, r3, #4
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490a      	ldr	r1, [pc, #40]	@ (8003530 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	fa22 f303 	lsr.w	r3, r2, r3
 800350e:	4a09      	ldr	r2, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fd34 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00
 800352c:	40023800 	.word	0x40023800
 8003530:	08015858 	.word	0x08015858
 8003534:	20000000 	.word	0x20000000
 8003538:	20000028 	.word	0x20000028

0800353c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b090      	sub	sp, #64	@ 0x40
 8003542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	@ 0x34
 8003548:	2300      	movs	r3, #0
 800354a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800354c:	2300      	movs	r3, #0
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003554:	4b59      	ldr	r3, [pc, #356]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d00d      	beq.n	800357c <HAL_RCC_GetSysClockFreq+0x40>
 8003560:	2b08      	cmp	r3, #8
 8003562:	f200 80a1 	bhi.w	80036a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0x34>
 800356a:	2b04      	cmp	r3, #4
 800356c:	d003      	beq.n	8003576 <HAL_RCC_GetSysClockFreq+0x3a>
 800356e:	e09b      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003574:	e09b      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003576:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800357a:	e098      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800357c:	4b4f      	ldr	r3, [pc, #316]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003584:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003586:	4b4d      	ldr	r3, [pc, #308]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d028      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b4a      	ldr	r3, [pc, #296]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	627a      	str	r2, [r7, #36]	@ 0x24
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a4:	2100      	movs	r1, #0
 80035a6:	4b47      	ldr	r3, [pc, #284]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a8:	fb03 f201 	mul.w	r2, r3, r1
 80035ac:	2300      	movs	r3, #0
 80035ae:	fb00 f303 	mul.w	r3, r0, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	4a43      	ldr	r2, [pc, #268]	@ (80036c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b6:	fba0 1202 	umull	r1, r2, r0, r2
 80035ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035bc:	460a      	mov	r2, r1
 80035be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035c2:	4413      	add	r3, r2
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	2200      	movs	r2, #0
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	61fa      	str	r2, [r7, #28]
 80035ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035d6:	f7fc fe07 	bl	80001e8 <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4613      	mov	r3, r2
 80035e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035e2:	e053      	b.n	800368c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e4:	4b35      	ldr	r3, [pc, #212]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	2200      	movs	r2, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	617a      	str	r2, [r7, #20]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035f6:	f04f 0b00 	mov.w	fp, #0
 80035fa:	4652      	mov	r2, sl
 80035fc:	465b      	mov	r3, fp
 80035fe:	f04f 0000 	mov.w	r0, #0
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	0159      	lsls	r1, r3, #5
 8003608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800360c:	0150      	lsls	r0, r2, #5
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	ebb2 080a 	subs.w	r8, r2, sl
 8003616:	eb63 090b 	sbc.w	r9, r3, fp
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003626:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800362a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800362e:	ebb2 0408 	subs.w	r4, r2, r8
 8003632:	eb63 0509 	sbc.w	r5, r3, r9
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	00eb      	lsls	r3, r5, #3
 8003640:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003644:	00e2      	lsls	r2, r4, #3
 8003646:	4614      	mov	r4, r2
 8003648:	461d      	mov	r5, r3
 800364a:	eb14 030a 	adds.w	r3, r4, sl
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	eb45 030b 	adc.w	r3, r5, fp
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003662:	4629      	mov	r1, r5
 8003664:	028b      	lsls	r3, r1, #10
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800366c:	4621      	mov	r1, r4
 800366e:	028a      	lsls	r2, r1, #10
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003676:	2200      	movs	r2, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003680:	f7fc fdb2 	bl	80001e8 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800368c:	4b0b      	ldr	r3, [pc, #44]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	3301      	adds	r3, #1
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800369c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3740      	adds	r7, #64	@ 0x40
 80036b4:	46bd      	mov	sp, r7
 80036b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	00f42400 	.word	0x00f42400
 80036c4:	017d7840 	.word	0x017d7840

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036cc:	4b03      	ldr	r3, [pc, #12]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000000 	.word	0x20000000

080036e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e4:	f7ff fff0 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 80036e8:	4602      	mov	r2, r0
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	0a9b      	lsrs	r3, r3, #10
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	4903      	ldr	r1, [pc, #12]	@ (8003704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f6:	5ccb      	ldrb	r3, [r1, r3]
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	08015868 	.word	0x08015868

08003708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800370c:	f7ff ffdc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4903      	ldr	r1, [pc, #12]	@ (800372c <HAL_RCC_GetPCLK2Freq+0x24>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40023800 	.word	0x40023800
 800372c:	08015868 	.word	0x08015868

08003730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07b      	b.n	800383a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003752:	d009      	beq.n	8003768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	61da      	str	r2, [r3, #28]
 800375a:	e005      	b.n	8003768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fc70 	bl	8001068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800379e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	431a      	orrs	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ec:	ea42 0103 	orr.w	r1, r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	f003 0104 	and.w	r1, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	f003 0210 	and.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b088      	sub	sp, #32
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_SPI_Transmit+0x22>
 8003860:	2302      	movs	r3, #2
 8003862:	e12d      	b.n	8003ac0 <HAL_SPI_Transmit+0x27e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386c:	f7fe fbce 	bl	800200c <HAL_GetTick>
 8003870:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003882:	2302      	movs	r3, #2
 8003884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003886:	e116      	b.n	8003ab6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_SPI_Transmit+0x52>
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003898:	e10d      	b.n	8003ab6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2203      	movs	r2, #3
 800389e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e0:	d10f      	bne.n	8003902 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003900:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d007      	beq.n	8003920 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003928:	d14f      	bne.n	80039ca <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_Transmit+0xf6>
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d142      	bne.n	80039be <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800395c:	e02f      	b.n	80039be <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d112      	bne.n	8003992 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003990:	e015      	b.n	80039be <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003992:	f7fe fb3b 	bl	800200c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d803      	bhi.n	80039aa <HAL_SPI_Transmit+0x168>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d102      	bne.n	80039b0 <HAL_SPI_Transmit+0x16e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d106      	bne.n	80039be <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039bc:	e07b      	b.n	8003ab6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ca      	bne.n	800395e <HAL_SPI_Transmit+0x11c>
 80039c8:	e050      	b.n	8003a6c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_Transmit+0x196>
 80039d2:	8afb      	ldrh	r3, [r7, #22]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d144      	bne.n	8003a62 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	330c      	adds	r3, #12
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039fe:	e030      	b.n	8003a62 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d113      	bne.n	8003a36 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	7812      	ldrb	r2, [r2, #0]
 8003a1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a34:	e015      	b.n	8003a62 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a36:	f7fe fae9 	bl	800200c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d803      	bhi.n	8003a4e <HAL_SPI_Transmit+0x20c>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d102      	bne.n	8003a54 <HAL_SPI_Transmit+0x212>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003a60:	e029      	b.n	8003ab6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1c9      	bne.n	8003a00 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	6839      	ldr	r1, [r7, #0]
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fa03 	bl	8003e7c <SPI_EndRxTxTransaction>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e003      	b.n	8003ab6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003abe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3720      	adds	r7, #32
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_SPI_Transmit_DMA+0x20>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e097      	b.n	8003c18 <HAL_SPI_Transmit_DMA+0x150>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003afc:	2302      	movs	r3, #2
 8003afe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b00:	e085      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_SPI_Transmit_DMA+0x46>
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b12:	e07c      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b5a:	d10f      	bne.n	8003b7c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b80:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <HAL_SPI_Transmit_DMA+0x158>)
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b88:	4a26      	ldr	r2, [pc, #152]	@ (8003c24 <HAL_SPI_Transmit_DMA+0x15c>)
 8003b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b90:	4a25      	ldr	r2, [pc, #148]	@ (8003c28 <HAL_SPI_Transmit_DMA+0x160>)
 8003b92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	2200      	movs	r2, #0
 8003b9a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bb4:	f7fe fc4c 	bl	8002450 <HAL_DMA_Start_IT>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0210 	orr.w	r2, r3, #16
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003bce:	e01e      	b.n	8003c0e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bda:	2b40      	cmp	r3, #64	@ 0x40
 8003bdc:	d007      	beq.n	8003bee <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0202 	orr.w	r2, r2, #2
 8003c0c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	08003d11 	.word	0x08003d11
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003d2d 	.word	0x08003d2d

08003c2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c76:	f7fe f9c9 	bl	800200c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c8a:	d03b      	beq.n	8003d04 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0220 	bic.w	r2, r2, #32
 8003c9a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0202 	bic.w	r2, r2, #2
 8003caa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	2164      	movs	r1, #100	@ 0x64
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f000 f8e3 	bl	8003e7c <SPI_EndRxTxTransaction>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003cfc:	6978      	ldr	r0, [r7, #20]
 8003cfe:	f7ff ffa9 	bl	8003c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003d02:	e002      	b.n	8003d0a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003d04:	6978      	ldr	r0, [r7, #20]
 8003d06:	f7ff ff91 	bl	8003c2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff ff8e 	bl	8003c40 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0203 	bic.w	r2, r2, #3
 8003d48:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	f043 0210 	orr.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7ff ff78 	bl	8003c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d7c:	f7fe f946 	bl	800200c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d8c:	f7fe f93e 	bl	800200c <HAL_GetTick>
 8003d90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d92:	4b39      	ldr	r3, [pc, #228]	@ (8003e78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	0d1b      	lsrs	r3, r3, #20
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003da2:	e054      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d050      	beq.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dac:	f7fe f92e 	bl	800200c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d902      	bls.n	8003dc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d13d      	bne.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dda:	d111      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de4:	d004      	beq.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dee:	d107      	bne.n	8003e00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e08:	d10f      	bne.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e017      	b.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4013      	ands	r3, r2
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d19b      	bne.n	8003da4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000000 	.word	0x20000000

08003e7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2102      	movs	r1, #2
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff6a 	bl	8003d6c <SPI_WaitFlagStateUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d007      	beq.n	8003eae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e032      	b.n	8003f14 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003eae:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <SPI_EndRxTxTransaction+0xa0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <SPI_EndRxTxTransaction+0xa4>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	0d5b      	lsrs	r3, r3, #21
 8003eba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ecc:	d112      	bne.n	8003ef4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	2180      	movs	r1, #128	@ 0x80
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff ff47 	bl	8003d6c <SPI_WaitFlagStateUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d016      	beq.n	8003f12 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e00f      	b.n	8003f14 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d0f2      	beq.n	8003ef4 <SPI_EndRxTxTransaction+0x78>
 8003f0e:	e000      	b.n	8003f12 <SPI_EndRxTxTransaction+0x96>
        break;
 8003f10:	bf00      	nop
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3718      	adds	r7, #24
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	165e9f81 	.word	0x165e9f81

08003f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e041      	b.n	8003fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd f906 	bl	800115c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2202      	movs	r2, #2
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f000 f9d8 	bl	8004318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d001      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e044      	b.n	8004066 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8004074 <HAL_TIM_Base_Start_IT+0xb0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004006:	d013      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <HAL_TIM_Base_Start_IT+0xb4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a19      	ldr	r2, [pc, #100]	@ (800407c <HAL_TIM_Base_Start_IT+0xb8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <HAL_TIM_Base_Start_IT+0xbc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIM_Base_Start_IT+0x6c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <HAL_TIM_Base_Start_IT+0xc0>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d111      	bne.n	8004054 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d010      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 0201 	orr.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004052:	e007      	b.n	8004064 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010000 	.word	0x40010000
 8004078:	40000400 	.word	0x40000400
 800407c:	40000800 	.word	0x40000800
 8004080:	40000c00 	.word	0x40000c00
 8004084:	40014000 	.word	0x40014000

08004088 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10f      	bne.n	80040d0 <HAL_TIM_Base_Stop_IT+0x48>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	f240 4344 	movw	r3, #1092	@ 0x444
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d107      	bne.n	80040d0 <HAL_TIM_Base_Stop_IT+0x48>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0201 	bic.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d01b      	beq.n	800414a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0202 	mvn.w	r2, #2
 800411a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f003 0303 	and.w	r3, r3, #3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8d2 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8004136:	e005      	b.n	8004144 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f8c4 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8d5 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d01b      	beq.n	8004196 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0204 	mvn.w	r2, #4
 8004166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8ac 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 8004182:	e005      	b.n	8004190 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f89e 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8af 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01b      	beq.n	80041e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f06f 0208 	mvn.w	r2, #8
 80041b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2204      	movs	r2, #4
 80041b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f886 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 80041ce:	e005      	b.n	80041dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f878 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f889 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01b      	beq.n	800422e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f06f 0210 	mvn.w	r2, #16
 80041fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2208      	movs	r2, #8
 8004204:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f860 	bl	80042da <HAL_TIM_IC_CaptureCallback>
 800421a:	e005      	b.n	8004228 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f852 	bl	80042c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f863 	bl	80042ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00c      	beq.n	8004252 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f06f 0201 	mvn.w	r2, #1
 800424a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fc fe9d 	bl	8000f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00c      	beq.n	8004276 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8e7 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00c      	beq.n	800429a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f834 	bl	8004302 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00c      	beq.n	80042be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f06f 0220 	mvn.w	r2, #32
 80042b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8b9 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3a      	ldr	r2, [pc, #232]	@ (8004414 <TIM_Base_SetConfig+0xfc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d00f      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d00b      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a37      	ldr	r2, [pc, #220]	@ (8004418 <TIM_Base_SetConfig+0x100>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a36      	ldr	r2, [pc, #216]	@ (800441c <TIM_Base_SetConfig+0x104>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0x38>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a35      	ldr	r2, [pc, #212]	@ (8004420 <TIM_Base_SetConfig+0x108>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <TIM_Base_SetConfig+0xfc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a28      	ldr	r2, [pc, #160]	@ (8004418 <TIM_Base_SetConfig+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a27      	ldr	r2, [pc, #156]	@ (800441c <TIM_Base_SetConfig+0x104>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <TIM_Base_SetConfig+0x108>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a25      	ldr	r2, [pc, #148]	@ (8004424 <TIM_Base_SetConfig+0x10c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a24      	ldr	r2, [pc, #144]	@ (8004428 <TIM_Base_SetConfig+0x110>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0x8a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a23      	ldr	r2, [pc, #140]	@ (800442c <TIM_Base_SetConfig+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <TIM_Base_SetConfig+0xfc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d103      	bne.n	80043e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d105      	bne.n	8004406 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f023 0201 	bic.w	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	611a      	str	r2, [r3, #16]
  }
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40010000 	.word	0x40010000
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800
 8004420:	40000c00 	.word	0x40000c00
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc fe94 	bl	80011ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2224      	movs	r2, #36	@ 0x24
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800449a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 fc85 	bl	8004dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b0ba      	sub	sp, #232	@ 0xe8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10f      	bne.n	800455e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800453e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <HAL_UART_IRQHandler+0x66>
 800454a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fb69 	bl	8004c2e <UART_Receive_IT>
      return;
 800455c:	e25b      	b.n	8004a16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800455e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80de 	beq.w	8004724 <HAL_UART_IRQHandler+0x22c>
 8004568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004578:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80d1 	beq.w	8004724 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_UART_IRQHandler+0xae>
 800458e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_UART_IRQHandler+0xd2>
 80045b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_UART_IRQHandler+0xf6>
 80045d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d005      	beq.n	80045ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e6:	f043 0204 	orr.w	r2, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d011      	beq.n	800461e <HAL_UART_IRQHandler+0x126>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0208 	orr.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 81f2 	beq.w	8004a0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <HAL_UART_IRQHandler+0x14e>
 8004634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 faf4 	bl	8004c2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <HAL_UART_IRQHandler+0x17a>
 800466a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d04f      	beq.n	8004712 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9fc 	bl	8004a70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d141      	bne.n	800470a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3314      	adds	r3, #20
 800468c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800469c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1d9      	bne.n	8004686 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d013      	beq.n	8004702 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	4a7e      	ldr	r2, [pc, #504]	@ (80048d8 <HAL_UART_IRQHandler+0x3e0>)
 80046e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd ff7a 	bl	80025e0 <HAL_DMA_Abort_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80046fc:	4610      	mov	r0, r2
 80046fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004700:	e00e      	b.n	8004720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f99e 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e00a      	b.n	8004720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f99a 	bl	8004a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004710:	e006      	b.n	8004720 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f996 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800471e:	e175      	b.n	8004a0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	bf00      	nop
    return;
 8004722:	e173      	b.n	8004a0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	2b01      	cmp	r3, #1
 800472a:	f040 814f 	bne.w	80049cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8148 	beq.w	80049cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8141 	beq.w	80049cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476a:	2b40      	cmp	r3, #64	@ 0x40
 800476c:	f040 80b6 	bne.w	80048dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800477c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8145 	beq.w	8004a10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800478a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800478e:	429a      	cmp	r2, r3
 8004790:	f080 813e 	bcs.w	8004a10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800479a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a6:	f000 8088 	beq.w	80048ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	330c      	adds	r3, #12
 80047b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80047ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1d9      	bne.n	80047aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004806:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3314      	adds	r3, #20
 8004816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800481a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800481e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004822:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e1      	bne.n	80047f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3314      	adds	r3, #20
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004856:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800485c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004864:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e3      	bne.n	8004832 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2220      	movs	r2, #32
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488a:	f023 0310 	bic.w	r3, r3, #16
 800488e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800489c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800489e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e3      	bne.n	8004878 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fd fe23 	bl	8002500 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f8c1 	bl	8004a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048d6:	e09b      	b.n	8004a10 <HAL_UART_IRQHandler+0x518>
 80048d8:	08004b37 	.word	0x08004b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 808e 	beq.w	8004a14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80048f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8089 	beq.w	8004a14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	330c      	adds	r3, #12
 8004908:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004914:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004918:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004926:	647a      	str	r2, [r7, #68]	@ 0x44
 8004928:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800492c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e3      	bne.n	8004902 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	623b      	str	r3, [r7, #32]
   return(result);
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3314      	adds	r3, #20
 800495a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800495e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004964:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e3      	bne.n	800493a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	330c      	adds	r3, #12
 8004986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0310 	bic.w	r3, r3, #16
 8004996:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	330c      	adds	r3, #12
 80049a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049a4:	61fa      	str	r2, [r7, #28]
 80049a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	e841 2300 	strex	r3, r2, [r1]
 80049b0:	617b      	str	r3, [r7, #20]
   return(result);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1e3      	bne.n	8004980 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f847 	bl	8004a58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ca:	e023      	b.n	8004a14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d009      	beq.n	80049ec <HAL_UART_IRQHandler+0x4f4>
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8ba 	bl	8004b5e <UART_Transmit_IT>
    return;
 80049ea:	e014      	b.n	8004a16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <HAL_UART_IRQHandler+0x51e>
 80049f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f8fa 	bl	8004bfe <UART_EndTransmit_IT>
    return;
 8004a0a:	e004      	b.n	8004a16 <HAL_UART_IRQHandler+0x51e>
    return;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004a14:	bf00      	nop
  }
}
 8004a16:	37e8      	adds	r7, #232	@ 0xe8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b095      	sub	sp, #84	@ 0x54
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a98:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e5      	bne.n	8004a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d119      	bne.n	8004b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	330c      	adds	r3, #12
 8004aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0310 	bic.w	r3, r3, #16
 8004afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	330c      	adds	r3, #12
 8004b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b08:	61ba      	str	r2, [r7, #24]
 8004b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	6979      	ldr	r1, [r7, #20]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	613b      	str	r3, [r7, #16]
   return(result);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e5      	bne.n	8004ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b2a:	bf00      	nop
 8004b2c:	3754      	adds	r7, #84	@ 0x54
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff ff77 	bl	8004a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b21      	cmp	r3, #33	@ 0x21
 8004b70:	d13e      	bne.n	8004bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b7a:	d114      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d110      	bne.n	8004ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]
 8004ba4:	e008      	b.n	8004bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6211      	str	r1, [r2, #32]
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff fefc 	bl	8004a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b08c      	sub	sp, #48	@ 0x30
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b22      	cmp	r3, #34	@ 0x22
 8004c40:	f040 80ae 	bne.w	8004da0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4c:	d117      	bne.n	8004c7e <UART_Receive_IT+0x50>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d113      	bne.n	8004c7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	1c9a      	adds	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c7c:	e026      	b.n	8004ccc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c90:	d007      	beq.n	8004ca2 <UART_Receive_IT+0x74>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <UART_Receive_IT+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e008      	b.n	8004cc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4619      	mov	r1, r3
 8004cda:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d15d      	bne.n	8004d9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0220 	bic.w	r2, r2, #32
 8004cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695a      	ldr	r2, [r3, #20]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d135      	bne.n	8004d92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f023 0310 	bic.w	r3, r3, #16
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	330c      	adds	r3, #12
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4c:	623a      	str	r2, [r7, #32]
 8004d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e5      	bne.n	8004d2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d10a      	bne.n	8004d84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fe64 	bl	8004a58 <HAL_UARTEx_RxEventCallback>
 8004d90:	e002      	b.n	8004d98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe4c 	bl	8004a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e002      	b.n	8004da2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3730      	adds	r7, #48	@ 0x30
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c0      	sub	sp, #256	@ 0x100
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	68d9      	ldr	r1, [r3, #12]
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	ea40 0301 	orr.w	r3, r0, r1
 8004dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e12:	430b      	orrs	r3, r1
 8004e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e26:	6999      	ldr	r1, [r3, #24]
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	ea40 0301 	orr.w	r3, r0, r1
 8004e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <UART_SetConfig+0x2cc>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d005      	beq.n	8004e4c <UART_SetConfig+0xa0>
 8004e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4b8d      	ldr	r3, [pc, #564]	@ (800507c <UART_SetConfig+0x2d0>)
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7fe fc5c 	bl	8003708 <HAL_RCC_GetPCLK2Freq>
 8004e50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e54:	e003      	b.n	8004e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e56:	f7fe fc43 	bl	80036e0 <HAL_RCC_GetPCLK1Freq>
 8004e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e68:	f040 810c 	bne.w	8005084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	1891      	adds	r1, r2, r2
 8004e84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e86:	415b      	adcs	r3, r3
 8004e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e8e:	4621      	mov	r1, r4
 8004e90:	eb12 0801 	adds.w	r8, r2, r1
 8004e94:	4629      	mov	r1, r5
 8004e96:	eb43 0901 	adc.w	r9, r3, r1
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eae:	4690      	mov	r8, r2
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	eb18 0303 	adds.w	r3, r8, r3
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	462b      	mov	r3, r5
 8004ebe:	eb49 0303 	adc.w	r3, r9, r3
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eda:	460b      	mov	r3, r1
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	eb42 0303 	adc.w	r3, r2, r3
 8004ee6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ef0:	f7fb f97a 	bl	80001e8 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4b61      	ldr	r3, [pc, #388]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004efa:	fba3 2302 	umull	r2, r3, r3, r2
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	011c      	lsls	r4, r3, #4
 8004f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	1891      	adds	r1, r2, r2
 8004f1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f1c:	415b      	adcs	r3, r3
 8004f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f24:	4641      	mov	r1, r8
 8004f26:	eb12 0a01 	adds.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f44:	4692      	mov	sl, r2
 8004f46:	469b      	mov	fp, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb4b 0303 	adc.w	r3, fp, r3
 8004f58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f70:	460b      	mov	r3, r1
 8004f72:	18db      	adds	r3, r3, r3
 8004f74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f76:	4613      	mov	r3, r2
 8004f78:	eb42 0303 	adc.w	r3, r2, r3
 8004f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f86:	f7fb f92f 	bl	80001e8 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004f92:	fba3 2301 	umull	r2, r3, r3, r1
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2264      	movs	r2, #100	@ 0x64
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	1acb      	subs	r3, r1, r3
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fa6:	4b36      	ldr	r3, [pc, #216]	@ (8005080 <UART_SetConfig+0x2d4>)
 8004fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004fac:	095b      	lsrs	r3, r3, #5
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fb4:	441c      	add	r4, r3
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	1891      	adds	r1, r2, r2
 8004fce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fd0:	415b      	adcs	r3, r3
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd8:	4641      	mov	r1, r8
 8004fda:	1851      	adds	r1, r2, r1
 8004fdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fde:	4649      	mov	r1, r9
 8004fe0:	414b      	adcs	r3, r1
 8004fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ff0:	4659      	mov	r1, fp
 8004ff2:	00cb      	lsls	r3, r1, #3
 8004ff4:	4651      	mov	r1, sl
 8004ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	00ca      	lsls	r2, r1, #3
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	4603      	mov	r3, r0
 8005004:	4642      	mov	r2, r8
 8005006:	189b      	adds	r3, r3, r2
 8005008:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800500c:	464b      	mov	r3, r9
 800500e:	460a      	mov	r2, r1
 8005010:	eb42 0303 	adc.w	r3, r2, r3
 8005014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005024:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800502c:	460b      	mov	r3, r1
 800502e:	18db      	adds	r3, r3, r3
 8005030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005032:	4613      	mov	r3, r2
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800503e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005042:	f7fb f8d1 	bl	80001e8 <__aeabi_uldivmod>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <UART_SetConfig+0x2d4>)
 800504c:	fba3 1302 	umull	r1, r3, r3, r2
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	2164      	movs	r1, #100	@ 0x64
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	3332      	adds	r3, #50	@ 0x32
 800505e:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <UART_SetConfig+0x2d4>)
 8005060:	fba2 2303 	umull	r2, r3, r2, r3
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f003 0207 	and.w	r2, r3, #7
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4422      	add	r2, r4
 8005072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005074:	e106      	b.n	8005284 <UART_SetConfig+0x4d8>
 8005076:	bf00      	nop
 8005078:	40011000 	.word	0x40011000
 800507c:	40011400 	.word	0x40011400
 8005080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005088:	2200      	movs	r2, #0
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005096:	4642      	mov	r2, r8
 8005098:	464b      	mov	r3, r9
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6239      	str	r1, [r7, #32]
 800509e:	415b      	adcs	r3, r3
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050a6:	4641      	mov	r1, r8
 80050a8:	1854      	adds	r4, r2, r1
 80050aa:	4649      	mov	r1, r9
 80050ac:	eb43 0501 	adc.w	r5, r3, r1
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	00eb      	lsls	r3, r5, #3
 80050ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050be:	00e2      	lsls	r2, r4, #3
 80050c0:	4614      	mov	r4, r2
 80050c2:	461d      	mov	r5, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	18e3      	adds	r3, r4, r3
 80050c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050cc:	464b      	mov	r3, r9
 80050ce:	eb45 0303 	adc.w	r3, r5, r3
 80050d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050e6:	f04f 0200 	mov.w	r2, #0
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050f2:	4629      	mov	r1, r5
 80050f4:	008b      	lsls	r3, r1, #2
 80050f6:	4621      	mov	r1, r4
 80050f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050fc:	4621      	mov	r1, r4
 80050fe:	008a      	lsls	r2, r1, #2
 8005100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005104:	f7fb f870 	bl	80001e8 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4b60      	ldr	r3, [pc, #384]	@ (8005290 <UART_SetConfig+0x4e4>)
 800510e:	fba3 2302 	umull	r2, r3, r3, r2
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	011c      	lsls	r4, r3, #4
 8005116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800511a:	2200      	movs	r2, #0
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005120:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	1891      	adds	r1, r2, r2
 800512e:	61b9      	str	r1, [r7, #24]
 8005130:	415b      	adcs	r3, r3
 8005132:	61fb      	str	r3, [r7, #28]
 8005134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005138:	4641      	mov	r1, r8
 800513a:	1851      	adds	r1, r2, r1
 800513c:	6139      	str	r1, [r7, #16]
 800513e:	4649      	mov	r1, r9
 8005140:	414b      	adcs	r3, r1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	f04f 0200 	mov.w	r2, #0
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005150:	4659      	mov	r1, fp
 8005152:	00cb      	lsls	r3, r1, #3
 8005154:	4651      	mov	r1, sl
 8005156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800515a:	4651      	mov	r1, sl
 800515c:	00ca      	lsls	r2, r1, #3
 800515e:	4610      	mov	r0, r2
 8005160:	4619      	mov	r1, r3
 8005162:	4603      	mov	r3, r0
 8005164:	4642      	mov	r2, r8
 8005166:	189b      	adds	r3, r3, r2
 8005168:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800516c:	464b      	mov	r3, r9
 800516e:	460a      	mov	r2, r1
 8005170:	eb42 0303 	adc.w	r3, r2, r3
 8005174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005182:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005190:	4649      	mov	r1, r9
 8005192:	008b      	lsls	r3, r1, #2
 8005194:	4641      	mov	r1, r8
 8005196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800519a:	4641      	mov	r1, r8
 800519c:	008a      	lsls	r2, r1, #2
 800519e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051a2:	f7fb f821 	bl	80001e8 <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	4b38      	ldr	r3, [pc, #224]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051ae:	fba3 2301 	umull	r2, r3, r3, r1
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2264      	movs	r2, #100	@ 0x64
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	1acb      	subs	r3, r1, r3
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	3332      	adds	r3, #50	@ 0x32
 80051c0:	4a33      	ldr	r2, [pc, #204]	@ (8005290 <UART_SetConfig+0x4e4>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051cc:	441c      	add	r4, r3
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	2200      	movs	r2, #0
 80051d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	1891      	adds	r1, r2, r2
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	415b      	adcs	r3, r3
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ec:	4641      	mov	r1, r8
 80051ee:	1851      	adds	r1, r2, r1
 80051f0:	6039      	str	r1, [r7, #0]
 80051f2:	4649      	mov	r1, r9
 80051f4:	414b      	adcs	r3, r1
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005204:	4659      	mov	r1, fp
 8005206:	00cb      	lsls	r3, r1, #3
 8005208:	4651      	mov	r1, sl
 800520a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520e:	4651      	mov	r1, sl
 8005210:	00ca      	lsls	r2, r1, #3
 8005212:	4610      	mov	r0, r2
 8005214:	4619      	mov	r1, r3
 8005216:	4603      	mov	r3, r0
 8005218:	4642      	mov	r2, r8
 800521a:	189b      	adds	r3, r3, r2
 800521c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800521e:	464b      	mov	r3, r9
 8005220:	460a      	mov	r2, r1
 8005222:	eb42 0303 	adc.w	r3, r2, r3
 8005226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	663b      	str	r3, [r7, #96]	@ 0x60
 8005232:	667a      	str	r2, [r7, #100]	@ 0x64
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005252:	f7fa ffc9 	bl	80001e8 <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <UART_SetConfig+0x4e4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	@ 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	@ 0x32
 800526e:	4a08      	ldr	r2, [pc, #32]	@ (8005290 <UART_SetConfig+0x4e4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4422      	add	r2, r4
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005290:	51eb851f 	.word	0x51eb851f

08005294 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	607a      	str	r2, [r7, #4]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80052a6:	89fb      	ldrh	r3, [r7, #14]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b21b      	sxth	r3, r3
 80052b6:	b29b      	uxth	r3, r3
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2204      	movs	r2, #4
 80052d8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2204      	movs	r2, #4
 80052de:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	b21a      	sxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005310:	b29b      	uxth	r3, r3
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29b      	uxth	r3, r3
 800531a:	b21a      	sxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 800538a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005394:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e010      	b.n	80053da <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	330a      	adds	r3, #10
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	330a      	adds	r3, #10
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	2200      	movs	r2, #0
 80053d2:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	3301      	adds	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b03      	cmp	r3, #3
 80053de:	d9eb      	bls.n	80053b8 <UG_Init+0xf4>
   }

   gui = g;
 80053e0:	4a04      	ldr	r2, [pc, #16]	@ (80053f4 <UG_Init+0x130>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6013      	str	r3, [r2, #0]
   return 1;
 80053e6:	2301      	movs	r3, #1
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	2001c4d0 	.word	0x2001c4d0

080053f8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8005400:	4b04      	ldr	r3, [pc, #16]	@ (8005414 <UG_FontSelect+0x1c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	2001c4d0 	.word	0x2001c4d0

08005418 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af02      	add	r7, sp, #8
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8005422:	4b0e      	ldr	r3, [pc, #56]	@ (800545c <UG_FillScreen+0x44>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29b      	uxth	r3, r3
 8005432:	b21a      	sxth	r2, r3
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <UG_FillScreen+0x44>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29b      	uxth	r3, r3
 8005444:	b219      	sxth	r1, r3
 8005446:	88fb      	ldrh	r3, [r7, #6]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	460b      	mov	r3, r1
 800544c:	2100      	movs	r1, #0
 800544e:	2000      	movs	r0, #0
 8005450:	f000 f806 	bl	8005460 <UG_FillFrame>
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	2001c4d0 	.word	0x2001c4d0

08005460 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005460:	b5b0      	push	{r4, r5, r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af02      	add	r7, sp, #8
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	461a      	mov	r2, r3
 800546e:	4623      	mov	r3, r4
 8005470:	80fb      	strh	r3, [r7, #6]
 8005472:	4603      	mov	r3, r0
 8005474:	80bb      	strh	r3, [r7, #4]
 8005476:	460b      	mov	r3, r1
 8005478:	807b      	strh	r3, [r7, #2]
 800547a:	4613      	mov	r3, r2
 800547c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800547e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005486:	429a      	cmp	r2, r3
 8005488:	da05      	bge.n	8005496 <UG_FillFrame+0x36>
     swap(x1,x2);
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	817b      	strh	r3, [r7, #10]
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	80fb      	strh	r3, [r7, #6]
 8005492:	897b      	ldrh	r3, [r7, #10]
 8005494:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005496:	f9b7 2000 	ldrsh.w	r2, [r7]
 800549a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	da05      	bge.n	80054ae <UG_FillFrame+0x4e>
     swap(y1,y2);
 80054a2:	88bb      	ldrh	r3, [r7, #4]
 80054a4:	813b      	strh	r3, [r7, #8]
 80054a6:	883b      	ldrh	r3, [r7, #0]
 80054a8:	80bb      	strh	r3, [r7, #4]
 80054aa:	893b      	ldrh	r3, [r7, #8]
 80054ac:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80054ae:	4b24      	ldr	r3, [pc, #144]	@ (8005540 <UG_FillFrame+0xe0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80054be:	4b20      	ldr	r3, [pc, #128]	@ (8005540 <UG_FillFrame+0xe0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c4:	461d      	mov	r5, r3
 80054c6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80054ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80054d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80054d6:	8c3b      	ldrh	r3, [r7, #32]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4623      	mov	r3, r4
 80054dc:	47a8      	blx	r5
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80054e4:	88bb      	ldrh	r3, [r7, #4]
 80054e6:	81bb      	strh	r3, [r7, #12]
 80054e8:	e01e      	b.n	8005528 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	81fb      	strh	r3, [r7, #14]
 80054ee:	e00f      	b.n	8005510 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80054f0:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <UG_FillFrame+0xe0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	8c3a      	ldrh	r2, [r7, #32]
 80054fa:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80054fe:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005502:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8005504:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005508:	b29b      	uxth	r3, r3
 800550a:	3301      	adds	r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	81fb      	strh	r3, [r7, #14]
 8005510:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005514:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005518:	429a      	cmp	r2, r3
 800551a:	dde9      	ble.n	80054f0 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800551c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005520:	b29b      	uxth	r3, r3
 8005522:	3301      	adds	r3, #1
 8005524:	b29b      	uxth	r3, r3
 8005526:	81bb      	strh	r3, [r7, #12]
 8005528:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800552c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005530:	429a      	cmp	r2, r3
 8005532:	ddda      	ble.n	80054ea <UG_FillFrame+0x8a>
 8005534:	e000      	b.n	8005538 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005536:	bf00      	nop
      }
   }
}
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bdb0      	pop	{r4, r5, r7, pc}
 800553e:	bf00      	nop
 8005540:	2001c4d0 	.word	0x2001c4d0

08005544 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005544:	b5b0      	push	{r4, r5, r7, lr}
 8005546:	b08a      	sub	sp, #40	@ 0x28
 8005548:	af02      	add	r7, sp, #8
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4623      	mov	r3, r4
 8005554:	80fb      	strh	r3, [r7, #6]
 8005556:	4603      	mov	r3, r0
 8005558:	80bb      	strh	r3, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	807b      	strh	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005562:	4b67      	ldr	r3, [pc, #412]	@ (8005700 <UG_DrawLine+0x1bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d013      	beq.n	800559a <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005572:	4b63      	ldr	r3, [pc, #396]	@ (8005700 <UG_DrawLine+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	461d      	mov	r5, r3
 800557a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800557e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005582:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005586:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800558a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	47a8      	blx	r5
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80ae 	beq.w	80056f6 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80055a4:	883a      	ldrh	r2, [r7, #0]
 80055a6:	88bb      	ldrh	r3, [r7, #4]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80055ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfb8      	it	lt
 80055b6:	425b      	neglt	r3, r3
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80055bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bfb8      	it	lt
 80055c4:	425b      	neglt	r3, r3
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80055ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd01      	ble.n	80055d6 <UG_DrawLine+0x92>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e001      	b.n	80055da <UG_DrawLine+0x96>
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80055dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd01      	ble.n	80055e8 <UG_DrawLine+0xa4>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e001      	b.n	80055ec <UG_DrawLine+0xa8>
 80055e8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ec:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80055ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055f2:	105b      	asrs	r3, r3, #1
 80055f4:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80055f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055fa:	105b      	asrs	r3, r3, #1
 80055fc:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005602:	88bb      	ldrh	r3, [r7, #4]
 8005604:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005606:	4b3e      	ldr	r3, [pc, #248]	@ (8005700 <UG_DrawLine+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005610:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005614:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005618:	4798      	blx	r3

   if( dxabs >= dyabs )
 800561a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800561e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005622:	429a      	cmp	r2, r3
 8005624:	db33      	blt.n	800568e <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005626:	2300      	movs	r3, #0
 8005628:	83fb      	strh	r3, [r7, #30]
 800562a:	e029      	b.n	8005680 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800562c:	8b7a      	ldrh	r2, [r7, #26]
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	4413      	add	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005636:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800563a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800563e:	429a      	cmp	r2, r3
 8005640:	db09      	blt.n	8005656 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005642:	8b7a      	ldrh	r2, [r7, #26]
 8005644:	8a3b      	ldrh	r3, [r7, #16]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	b29b      	uxth	r3, r3
 800564a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800564c:	8afa      	ldrh	r2, [r7, #22]
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	4413      	add	r3, r2
 8005652:	b29b      	uxth	r3, r3
 8005654:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005656:	8b3a      	ldrh	r2, [r7, #24]
 8005658:	89bb      	ldrh	r3, [r7, #12]
 800565a:	4413      	add	r3, r2
 800565c:	b29b      	uxth	r3, r3
 800565e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005660:	4b27      	ldr	r3, [pc, #156]	@ (8005700 <UG_DrawLine+0x1bc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800566a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800566e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005672:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005674:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005678:	b29b      	uxth	r3, r3
 800567a:	3301      	adds	r3, #1
 800567c:	b29b      	uxth	r3, r3
 800567e:	83fb      	strh	r3, [r7, #30]
 8005680:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005684:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	dbcf      	blt.n	800562c <UG_DrawLine+0xe8>
 800568c:	e034      	b.n	80056f8 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800568e:	2300      	movs	r3, #0
 8005690:	83fb      	strh	r3, [r7, #30]
 8005692:	e029      	b.n	80056e8 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005694:	8bba      	ldrh	r2, [r7, #28]
 8005696:	8a3b      	ldrh	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	b29b      	uxth	r3, r3
 800569c:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800569e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80056a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	db09      	blt.n	80056be <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80056aa:	8bba      	ldrh	r2, [r7, #28]
 80056ac:	89fb      	ldrh	r3, [r7, #14]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 80056b4:	8b3a      	ldrh	r2, [r7, #24]
 80056b6:	89bb      	ldrh	r3, [r7, #12]
 80056b8:	4413      	add	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 80056be:	8afa      	ldrh	r2, [r7, #22]
 80056c0:	897b      	ldrh	r3, [r7, #10]
 80056c2:	4413      	add	r3, r2
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 80056c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <UG_DrawLine+0x1bc>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80056d2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80056d6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80056da:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 80056dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3301      	adds	r3, #1
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	83fb      	strh	r3, [r7, #30]
 80056e8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80056ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	dbcf      	blt.n	8005694 <UG_DrawLine+0x150>
 80056f4:	e000      	b.n	80056f8 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80056f6:	bf00      	nop
      }
   }  
}
 80056f8:	3720      	adds	r7, #32
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bdb0      	pop	{r4, r5, r7, pc}
 80056fe:	bf00      	nop
 8005700:	2001c4d0 	.word	0x2001c4d0

08005704 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8005704:	b590      	push	{r4, r7, lr}
 8005706:	b087      	sub	sp, #28
 8005708:	af02      	add	r7, sp, #8
 800570a:	4603      	mov	r3, r0
 800570c:	603a      	str	r2, [r7, #0]
 800570e:	80fb      	strh	r3, [r7, #6]
 8005710:	460b      	mov	r3, r1
 8005712:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8005714:	88fb      	ldrh	r3, [r7, #6]
 8005716:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8005718:	88bb      	ldrh	r3, [r7, #4]
 800571a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800571c:	4b44      	ldr	r3, [pc, #272]	@ (8005830 <UG_PutString+0x12c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fa96 	bl	8005c54 <_UG_FontSelect>
   while ( *str != 0 )
 8005728:	e064      	b.n	80057f4 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800572a:	4b41      	ldr	r3, [pc, #260]	@ (8005830 <UG_PutString+0x12c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8005736:	463b      	mov	r3, r7
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f8c7 	bl	80058cc <_UG_DecodeUTF8>
 800573e:	4603      	mov	r3, r0
 8005740:	817b      	strh	r3, [r7, #10]
 8005742:	e004      	b.n	800574e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	603a      	str	r2, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	2b0a      	cmp	r3, #10
 8005752:	d105      	bne.n	8005760 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8005754:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <UG_PutString+0x12c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	81fb      	strh	r3, [r7, #14]
         continue;
 800575e:	e049      	b.n	80057f4 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8005760:	897b      	ldrh	r3, [r7, #10]
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f000 f929 	bl	80059bc <_UG_GetCharData>
 800576a:	4603      	mov	r3, r0
 800576c:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800576e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d03c      	beq.n	80057f2 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8005778:	4b2d      	ldr	r3, [pc, #180]	@ (8005830 <UG_PutString+0x12c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005782:	4619      	mov	r1, r3
 8005784:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005788:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800578c:	4413      	add	r3, r2
 800578e:	4299      	cmp	r1, r3
 8005790:	dc11      	bgt.n	80057b6 <UG_PutString+0xb2>
      {
         xp = x;
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8005796:	4b26      	ldr	r3, [pc, #152]	@ (8005830 <UG_PutString+0x12c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800579e:	b21b      	sxth	r3, r3
 80057a0:	4a23      	ldr	r2, [pc, #140]	@ (8005830 <UG_PutString+0x12c>)
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 80057a8:	4413      	add	r3, r2
 80057aa:	b21b      	sxth	r3, r3
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	89bb      	ldrh	r3, [r7, #12]
 80057b0:	4413      	add	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80057b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005830 <UG_PutString+0x12c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 80057be:	4b1c      	ldr	r3, [pc, #112]	@ (8005830 <UG_PutString+0x12c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 80057c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057ca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80057ce:	8978      	ldrh	r0, [r7, #10]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	4623      	mov	r3, r4
 80057d4:	f000 fac0 	bl	8005d58 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80057d8:	4b15      	ldr	r3, [pc, #84]	@ (8005830 <UG_PutString+0x12c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	893b      	ldrh	r3, [r7, #8]
 80057e4:	4413      	add	r3, r2
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	89fb      	ldrh	r3, [r7, #14]
 80057ea:	4413      	add	r3, r2
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	81fb      	strh	r3, [r7, #14]
 80057f0:	e000      	b.n	80057f4 <UG_PutString+0xf0>
      if(cw==-1) continue;
 80057f2:	bf00      	nop
   while ( *str != 0 )
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d196      	bne.n	800572a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <UG_PutString+0x12c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00c      	beq.n	8005826 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800580c:	4b08      	ldr	r3, [pc, #32]	@ (8005830 <UG_PutString+0x12c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005812:	461c      	mov	r4, r3
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	f04f 32ff 	mov.w	r2, #4294967295
 800581c:	f04f 31ff 	mov.w	r1, #4294967295
 8005820:	f04f 30ff 	mov.w	r0, #4294967295
 8005824:	47a0      	blx	r4
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}
 800582e:	bf00      	nop
 8005830:	2001c4d0 	.word	0x2001c4d0

08005834 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800583e:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <UG_SetForecolor+0x20>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	88fa      	ldrh	r2, [r7, #6]
 8005844:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	2001c4d0 	.word	0x2001c4d0

08005858 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8005862:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <UG_SetBackcolor+0x20>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	88fa      	ldrh	r2, [r7, #6]
 8005868:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	2001c4d0 	.word	0x2001c4d0

0800587c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <UG_FontSetHSpace+0x24>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	88fa      	ldrh	r2, [r7, #6]
 800588c:	b252      	sxtb	r2, r2
 800588e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2001c4d0 	.word	0x2001c4d0

080058a4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80058ae:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <UG_FontSetVSpace+0x24>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	88fa      	ldrh	r2, [r7, #6]
 80058b4:	b252      	sxtb	r2, r2
 80058b6:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	2001c4d0 	.word	0x2001c4d0

080058cc <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  char c=**str;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 80058dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db07      	blt.n	80058f4 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
    return c;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	e05c      	b.n	80059ae <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	81bb      	strh	r3, [r7, #12]

  while(**str)
 80058fc:	e04f      	b.n	800599e <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d130      	bne.n	8005978 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	2bdf      	cmp	r3, #223	@ 0xdf
 800591a:	d806      	bhi.n	800592a <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800591c:	2301      	movs	r3, #1
 800591e:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	73fb      	strb	r3, [r7, #15]
 8005928:	e023      	b.n	8005972 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	2bef      	cmp	r3, #239	@ 0xef
 800592e:	d806      	bhi.n	800593e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8005930:	2302      	movs	r3, #2
 8005932:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e019      	b.n	8005972 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2bf7      	cmp	r3, #247	@ 0xf7
 8005942:	d806      	bhi.n	8005952 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8005944:	2303      	movs	r3, #3
 8005946:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e00f      	b.n	8005972 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2bfb      	cmp	r3, #251	@ 0xfb
 8005956:	d806      	bhi.n	8005966 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8005958:	2304      	movs	r3, #4
 800595a:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	e005      	b.n	8005972 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8005966:	2305      	movs	r3, #5
 8005968:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	81bb      	strh	r3, [r7, #12]
 8005976:	e012      	b.n	800599e <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8005978:	89bb      	ldrh	r3, [r7, #12]
 800597a:	019b      	lsls	r3, r3, #6
 800597c:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	b21b      	sxth	r3, r3
 8005982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005986:	b21a      	sxth	r2, r3
 8005988:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800598c:	4313      	orrs	r3, r2
 800598e:	b21b      	sxth	r3, r3
 8005990:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	3b01      	subs	r3, #1
 8005996:	73bb      	strb	r3, [r7, #14]
 8005998:	7bbb      	ldrb	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <_UG_DecodeUTF8+0xde>
  while(**str)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1aa      	bne.n	80058fe <_UG_DecodeUTF8+0x32>
 80059a8:	e000      	b.n	80059ac <_UG_DecodeUTF8+0xe0>
        break;
 80059aa:	bf00      	nop
    }
  }
  return encoding;
 80059ac:	89bb      	ldrh	r3, [r7, #12]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	6039      	str	r1, [r7, #0]
 80059c6:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80059d4:	2300      	movs	r3, #0
 80059d6:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80059d8:	2300      	movs	r3, #0
 80059da:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80059dc:	4b98      	ldr	r3, [pc, #608]	@ (8005c40 <_UG_GetCharData+0x284>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059e2:	4b98      	ldr	r3, [pc, #608]	@ (8005c44 <_UG_GetCharData+0x288>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10f      	bne.n	8005a0a <_UG_GetCharData+0x4e>
 80059ea:	4b97      	ldr	r3, [pc, #604]	@ (8005c48 <_UG_GetCharData+0x28c>)
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d10a      	bne.n	8005a0a <_UG_GetCharData+0x4e>
    if(p){
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80059fa:	4b94      	ldr	r3, [pc, #592]	@ (8005c4c <_UG_GetCharData+0x290>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8005a02:	4b93      	ldr	r3, [pc, #588]	@ (8005c50 <_UG_GetCharData+0x294>)
 8005a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a08:	e116      	b.n	8005c38 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8005a0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80cc 	beq.w	8005bb0 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2bfc      	cmp	r3, #252	@ 0xfc
 8005a1c:	f300 80c8 	bgt.w	8005bb0 <_UG_GetCharData+0x1f4>
 8005a20:	2bd6      	cmp	r3, #214	@ 0xd6
 8005a22:	da09      	bge.n	8005a38 <_UG_GetCharData+0x7c>
 8005a24:	2bc4      	cmp	r3, #196	@ 0xc4
 8005a26:	d06c      	beq.n	8005b02 <_UG_GetCharData+0x146>
 8005a28:	2bc4      	cmp	r3, #196	@ 0xc4
 8005a2a:	f300 80c1 	bgt.w	8005bb0 <_UG_GetCharData+0x1f4>
 8005a2e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005a30:	d06d      	beq.n	8005b0e <_UG_GetCharData+0x152>
 8005a32:	2bb5      	cmp	r3, #181	@ 0xb5
 8005a34:	d068      	beq.n	8005b08 <_UG_GetCharData+0x14c>
 8005a36:	e06e      	b.n	8005b16 <_UG_GetCharData+0x15a>
 8005a38:	3bd6      	subs	r3, #214	@ 0xd6
 8005a3a:	2b26      	cmp	r3, #38	@ 0x26
 8005a3c:	f200 80b8 	bhi.w	8005bb0 <_UG_GetCharData+0x1f4>
 8005a40:	a201      	add	r2, pc, #4	@ (adr r2, 8005a48 <_UG_GetCharData+0x8c>)
 8005a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a46:	bf00      	nop
 8005a48:	08005aeb 	.word	0x08005aeb
 8005a4c:	08005bb1 	.word	0x08005bb1
 8005a50:	08005bb1 	.word	0x08005bb1
 8005a54:	08005bb1 	.word	0x08005bb1
 8005a58:	08005bb1 	.word	0x08005bb1
 8005a5c:	08005bb1 	.word	0x08005bb1
 8005a60:	08005af7 	.word	0x08005af7
 8005a64:	08005bb1 	.word	0x08005bb1
 8005a68:	08005bb1 	.word	0x08005bb1
 8005a6c:	08005bb1 	.word	0x08005bb1
 8005a70:	08005bb1 	.word	0x08005bb1
 8005a74:	08005bb1 	.word	0x08005bb1
 8005a78:	08005bb1 	.word	0x08005bb1
 8005a7c:	08005bb1 	.word	0x08005bb1
 8005a80:	08005afd 	.word	0x08005afd
 8005a84:	08005bb1 	.word	0x08005bb1
 8005a88:	08005bb1 	.word	0x08005bb1
 8005a8c:	08005bb1 	.word	0x08005bb1
 8005a90:	08005bb1 	.word	0x08005bb1
 8005a94:	08005bb1 	.word	0x08005bb1
 8005a98:	08005bb1 	.word	0x08005bb1
 8005a9c:	08005bb1 	.word	0x08005bb1
 8005aa0:	08005bb1 	.word	0x08005bb1
 8005aa4:	08005bb1 	.word	0x08005bb1
 8005aa8:	08005bb1 	.word	0x08005bb1
 8005aac:	08005bb1 	.word	0x08005bb1
 8005ab0:	08005bb1 	.word	0x08005bb1
 8005ab4:	08005bb1 	.word	0x08005bb1
 8005ab8:	08005bb1 	.word	0x08005bb1
 8005abc:	08005bb1 	.word	0x08005bb1
 8005ac0:	08005bb1 	.word	0x08005bb1
 8005ac4:	08005bb1 	.word	0x08005bb1
 8005ac8:	08005ae5 	.word	0x08005ae5
 8005acc:	08005bb1 	.word	0x08005bb1
 8005ad0:	08005bb1 	.word	0x08005bb1
 8005ad4:	08005bb1 	.word	0x08005bb1
 8005ad8:	08005bb1 	.word	0x08005bb1
 8005adc:	08005bb1 	.word	0x08005bb1
 8005ae0:	08005af1 	.word	0x08005af1
    {
       case 0xF6: encoding = 0x94; break; // ö
 8005ae4:	2394      	movs	r3, #148	@ 0x94
 8005ae6:	80fb      	strh	r3, [r7, #6]
 8005ae8:	e015      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8005aea:	2399      	movs	r3, #153	@ 0x99
 8005aec:	80fb      	strh	r3, [r7, #6]
 8005aee:	e012      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8005af0:	2381      	movs	r3, #129	@ 0x81
 8005af2:	80fb      	strh	r3, [r7, #6]
 8005af4:	e00f      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8005af6:	239a      	movs	r3, #154	@ 0x9a
 8005af8:	80fb      	strh	r3, [r7, #6]
 8005afa:	e00c      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8005afc:	2384      	movs	r3, #132	@ 0x84
 8005afe:	80fb      	strh	r3, [r7, #6]
 8005b00:	e009      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8005b02:	238e      	movs	r3, #142	@ 0x8e
 8005b04:	80fb      	strh	r3, [r7, #6]
 8005b06:	e006      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8005b08:	23e6      	movs	r3, #230	@ 0xe6
 8005b0a:	80fb      	strh	r3, [r7, #6]
 8005b0c:	e003      	b.n	8005b16 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8005b0e:	23f8      	movs	r3, #248	@ 0xf8
 8005b10:	80fb      	strh	r3, [r7, #6]
 8005b12:	bf00      	nop
 8005b14:	e04c      	b.n	8005bb0 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005b16:	e04b      	b.n	8005bb0 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8005b18:	4b49      	ldr	r3, [pc, #292]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	8a7a      	ldrh	r2, [r7, #18]
 8005b20:	0052      	lsls	r2, r2, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff fbb5 	bl	8005294 <ptr_8to16>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8005b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da06      	bge.n	8005b44 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8005b36:	89fb      	ldrh	r3, [r7, #14]
 8005b38:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005b3c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8005b3e:	2301      	movs	r3, #1
 8005b40:	747b      	strb	r3, [r7, #17]
 8005b42:	e032      	b.n	8005baa <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8005b44:	7c7b      	ldrb	r3, [r7, #17]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d021      	beq.n	8005b8e <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	8afb      	ldrh	r3, [r7, #22]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d30d      	bcc.n	8005b6e <_UG_GetCharData+0x1b2>
 8005b52:	88fa      	ldrh	r2, [r7, #6]
 8005b54:	89fb      	ldrh	r3, [r7, #14]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d809      	bhi.n	8005b6e <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	8afb      	ldrh	r3, [r7, #22]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	8abb      	ldrh	r3, [r7, #20]
 8005b64:	4413      	add	r3, r2
 8005b66:	82bb      	strh	r3, [r7, #20]
        found=1;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	743b      	strb	r3, [r7, #16]
        break;
 8005b6c:	e02a      	b.n	8005bc4 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	8afb      	ldrh	r3, [r7, #22]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d323      	bcc.n	8005bbe <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8005b76:	89fa      	ldrh	r2, [r7, #14]
 8005b78:	8afb      	ldrh	r3, [r7, #22]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	8abb      	ldrh	r3, [r7, #20]
 8005b80:	4413      	add	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3301      	adds	r3, #1
 8005b86:	82bb      	strh	r3, [r7, #20]
      range=0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	747b      	strb	r3, [r7, #17]
 8005b8c:	e00d      	b.n	8005baa <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	89fb      	ldrh	r3, [r7, #14]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d102      	bne.n	8005b9c <_UG_GetCharData+0x1e0>
      {
        found=1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	743b      	strb	r3, [r7, #16]
        break;
 8005b9a:	e013      	b.n	8005bc4 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	89fb      	ldrh	r3, [r7, #14]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d30e      	bcc.n	8005bc2 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8005ba4:	8abb      	ldrh	r3, [r7, #20]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8005baa:	8a7b      	ldrh	r3, [r7, #18]
 8005bac:	3301      	adds	r3, #1
 8005bae:	827b      	strh	r3, [r7, #18]
 8005bb0:	4b23      	ldr	r3, [pc, #140]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005bb6:	8a7a      	ldrh	r2, [r7, #18]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d3ad      	bcc.n	8005b18 <_UG_GetCharData+0x15c>
 8005bbc:	e002      	b.n	8005bc4 <_UG_GetCharData+0x208>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <_UG_GetCharData+0x208>
        break;
 8005bc2:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8005bc4:	7c3b      	ldrb	r3, [r7, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d034      	beq.n	8005c34 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c44 <_UG_GetCharData+0x288>)
 8005bd2:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8005bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c48 <_UG_GetCharData+0x28c>)
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8005bda:	4b19      	ldr	r3, [pc, #100]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	8aba      	ldrh	r2, [r7, #20]
 8005be2:	4917      	ldr	r1, [pc, #92]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005be4:	6809      	ldr	r1, [r1, #0]
 8005be6:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 8005be8:	fb01 f202 	mul.w	r2, r1, r2
 8005bec:	4413      	add	r3, r2
 8005bee:	4a17      	ldr	r2, [pc, #92]	@ (8005c4c <_UG_GetCharData+0x290>)
 8005bf0:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8005bfc:	4b10      	ldr	r3, [pc, #64]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c02:	8abb      	ldrh	r3, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <_UG_GetCharData+0x294>)
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	e006      	b.n	8005c1e <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8005c10:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <_UG_GetCharData+0x284>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005c18:	b21a      	sxth	r2, r3
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <_UG_GetCharData+0x294>)
 8005c1c:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <_UG_GetCharData+0x290>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8005c2c:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <_UG_GetCharData+0x294>)
 8005c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c32:	e001      	b.n	8005c38 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8005c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	2001c4d0 	.word	0x2001c4d0
 8005c44:	2001c4d4 	.word	0x2001c4d4
 8005c48:	2001c4d8 	.word	0x2001c4d8
 8005c4c:	2001c4dc 	.word	0x2001c4dc
 8005c50:	2001c4e0 	.word	0x2001c4e0

08005c54 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8005c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d070      	beq.n	8005d4a <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8005c68:	4b3a      	ldr	r3, [pc, #232]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	781a      	ldrb	r2, [r3, #0]
 8005c74:	4b37      	ldr	r3, [pc, #220]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da01      	bge.n	8005c94 <_UG_FontSelect+0x40>
 8005c90:	2201      	movs	r2, #1
 8005c92:	e000      	b.n	8005c96 <_UG_FontSelect+0x42>
 8005c94:	2200      	movs	r2, #0
 8005c96:	4b2f      	ldr	r3, [pc, #188]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	607a      	str	r2, [r7, #4]
 8005ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	4a27      	ldr	r2, [pc, #156]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005cb8:	6812      	ldr	r2, [r2, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005cc0:	4b24      	ldr	r3, [pc, #144]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005cc2:	681c      	ldr	r4, [r3, #0]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fae5 	bl	8005294 <ptr_8to16>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3302      	adds	r3, #2
 8005cd2:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8005cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005cd6:	681c      	ldr	r4, [r3, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fadb 	bl	8005294 <ptr_8to16>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3302      	adds	r3, #2
 8005ce6:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005cea:	681c      	ldr	r4, [r3, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fad1 	bl	8005294 <ptr_8to16>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3302      	adds	r3, #2
 8005cfa:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005d08:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8005d10:	4b10      	ldr	r3, [pc, #64]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e003      	b.n	8005d28 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8005d20:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005d28:	4b0a      	ldr	r3, [pc, #40]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8005d30:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	461a      	mov	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8005d40:	4b04      	ldr	r3, [pc, #16]	@ (8005d54 <_UG_FontSelect+0x100>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d48:	e000      	b.n	8005d4c <_UG_FontSelect+0xf8>
    return;
 8005d4a:	bf00      	nop
}
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2001c4d0 	.word	0x2001c4d0

08005d58 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8005d58:	b5b0      	push	{r4, r5, r7, lr}
 8005d5a:	b08c      	sub	sp, #48	@ 0x30
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	4611      	mov	r1, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	4623      	mov	r3, r4
 8005d68:	80fb      	strh	r3, [r7, #6]
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	80bb      	strh	r3, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	807b      	strh	r3, [r7, #2]
 8005d72:	4613      	mov	r3, r2
 8005d74:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8005d7e:	2300      	movs	r3, #0
 8005d80:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d82:	2300      	movs	r3, #0
 8005d84:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8005d86:	4b8b      	ldr	r3, [pc, #556]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	4b88      	ldr	r3, [pc, #544]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8005da2:	f107 0208 	add.w	r2, r7, #8
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff fe06 	bl	80059bc <_UG_GetCharData>
 8005db0:	4603      	mov	r3, r0
 8005db2:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8005db4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d102      	bne.n	8005dc4 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	e224      	b.n	800620e <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 8005dc4:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005dcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 8005dce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <_UG_PutChar+0x80>
     return 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e21a      	b.n	800620e <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 8005dd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005dda:	08db      	lsrs	r3, r3, #3
 8005ddc:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8005dde:	4b75      	ldr	r3, [pc, #468]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <_UG_PutChar+0x9e>
 8005df0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005df2:	3301      	adds	r3, #1
 8005df4:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8005df6:	7dbb      	ldrb	r3, [r7, #22]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01c      	beq.n	8005e36 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e02:	461c      	mov	r4, r3
 8005e04:	88ba      	ldrh	r2, [r7, #4]
 8005e06:	8abb      	ldrh	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	b21a      	sxth	r2, r3
 8005e12:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	887b      	ldrh	r3, [r7, #2]
 8005e1e:	440b      	add	r3, r1
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8005e2c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8005e30:	47a0      	blx	r4
 8005e32:	4603      	mov	r3, r0
 8005e34:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8005e36:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 8171 	bne.w	8006126 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005e44:	2300      	movs	r3, #0
 8005e46:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e48:	e0eb      	b.n	8006022 <_UG_PutChar+0x2ca>
     {
       c=0;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8005e4e:	2300      	movs	r3, #0
 8005e50:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005e52:	e0de      	b.n	8006012 <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	60ba      	str	r2, [r7, #8]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005e5e:	2300      	movs	r3, #0
 8005e60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005e62:	e0c9      	b.n	8005ff8 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8005e64:	7f7b      	ldrb	r3, [r7, #29]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d033      	beq.n	8005ed6 <_UG_PutChar+0x17e>
           {
             if(driver)
 8005e6e:	7dbb      	ldrb	r3, [r7, #22]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01f      	beq.n	8005eb4 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005e74:	8c3b      	ldrh	r3, [r7, #32]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <_UG_PutChar+0x138>
 8005e7a:	7dfb      	ldrb	r3, [r7, #23]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005e80:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8005e84:	8c3a      	ldrh	r2, [r7, #32]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4798      	blx	r3
                 bpixels=0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <_UG_PutChar+0x154>
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8005e9c:	88ba      	ldrh	r2, [r7, #4]
 8005e9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8005ea4:	887a      	ldrh	r2, [r7, #2]
 8005ea6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ea8:	4413      	add	r3, r2
 8005eaa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005eac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005eae:	3301      	adds	r3, #1
 8005eb0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005eb2:	e095      	b.n	8005fe0 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	88b9      	ldrh	r1, [r7, #4]
 8005ebe:	8bfa      	ldrh	r2, [r7, #30]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	b292      	uxth	r2, r2
 8005ec4:	b210      	sxth	r0, r2
 8005ec6:	8879      	ldrh	r1, [r7, #2]
 8005ec8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005eca:	440a      	add	r2, r1
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	b211      	sxth	r1, r2
 8005ed0:	883a      	ldrh	r2, [r7, #0]
 8005ed2:	4798      	blx	r3
 8005ed4:	e084      	b.n	8005fe0 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8005ed6:	7dbb      	ldrb	r3, [r7, #22]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d06d      	beq.n	8005fb8 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8005edc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d064      	beq.n	8005fac <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d15e      	bne.n	8005fa6 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 8005ee8:	8839      	ldrh	r1, [r7, #0]
 8005eea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4798      	blx	r3
                   fpixels=0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ef6:	e059      	b.n	8005fac <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005ef8:	88ba      	ldrh	r2, [r7, #4]
 8005efa:	8abb      	ldrh	r3, [r7, #20]
 8005efc:	4413      	add	r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8005f06:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d003      	beq.n	8005f18 <_UG_PutChar+0x1c0>
 8005f10:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005f12:	89fb      	ldrh	r3, [r7, #14]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d224      	bcs.n	8005f62 <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005f18:	4b26      	ldr	r3, [pc, #152]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f1e:	461d      	mov	r5, r3
 8005f20:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005f24:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005f28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f2a:	89fb      	ldrh	r3, [r7, #14]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b21c      	sxth	r4, r3
 8005f36:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005f38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005f3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005f44:	4413      	add	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b21b      	sxth	r3, r3
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	47a8      	blx	r5
 8005f4e:	4603      	mov	r3, r0
 8005f50:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005f52:	8839      	ldrh	r1, [r7, #0]
 8005f54:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
                       fpixels=0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f60:	e021      	b.n	8005fa6 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <_UG_PutChar+0x25c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f68:	461c      	mov	r4, r3
 8005f6a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8005f6e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8005f72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	4413      	add	r3, r2
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	b21a      	sxth	r2, r3
 8005f80:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8005f84:	47a0      	blx	r4
 8005f86:	4603      	mov	r3, r0
 8005f88:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005f8a:	8839      	ldrh	r1, [r7, #0]
 8005f8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
                       fpixels -= width;
 8005f94:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005f96:	89fb      	ldrh	r3, [r7, #14]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8005f9c:	88bb      	ldrh	r3, [r7, #4]
 8005f9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 8005fa0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8005fa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1a5      	bne.n	8005ef8 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8005fac:	8c3b      	ldrh	r3, [r7, #32]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	843b      	strh	r3, [r7, #32]
 8005fb2:	e015      	b.n	8005fe0 <_UG_PutChar+0x288>
 8005fb4:	2001c4d0 	.word	0x2001c4d0
             }
             else if(!trans)                           // Not accelerated output
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 8005fbe:	4b96      	ldr	r3, [pc, #600]	@ (8006218 <_UG_PutChar+0x4c0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	88b9      	ldrh	r1, [r7, #4]
 8005fc8:	8bfa      	ldrh	r2, [r7, #30]
 8005fca:	440a      	add	r2, r1
 8005fcc:	b292      	uxth	r2, r2
 8005fce:	b210      	sxth	r0, r2
 8005fd0:	8879      	ldrh	r1, [r7, #2]
 8005fd2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005fd4:	440a      	add	r2, r1
 8005fd6:	b292      	uxth	r2, r2
 8005fd8:	b211      	sxth	r1, r2
 8005fda:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005fde:	4798      	blx	r3
             }
           }
           b >>= 1;
 8005fe0:	7f7b      	ldrb	r3, [r7, #29]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	777b      	strb	r3, [r7, #29]
           c++;
 8005fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3301      	adds	r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005ff2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005ff8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ffa:	2b07      	cmp	r3, #7
 8005ffc:	d806      	bhi.n	800600c <_UG_PutChar+0x2b4>
 8005ffe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006002:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006006:	429a      	cmp	r2, r3
 8006008:	f6ff af2c 	blt.w	8005e64 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 800600c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800600e:	3301      	adds	r3, #1
 8006010:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006012:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006016:	429a      	cmp	r2, r3
 8006018:	f4ff af1c 	bcc.w	8005e54 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800601c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800601e:	3301      	adds	r3, #1
 8006020:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006022:	4b7d      	ldr	r3, [pc, #500]	@ (8006218 <_UG_PutChar+0x4c0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800602a:	461a      	mov	r2, r3
 800602c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800602e:	4293      	cmp	r3, r2
 8006030:	f4ff af0b 	bcc.w	8005e4a <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006034:	7dbb      	ldrb	r3, [r7, #22]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80e7 	beq.w	800620a <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 800603c:	8c3b      	ldrh	r3, [r7, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d009      	beq.n	8006056 <_UG_PutChar+0x2fe>
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8006048:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800604c:	8c3a      	ldrh	r2, [r7, #32]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4610      	mov	r0, r2
 8006052:	4798      	blx	r3
 8006054:	e0d9      	b.n	800620a <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8006056:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 80d6 	beq.w	800620a <_UG_PutChar+0x4b2>
       {
         if(!trans)
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d15c      	bne.n	800611e <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8006064:	8839      	ldrh	r1, [r7, #0]
 8006066:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	4610      	mov	r0, r2
 800606c:	4798      	blx	r3
 800606e:	e0cc      	b.n	800620a <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006070:	88ba      	ldrh	r2, [r7, #4]
 8006072:	8abb      	ldrh	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	b29a      	uxth	r2, r3
 8006078:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800607e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006080:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d003      	beq.n	8006090 <_UG_PutChar+0x338>
 8006088:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800608a:	8a3b      	ldrh	r3, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d224      	bcs.n	80060da <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006090:	4b61      	ldr	r3, [pc, #388]	@ (8006218 <_UG_PutChar+0x4c0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006096:	461d      	mov	r5, r3
 8006098:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800609c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80060a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060a2:	8a3b      	ldrh	r3, [r7, #16]
 80060a4:	4413      	add	r3, r2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	b21c      	sxth	r4, r3
 80060ae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80060bc:	4413      	add	r3, r2
 80060be:	b29b      	uxth	r3, r3
 80060c0:	b21b      	sxth	r3, r3
 80060c2:	4622      	mov	r2, r4
 80060c4:	47a8      	blx	r5
 80060c6:	4603      	mov	r3, r0
 80060c8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80060ca:	8839      	ldrh	r1, [r7, #0]
 80060cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
               fpixels=0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80060d8:	e021      	b.n	800611e <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80060da:	4b4f      	ldr	r3, [pc, #316]	@ (8006218 <_UG_PutChar+0x4c0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e0:	461c      	mov	r4, r3
 80060e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80060e6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80060ea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060ec:	8a3b      	ldrh	r3, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	b21a      	sxth	r2, r3
 80060f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80060fc:	47a0      	blx	r4
 80060fe:	4603      	mov	r3, r0
 8006100:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006102:	8839      	ldrh	r1, [r7, #0]
 8006104:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
               fpixels -= width;
 800610c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800610e:	8a3b      	ldrh	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8006114:	88bb      	ldrh	r3, [r7, #4]
 8006116:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8006118:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800611a:	3301      	adds	r3, #1
 800611c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 800611e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1a5      	bne.n	8006070 <_UG_PutChar+0x318>
 8006124:	e071      	b.n	800620a <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006126:	4b3c      	ldr	r3, [pc, #240]	@ (8006218 <_UG_PutChar+0x4c0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d16b      	bne.n	800620a <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006132:	2300      	movs	r3, #0
 8006134:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006136:	e060      	b.n	80061fa <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8006138:	2300      	movs	r3, #0
 800613a:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800613c:	e04a      	b.n	80061d4 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	60ba      	str	r2, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006148:	883b      	ldrh	r3, [r7, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	7f7a      	ldrb	r2, [r7, #29]
 800614e:	fb03 f202 	mul.w	r2, r3, r2
 8006152:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006156:	b2db      	uxtb	r3, r3
 8006158:	7f79      	ldrb	r1, [r7, #29]
 800615a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	121b      	asrs	r3, r3, #8
 8006166:	b21b      	sxth	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800616c:	883b      	ldrh	r3, [r7, #0]
 800616e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006172:	7f79      	ldrb	r1, [r7, #29]
 8006174:	fb03 f101 	mul.w	r1, r3, r1
 8006178:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800617c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006180:	7f78      	ldrb	r0, [r7, #29]
 8006182:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8006186:	fb00 f303 	mul.w	r3, r0, r3
 800618a:	440b      	add	r3, r1
 800618c:	121b      	asrs	r3, r3, #8
 800618e:	b21b      	sxth	r3, r3
 8006190:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006194:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006196:	4313      	orrs	r3, r2
 8006198:	b21b      	sxth	r3, r3
 800619a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80061a2:	8a7a      	ldrh	r2, [r7, #18]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	4611      	mov	r1, r2
 80061a8:	2001      	movs	r0, #1
 80061aa:	4798      	blx	r3
 80061ac:	e00f      	b.n	80061ce <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80061ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006218 <_UG_PutChar+0x4c0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	88b9      	ldrh	r1, [r7, #4]
 80061b8:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80061ba:	440a      	add	r2, r1
 80061bc:	b292      	uxth	r2, r2
 80061be:	b210      	sxth	r0, r2
 80061c0:	8879      	ldrh	r1, [r7, #2]
 80061c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80061c4:	440a      	add	r2, r1
 80061c6:	b292      	uxth	r2, r2
 80061c8:	b211      	sxth	r1, r2
 80061ca:	8a7a      	ldrh	r2, [r7, #18]
 80061cc:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80061ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061d0:	3301      	adds	r3, #1
 80061d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80061d4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80061d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80061da:	429a      	cmp	r2, r3
 80061dc:	dbaf      	blt.n	800613e <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006218 <_UG_PutChar+0x4c0>)
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80061e8:	4611      	mov	r1, r2
 80061ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80061ee:	1a8a      	subs	r2, r1, r2
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80061f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061f6:	3301      	adds	r3, #1
 80061f8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061fa:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <_UG_PutChar+0x4c0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006202:	461a      	mov	r2, r3
 8006204:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006206:	4293      	cmp	r3, r2
 8006208:	d396      	bcc.n	8006138 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 800620a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3730      	adds	r7, #48	@ 0x30
 8006212:	46bd      	mov	sp, r7
 8006214:	bdb0      	pop	{r4, r5, r7, pc}
 8006216:	bf00      	nop
 8006218:	2001c4d0 	.word	0x2001c4d0

0800621c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8006224:	4b57      	ldr	r3, [pc, #348]	@ (8006384 <_UG_ProcessTouchData+0x168>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	88db      	ldrh	r3, [r3, #6]
 800622a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 800622c:	4b55      	ldr	r3, [pc, #340]	@ (8006384 <_UG_ProcessTouchData+0x168>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	891b      	ldrh	r3, [r3, #8]
 8006232:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8006234:	4b53      	ldr	r3, [pc, #332]	@ (8006384 <_UG_ProcessTouchData+0x168>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	791b      	ldrb	r3, [r3, #4]
 800623a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	83fb      	strh	r3, [r7, #30]
 8006246:	e090      	b.n	800636a <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	8bfb      	ldrh	r3, [r7, #30]
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	4413      	add	r3, r2
 8006252:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d179      	bne.n	800635e <_UG_ProcessTouchData+0x142>
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d074      	beq.n	800635e <_UG_ProcessTouchData+0x142>
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06f      	beq.n	800635e <_UG_ProcessTouchData+0x142>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b00      	cmp	r3, #0
 8006286:	d16a      	bne.n	800635e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d047      	beq.n	800631e <_UG_ProcessTouchData+0x102>
 800628e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006296:	d042      	beq.n	800631e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8006298:	7f7b      	ldrb	r3, [r7, #29]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80062a2:	7f7b      	ldrb	r3, [r7, #29]
 80062a4:	f043 0305 	orr.w	r3, r3, #5
 80062a8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80062aa:	7f7b      	ldrb	r3, [r7, #29]
 80062ac:	f023 0318 	bic.w	r3, r3, #24
 80062b0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80062b2:	7f7b      	ldrb	r3, [r7, #29]
 80062b4:	f023 0320 	bic.w	r3, r3, #32
 80062b8:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062c0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	db25      	blt.n	8006314 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80062ce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	dc1e      	bgt.n	8006314 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80062dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	db17      	blt.n	8006314 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80062ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	dc10      	bgt.n	8006314 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80062f2:	7f7b      	ldrb	r3, [r7, #29]
 80062f4:	f043 0320 	orr.w	r3, r3, #32
 80062f8:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80062fa:	7f7b      	ldrb	r3, [r7, #29]
 80062fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8006304:	7f7b      	ldrb	r3, [r7, #29]
 8006306:	f023 0304 	bic.w	r3, r3, #4
 800630a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800630c:	7f7b      	ldrb	r3, [r7, #29]
 800630e:	f043 0302 	orr.w	r3, r3, #2
 8006312:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8006314:	7f7b      	ldrb	r3, [r7, #29]
 8006316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800631a:	777b      	strb	r3, [r7, #29]
 800631c:	e01f      	b.n	800635e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800631e:	7f7b      	ldrb	r3, [r7, #29]
 8006320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01a      	beq.n	800635e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8006328:	7f7b      	ldrb	r3, [r7, #29]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8006332:	7f7b      	ldrb	r3, [r7, #29]
 8006334:	f043 0308 	orr.w	r3, r3, #8
 8006338:	777b      	strb	r3, [r7, #29]
 800633a:	e003      	b.n	8006344 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800633c:	7f7b      	ldrb	r3, [r7, #29]
 800633e:	f043 0310 	orr.w	r3, r3, #16
 8006342:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8006344:	7f7b      	ldrb	r3, [r7, #29]
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800634e:	7f7b      	ldrb	r3, [r7, #29]
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8006356:	7f7b      	ldrb	r3, [r7, #29]
 8006358:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 800635c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	7f7a      	ldrb	r2, [r7, #29]
 8006362:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8006364:	8bfb      	ldrh	r3, [r7, #30]
 8006366:	3301      	adds	r3, #1
 8006368:	83fb      	strh	r3, [r7, #30]
 800636a:	8bfa      	ldrh	r2, [r7, #30]
 800636c:	8abb      	ldrh	r3, [r7, #20]
 800636e:	429a      	cmp	r2, r3
 8006370:	f4ff af6a 	bcc.w	8006248 <_UG_ProcessTouchData+0x2c>
   }
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	3724      	adds	r7, #36	@ 0x24
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2001c4d0 	.word	0x2001c4d0

08006388 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	82fb      	strh	r3, [r7, #22]
 800639a:	e035      	b.n	8006408 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	8afb      	ldrh	r3, [r7, #22]
 80063a2:	015b      	lsls	r3, r3, #5
 80063a4:	4413      	add	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d121      	bne.n	8006402 <_UG_UpdateObjects+0x7a>
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01c      	beq.n	8006402 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	6939      	ldr	r1, [r7, #16]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	f003 0308 	and.w	r3, r3, #8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <_UG_UpdateObjects+0x7a>
 80063e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	da09      	bge.n	8006402 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	6939      	ldr	r1, [r7, #16]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006402:	8afb      	ldrh	r3, [r7, #22]
 8006404:	3301      	adds	r3, #1
 8006406:	82fb      	strh	r3, [r7, #22]
 8006408:	8afa      	ldrh	r2, [r7, #22]
 800640a:	8abb      	ldrh	r3, [r7, #20]
 800640c:	429a      	cmp	r2, r3
 800640e:	d3c5      	bcc.n	800639c <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006424:	4b22      	ldr	r3, [pc, #136]	@ (80064b0 <_UG_HandleEvents+0x94>)
 8006426:	2200      	movs	r2, #0
 8006428:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800642a:	4b21      	ldr	r3, [pc, #132]	@ (80064b0 <_UG_HandleEvents+0x94>)
 800642c:	2202      	movs	r2, #2
 800642e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006436:	2300      	movs	r3, #0
 8006438:	82fb      	strh	r3, [r7, #22]
 800643a:	e02f      	b.n	800649c <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	8afb      	ldrh	r3, [r7, #22]
 8006442:	015b      	lsls	r3, r3, #5
 8006444:	4413      	add	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d11e      	bne.n	8006496 <_UG_HandleEvents+0x7a>
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d019      	beq.n	8006496 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	7e9b      	ldrb	r3, [r3, #26]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d015      	beq.n	8006496 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800646a:	4a11      	ldr	r2, [pc, #68]	@ (80064b0 <_UG_HandleEvents+0x94>)
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	7e1a      	ldrb	r2, [r3, #24]
 8006474:	4b0e      	ldr	r3, [pc, #56]	@ (80064b0 <_UG_HandleEvents+0x94>)
 8006476:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	7e5a      	ldrb	r2, [r3, #25]
 800647c:	4b0c      	ldr	r3, [pc, #48]	@ (80064b0 <_UG_HandleEvents+0x94>)
 800647e:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	7e9a      	ldrb	r2, [r3, #26]
 8006484:	4b0a      	ldr	r3, [pc, #40]	@ (80064b0 <_UG_HandleEvents+0x94>)
 8006486:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648c:	4808      	ldr	r0, [pc, #32]	@ (80064b0 <_UG_HandleEvents+0x94>)
 800648e:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2200      	movs	r2, #0
 8006494:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006496:	8afb      	ldrh	r3, [r7, #22]
 8006498:	3301      	adds	r3, #1
 800649a:	82fb      	strh	r3, [r7, #22]
 800649c:	8afa      	ldrh	r2, [r7, #22]
 800649e:	8abb      	ldrh	r3, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3cb      	bcc.n	800643c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80064a4:	bf00      	nop
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	2001c4e4 	.word	0x2001c4e4

080064b4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80064b4:	b590      	push	{r4, r7, lr}
 80064b6:	b08f      	sub	sp, #60	@ 0x3c
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 812c 	beq.w	800671e <_UG_PutText+0x26a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8127 	beq.w	800671e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	89db      	ldrh	r3, [r3, #14]
 80064d4:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	895b      	ldrh	r3, [r3, #10]
 80064da:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	3302      	adds	r3, #2
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 80064e6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80064ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	f2c0 8114 	blt.w	8006722 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	891b      	ldrh	r3, [r3, #8]
 80064fe:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	899b      	ldrh	r3, [r3, #12]
 8006504:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7d1b      	ldrb	r3, [r3, #20]
 800650a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	8adb      	ldrh	r3, [r3, #22]
 8006510:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	8b1b      	ldrh	r3, [r3, #24]
 8006516:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fb94 	bl	8005c54 <_UG_FontSelect>

   rc=1;
 800652c:	2301      	movs	r3, #1
 800652e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006534:	4b80      	ldr	r3, [pc, #512]	@ (8006738 <_UG_PutText+0x284>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8006540:	f107 0308 	add.w	r3, r7, #8
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff f9c1 	bl	80058cc <_UG_DecodeUTF8>
 800654a:	4603      	mov	r3, r0
 800654c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800654e:	e004      	b.n	800655a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	60ba      	str	r2, [r7, #8]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 800655a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8006560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006562:	2b0a      	cmp	r3, #10
 8006564:	d1e6      	bne.n	8006534 <_UG_PutText+0x80>
 8006566:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006568:	3301      	adds	r3, #1
 800656a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800656c:	e7e2      	b.n	8006534 <_UG_PutText+0x80>
     if(!chr) break;
 800656e:	bf00      	nop
   }

   yp = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006574:	7e7b      	ldrb	r3, [r7, #25]
 8006576:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d01f      	beq.n	80065be <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 800657e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006580:	8c3b      	ldrh	r3, [r7, #32]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	3301      	adds	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 800658c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800658e:	8bfb      	ldrh	r3, [r7, #30]
 8006590:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8006592:	fb11 f303 	smulbb	r3, r1, r3
 8006596:	b29b      	uxth	r3, r3
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	b29b      	uxth	r3, r3
 800659c:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 800659e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80065a0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b299      	uxth	r1, r3
 80065a6:	8abb      	ldrh	r3, [r7, #20]
 80065a8:	fb11 f303 	smulbb	r3, r1, r3
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 80065b4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f2c0 80b4 	blt.w	8006726 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80065be:	7e7b      	ldrb	r3, [r7, #25]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <_UG_PutText+0x11c>
 80065c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80065cc:	105b      	asrs	r3, r3, #1
 80065ce:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 80065d0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80065d2:	8c3b      	ldrh	r3, [r7, #32]
 80065d4:	4413      	add	r3, r2
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 80065da:	2300      	movs	r3, #0
 80065dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	60bb      	str	r3, [r7, #8]
      wl = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80065e6:	4b54      	ldr	r3, [pc, #336]	@ (8006738 <_UG_PutText+0x284>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d107      	bne.n	8006602 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff f968 	bl	80058cc <_UG_DecodeUTF8>
 80065fc:	4603      	mov	r3, r0
 80065fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006600:	e004      	b.n	800660c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	60ba      	str	r2, [r7, #8]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 800660c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01b      	beq.n	800664a <_UG_PutText+0x196>
 8006612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006614:	2b0a      	cmp	r3, #10
 8006616:	d018      	beq.n	800664a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff f9cd 	bl	80059bc <_UG_GetCharData>
 8006622:	4603      	mov	r3, r0
 8006624:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8006626:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d00a      	beq.n	8006646 <_UG_PutText+0x192>
         sl++;
 8006630:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006632:	3301      	adds	r3, #1
 8006634:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8006636:	8a7a      	ldrh	r2, [r7, #18]
 8006638:	8afb      	ldrh	r3, [r7, #22]
 800663a:	4413      	add	r3, r2
 800663c:	b29a      	uxth	r2, r3
 800663e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006640:	4413      	add	r3, r2
 8006642:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006644:	e7cf      	b.n	80065e6 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8006646:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006648:	e7cd      	b.n	80065e6 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 800664a:	8afb      	ldrh	r3, [r7, #22]
 800664c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8006652:	8b7a      	ldrh	r2, [r7, #26]
 8006654:	8bbb      	ldrh	r3, [r7, #28]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	b29b      	uxth	r3, r3
 800665a:	3301      	adds	r3, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8006660:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006662:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	b29b      	uxth	r3, r3
 8006668:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 800666a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800666e:	2b00      	cmp	r3, #0
 8006670:	db5b      	blt.n	800672a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006672:	7e7b      	ldrb	r3, [r7, #25]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <_UG_PutText+0x1ce>
 800667c:	2300      	movs	r3, #0
 800667e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006680:	e008      	b.n	8006694 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006682:	7e7b      	ldrb	r3, [r7, #25]
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <_UG_PutText+0x1e0>
 800668c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8006690:	105b      	asrs	r3, r3, #1
 8006692:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8006694:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006696:	8bbb      	ldrh	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	b29b      	uxth	r3, r3
 800669c:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800669e:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <_UG_PutText+0x284>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff f90c 	bl	80058cc <_UG_DecodeUTF8>
 80066b4:	4603      	mov	r3, r0
 80066b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80066b8:	e004      	b.n	80066c4 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	60fa      	str	r2, [r7, #12]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 80066c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d031      	beq.n	800672e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 80066ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80066cc:	2b0a      	cmp	r3, #10
 80066ce:	d01c      	beq.n	800670a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8a1c      	ldrh	r4, [r3, #16]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8a5b      	ldrh	r3, [r3, #18]
 80066d8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80066dc:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 80066e0:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4623      	mov	r3, r4
 80066e6:	f7ff fb37 	bl	8005d58 <_UG_PutChar>
 80066ea:	4603      	mov	r3, r0
 80066ec:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 80066ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d0d2      	beq.n	800669e <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 80066f8:	8a7a      	ldrh	r2, [r7, #18]
 80066fa:	8afb      	ldrh	r3, [r7, #22]
 80066fc:	4413      	add	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006702:	4413      	add	r3, r2
 8006704:	b29b      	uxth	r3, r3
 8006706:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8006708:	e7c9      	b.n	800669e <_UG_PutText+0x1ea>
           break;
 800670a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 800670c:	8bfa      	ldrh	r2, [r7, #30]
 800670e:	8abb      	ldrh	r3, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006716:	4413      	add	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 800671c:	e75d      	b.n	80065da <_UG_PutText+0x126>
     return;
 800671e:	bf00      	nop
 8006720:	e006      	b.n	8006730 <_UG_PutText+0x27c>
     return;
 8006722:	bf00      	nop
 8006724:	e004      	b.n	8006730 <_UG_PutText+0x27c>
        return;
 8006726:	bf00      	nop
 8006728:	e002      	b.n	8006730 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 800672a:	bf00      	nop
 800672c:	e000      	b.n	8006730 <_UG_PutText+0x27c>
           return;
 800672e:	bf00      	nop
   }
}
 8006730:	3734      	adds	r7, #52	@ 0x34
 8006732:	46bd      	mov	sp, r7
 8006734:	bd90      	pop	{r4, r7, pc}
 8006736:	bf00      	nop
 8006738:	2001c4d0 	.word	0x2001c4d0

0800673c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800673c:	b5b0      	push	{r4, r5, r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af02      	add	r7, sp, #8
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4623      	mov	r3, r4
 800674c:	80fb      	strh	r3, [r7, #6]
 800674e:	4603      	mov	r3, r0
 8006750:	80bb      	strh	r3, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	807b      	strh	r3, [r7, #2]
 8006756:	4613      	mov	r3, r2
 8006758:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800675a:	887b      	ldrh	r3, [r7, #2]
 800675c:	3b01      	subs	r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	b21c      	sxth	r4, r3
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	1c9a      	adds	r2, r3, #2
 8006766:	61ba      	str	r2, [r7, #24]
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800676e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006772:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	4622      	mov	r2, r4
 800677c:	f7fe fee2 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006780:	88bb      	ldrh	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	b219      	sxth	r1, r3
 8006788:	883b      	ldrh	r3, [r7, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	b21c      	sxth	r4, r3
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	1c9a      	adds	r2, r3, #2
 8006794:	61ba      	str	r2, [r7, #24]
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800679c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4623      	mov	r3, r4
 80067a4:	f7fe fece 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	1c9a      	adds	r2, r3, #2
 80067ac:	61ba      	str	r2, [r7, #24]
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80067b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80067b8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80067bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	4623      	mov	r3, r4
 80067c4:	f7fe febe 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80067c8:	883b      	ldrh	r3, [r7, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	b21c      	sxth	r4, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	1c9a      	adds	r2, r3, #2
 80067d4:	61ba      	str	r2, [r7, #24]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80067dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80067e0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4623      	mov	r3, r4
 80067e8:	f7fe feac 	bl	8005544 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	3301      	adds	r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	b218      	sxth	r0, r3
 80067f4:	88bb      	ldrh	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	b219      	sxth	r1, r3
 80067fc:	887b      	ldrh	r3, [r7, #2]
 80067fe:	3b02      	subs	r3, #2
 8006800:	b29b      	uxth	r3, r3
 8006802:	b21c      	sxth	r4, r3
 8006804:	88bb      	ldrh	r3, [r7, #4]
 8006806:	3301      	adds	r3, #1
 8006808:	b29b      	uxth	r3, r3
 800680a:	b21d      	sxth	r5, r3
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	1c9a      	adds	r2, r3, #2
 8006810:	61ba      	str	r2, [r7, #24]
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	462b      	mov	r3, r5
 8006818:	4622      	mov	r2, r4
 800681a:	f7fe fe93 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800681e:	88fb      	ldrh	r3, [r7, #6]
 8006820:	3301      	adds	r3, #1
 8006822:	b29b      	uxth	r3, r3
 8006824:	b218      	sxth	r0, r3
 8006826:	88bb      	ldrh	r3, [r7, #4]
 8006828:	3302      	adds	r3, #2
 800682a:	b29b      	uxth	r3, r3
 800682c:	b219      	sxth	r1, r3
 800682e:	88fb      	ldrh	r3, [r7, #6]
 8006830:	3301      	adds	r3, #1
 8006832:	b29b      	uxth	r3, r3
 8006834:	b21c      	sxth	r4, r3
 8006836:	883b      	ldrh	r3, [r7, #0]
 8006838:	3b02      	subs	r3, #2
 800683a:	b29b      	uxth	r3, r3
 800683c:	b21d      	sxth	r5, r3
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	1c9a      	adds	r2, r3, #2
 8006842:	61ba      	str	r2, [r7, #24]
 8006844:	881b      	ldrh	r3, [r3, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462b      	mov	r3, r5
 800684a:	4622      	mov	r2, r4
 800684c:	f7fe fe7a 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006850:	88fb      	ldrh	r3, [r7, #6]
 8006852:	3301      	adds	r3, #1
 8006854:	b29b      	uxth	r3, r3
 8006856:	b218      	sxth	r0, r3
 8006858:	883b      	ldrh	r3, [r7, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	b29b      	uxth	r3, r3
 800685e:	b219      	sxth	r1, r3
 8006860:	887b      	ldrh	r3, [r7, #2]
 8006862:	3b01      	subs	r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	b21c      	sxth	r4, r3
 8006868:	883b      	ldrh	r3, [r7, #0]
 800686a:	3b01      	subs	r3, #1
 800686c:	b29b      	uxth	r3, r3
 800686e:	b21d      	sxth	r5, r3
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	1c9a      	adds	r2, r3, #2
 8006874:	61ba      	str	r2, [r7, #24]
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462b      	mov	r3, r5
 800687c:	4622      	mov	r2, r4
 800687e:	f7fe fe61 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	3b01      	subs	r3, #1
 8006886:	b29b      	uxth	r3, r3
 8006888:	b218      	sxth	r0, r3
 800688a:	88bb      	ldrh	r3, [r7, #4]
 800688c:	3301      	adds	r3, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	b219      	sxth	r1, r3
 8006892:	887b      	ldrh	r3, [r7, #2]
 8006894:	3b01      	subs	r3, #1
 8006896:	b29b      	uxth	r3, r3
 8006898:	b21c      	sxth	r4, r3
 800689a:	883b      	ldrh	r3, [r7, #0]
 800689c:	3b02      	subs	r3, #2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	b21d      	sxth	r5, r3
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	61ba      	str	r2, [r7, #24]
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	462b      	mov	r3, r5
 80068ae:	4622      	mov	r2, r4
 80068b0:	f7fe fe48 	bl	8005544 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	3302      	adds	r3, #2
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	b218      	sxth	r0, r3
 80068bc:	88bb      	ldrh	r3, [r7, #4]
 80068be:	3302      	adds	r3, #2
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	b219      	sxth	r1, r3
 80068c4:	887b      	ldrh	r3, [r7, #2]
 80068c6:	3b03      	subs	r3, #3
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b21c      	sxth	r4, r3
 80068cc:	88bb      	ldrh	r3, [r7, #4]
 80068ce:	3302      	adds	r3, #2
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	b21d      	sxth	r5, r3
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	61ba      	str	r2, [r7, #24]
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	462b      	mov	r3, r5
 80068e0:	4622      	mov	r2, r4
 80068e2:	f7fe fe2f 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	3302      	adds	r3, #2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	b218      	sxth	r0, r3
 80068ee:	88bb      	ldrh	r3, [r7, #4]
 80068f0:	3303      	adds	r3, #3
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	b219      	sxth	r1, r3
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	3302      	adds	r3, #2
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	b21c      	sxth	r4, r3
 80068fe:	883b      	ldrh	r3, [r7, #0]
 8006900:	3b03      	subs	r3, #3
 8006902:	b29b      	uxth	r3, r3
 8006904:	b21d      	sxth	r5, r3
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	61ba      	str	r2, [r7, #24]
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	462b      	mov	r3, r5
 8006912:	4622      	mov	r2, r4
 8006914:	f7fe fe16 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	3302      	adds	r3, #2
 800691c:	b29b      	uxth	r3, r3
 800691e:	b218      	sxth	r0, r3
 8006920:	883b      	ldrh	r3, [r7, #0]
 8006922:	3b02      	subs	r3, #2
 8006924:	b29b      	uxth	r3, r3
 8006926:	b219      	sxth	r1, r3
 8006928:	887b      	ldrh	r3, [r7, #2]
 800692a:	3b02      	subs	r3, #2
 800692c:	b29b      	uxth	r3, r3
 800692e:	b21c      	sxth	r4, r3
 8006930:	883b      	ldrh	r3, [r7, #0]
 8006932:	3b02      	subs	r3, #2
 8006934:	b29b      	uxth	r3, r3
 8006936:	b21d      	sxth	r5, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	1c9a      	adds	r2, r3, #2
 800693c:	61ba      	str	r2, [r7, #24]
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	462b      	mov	r3, r5
 8006944:	4622      	mov	r2, r4
 8006946:	f7fe fdfd 	bl	8005544 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800694a:	887b      	ldrh	r3, [r7, #2]
 800694c:	3b02      	subs	r3, #2
 800694e:	b29b      	uxth	r3, r3
 8006950:	b218      	sxth	r0, r3
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	3302      	adds	r3, #2
 8006956:	b29b      	uxth	r3, r3
 8006958:	b219      	sxth	r1, r3
 800695a:	887b      	ldrh	r3, [r7, #2]
 800695c:	3b02      	subs	r3, #2
 800695e:	b29b      	uxth	r3, r3
 8006960:	b21a      	sxth	r2, r3
 8006962:	883b      	ldrh	r3, [r7, #0]
 8006964:	3b03      	subs	r3, #3
 8006966:	b29b      	uxth	r3, r3
 8006968:	b21c      	sxth	r4, r3
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	4623      	mov	r3, r4
 8006972:	f7fe fde7 	bl	8005544 <UG_DrawLine>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006980 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8006986:	4b5e      	ldr	r3, [pc, #376]	@ (8006b00 <UG_Update+0x180>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UG_Update+0x2c>
 8006996:	4b5a      	ldr	r3, [pc, #360]	@ (8006b00 <UG_Update+0x180>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 800699e:	4b58      	ldr	r3, [pc, #352]	@ (8006b00 <UG_Update+0x180>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80069ac:	4b54      	ldr	r3, [pc, #336]	@ (8006b00 <UG_Update+0x180>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	4b53      	ldr	r3, [pc, #332]	@ (8006b00 <UG_Update+0x180>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d071      	beq.n	8006aa0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80069bc:	4b50      	ldr	r3, [pc, #320]	@ (8006b00 <UG_Update+0x180>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d06c      	beq.n	8006aa0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80069c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006b00 <UG_Update+0x180>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006b00 <UG_Update+0x180>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6912      	ldr	r2, [r2, #16]
 80069d0:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 80069d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006b00 <UG_Update+0x180>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006b00 <UG_Update+0x180>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68d2      	ldr	r2, [r2, #12]
 80069dc:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80069de:	4b48      	ldr	r3, [pc, #288]	@ (8006b00 <UG_Update+0x180>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d045      	beq.n	8006a74 <UG_Update+0xf4>
 80069e8:	4b45      	ldr	r3, [pc, #276]	@ (8006b00 <UG_Update+0x180>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	7d9b      	ldrb	r3, [r3, #22]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d03d      	beq.n	8006a74 <UG_Update+0xf4>
 80069f8:	4b41      	ldr	r3, [pc, #260]	@ (8006b00 <UG_Update+0x180>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	7a1b      	ldrb	r3, [r3, #8]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d035      	beq.n	8006a74 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006a08:	4b3d      	ldr	r3, [pc, #244]	@ (8006b00 <UG_Update+0x180>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006a12:	4b3b      	ldr	r3, [pc, #236]	@ (8006b00 <UG_Update+0x180>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d123      	bne.n	8006a68 <UG_Update+0xe8>
 8006a20:	4b37      	ldr	r3, [pc, #220]	@ (8006b00 <UG_Update+0x180>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006a2a:	4b35      	ldr	r3, [pc, #212]	@ (8006b00 <UG_Update+0x180>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d117      	bne.n	8006a68 <UG_Update+0xe8>
 8006a38:	4b31      	ldr	r3, [pc, #196]	@ (8006b00 <UG_Update+0x180>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8006a42:	4b2f      	ldr	r3, [pc, #188]	@ (8006b00 <UG_Update+0x180>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d10b      	bne.n	8006a68 <UG_Update+0xe8>
 8006a50:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <UG_Update+0x180>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8006a5a:	4b29      	ldr	r3, [pc, #164]	@ (8006b00 <UG_Update+0x180>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d005      	beq.n	8006a74 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8006a68:	4b25      	ldr	r3, [pc, #148]	@ (8006b00 <UG_Update+0x180>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f848 	bl	8006b04 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8006a74:	4b22      	ldr	r3, [pc, #136]	@ (8006b00 <UG_Update+0x180>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	7a1a      	ldrb	r2, [r3, #8]
 8006a7c:	4b20      	ldr	r3, [pc, #128]	@ (8006b00 <UG_Update+0x180>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8006a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <UG_Update+0x180>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	7a1a      	ldrb	r2, [r3, #8]
 8006a92:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <UG_Update+0x180>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <UG_Update+0x180>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01b      	beq.n	8006ae2 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8006aaa:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <UG_Update+0x180>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7a1b      	ldrb	r3, [r3, #8]
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8c8 	bl	8006c54 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	7a1b      	ldrb	r3, [r3, #8]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fba3 	bl	800621c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff fc56 	bl	8006388 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff fc9d 	bl	800641c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006ae2:	4b07      	ldr	r3, [pc, #28]	@ (8006b00 <UG_Update+0x180>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <UG_Update+0x178>
     gui->device->flush();
 8006aee:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <UG_Update+0x180>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	4798      	blx	r3
   }
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	2001c4d0 	.word	0x2001c4d0

08006b04 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8006b04:	b590      	push	{r4, r7, lr}
 8006b06:	b08f      	sub	sp, #60	@ 0x3c
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8098 	beq.w	8006c44 <_UG_WindowDrawTitle+0x140>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7a1b      	ldrb	r3, [r3, #8]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8091 	beq.w	8006c44 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	89db      	ldrh	r3, [r3, #14]
 8006b26:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	8a1b      	ldrh	r3, [r3, #16]
 8006b2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8a5b      	ldrh	r3, [r3, #18]
 8006b32:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8a9b      	ldrh	r3, [r3, #20]
 8006b38:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7d9b      	ldrb	r3, [r3, #22]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00f      	beq.n	8006b66 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8006b46:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006b48:	3303      	adds	r3, #3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 8006b4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b50:	3303      	adds	r3, #3
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8006b56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b58:	3b03      	subs	r3, #3
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 8006b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b60:	3b03      	subs	r3, #3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8006b66:	4b3a      	ldr	r3, [pc, #232]	@ (8006c50 <_UG_WindowDrawTitle+0x14c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d106      	bne.n	8006b80 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b76:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006b7c:	83bb      	strh	r3, [r7, #28]
 8006b7e:	e005      	b.n	8006b8c <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b84:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8a:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b92:	461a      	mov	r2, r3
 8006b94:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006b96:	4413      	add	r3, r2
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b21c      	sxth	r4, r3
 8006ba0:	8bfb      	ldrh	r3, [r7, #30]
 8006ba2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006ba6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8006baa:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4623      	mov	r3, r4
 8006bb2:	f7fe fc55 	bl	8005460 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8006bc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006bc4:	3303      	adds	r3, #3
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	b21b      	sxth	r3, r3
 8006bca:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8006bcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006bce:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8006bd0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006bd2:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006bda:	461a      	mov	r2, r3
 8006bdc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006bde:	4413      	add	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b21b      	sxth	r3, r3
 8006be8:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006bf0:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006bfa:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8006c02:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8006c04:	f107 030c 	add.w	r3, r7, #12
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fc53 	bl	80064b4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c14:	461a      	mov	r2, r3
 8006c16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c18:	4413      	add	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	b219      	sxth	r1, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c24:	461a      	mov	r2, r3
 8006c26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006c28:	4413      	add	r3, r2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	b21b      	sxth	r3, r3
 8006c2e:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8006c32:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8006c36:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8006c3a:	9400      	str	r4, [sp, #0]
 8006c3c:	f7fe fc82 	bl	8005544 <UG_DrawLine>
      return UG_RESULT_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e001      	b.n	8006c48 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8006c44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3734      	adds	r7, #52	@ 0x34
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd90      	pop	{r4, r7, pc}
 8006c50:	2001c4d0 	.word	0x2001c4d0

08006c54 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b089      	sub	sp, #36	@ 0x24
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	89db      	ldrh	r3, [r3, #14]
 8006c60:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	8a1b      	ldrh	r3, [r3, #16]
 8006c66:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8a5b      	ldrh	r3, [r3, #18]
 8006c6c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8a9b      	ldrh	r3, [r3, #20]
 8006c72:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	7a1b      	ldrb	r3, [r3, #8]
 8006c78:	f023 0320 	bic.w	r3, r3, #32
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7a1b      	ldrb	r3, [r3, #8]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8084 	beq.w	8006d98 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7d9b      	ldrb	r3, [r3, #22]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d021      	beq.n	8006ce0 <_UG_WindowUpdate+0x8c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7a1b      	ldrb	r3, [r3, #8]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11b      	bne.n	8006ce0 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cac:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006cb0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006cb4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006cb8:	4c43      	ldr	r4, [pc, #268]	@ (8006dc8 <_UG_WindowUpdate+0x174>)
 8006cba:	9400      	str	r4, [sp, #0]
 8006cbc:	f7ff fd3e 	bl	800673c <_UG_DrawObjectFrame>
         xs+=3;
 8006cc0:	8abb      	ldrh	r3, [r7, #20]
 8006cc2:	3303      	adds	r3, #3
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8006cc8:	8a7b      	ldrh	r3, [r7, #18]
 8006cca:	3303      	adds	r3, #3
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8006cd0:	8a3b      	ldrh	r3, [r7, #16]
 8006cd2:	3b03      	subs	r3, #3
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8006cd8:	89fb      	ldrh	r3, [r7, #14]
 8006cda:	3b03      	subs	r3, #3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7d9b      	ldrb	r3, [r3, #22]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01a      	beq.n	8006d22 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7ff ff09 	bl	8006b04 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	8a7b      	ldrh	r3, [r7, #18]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3301      	adds	r3, #1
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	7a1b      	ldrb	r3, [r3, #8]
 8006d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7a1b      	ldrb	r3, [r3, #8]
 8006d16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	721a      	strb	r2, [r3, #8]
            return;
 8006d20:	e04e      	b.n	8006dc0 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	899b      	ldrh	r3, [r3, #12]
 8006d26:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8006d2a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006d2e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8006d32:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4623      	mov	r3, r4
 8006d3a:	f7fe fb91 	bl	8005460 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	82fb      	strh	r3, [r7, #22]
 8006d48:	e021      	b.n	8006d8e <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	8afb      	ldrh	r3, [r7, #22]
 8006d50:	015b      	lsls	r3, r3, #5
 8006d52:	4413      	add	r3, r2
 8006d54:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d112      	bne.n	8006d88 <_UG_WindowUpdate+0x134>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <_UG_WindowUpdate+0x134>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d006      	beq.n	8006d88 <_UG_WindowUpdate+0x134>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8006d88:	8afb      	ldrh	r3, [r7, #22]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	82fb      	strh	r3, [r7, #22]
 8006d8e:	8afa      	ldrh	r2, [r7, #22]
 8006d90:	89bb      	ldrh	r3, [r7, #12]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d3d9      	bcc.n	8006d4a <_UG_WindowUpdate+0xf6>
 8006d96:	e013      	b.n	8006dc0 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <_UG_WindowUpdate+0x178>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	4623      	mov	r3, r4
 8006dbc:	f7fe fb50 	bl	8005460 <UG_FillFrame>
   }
}
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08016128 	.word	0x08016128
 8006dcc:	2001c4d0 	.word	0x2001c4d0

08006dd0 <_ZdlPvj>:
 8006dd0:	f000 b960 	b.w	8007094 <_ZdlPv>

08006dd4 <_ZNSaIcEC1Ev>:
 8006dd4:	4770      	bx	lr

08006dd6 <_ZNSaIcED1Ev>:
 8006dd6:	4770      	bx	lr

08006dd8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8006dd8:	b10a      	cbz	r2, 8006dde <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8006dda:	f000 bacb 	b.w	8007374 <memcpy>
 8006dde:	4770      	bx	lr

08006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8006de0:	f850 3b08 	ldr.w	r3, [r0], #8
 8006de4:	1a1b      	subs	r3, r3, r0
 8006de6:	4258      	negs	r0, r3
 8006de8:	4158      	adcs	r0, r3
 8006dea:	4770      	bx	lr

08006dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006dec:	b508      	push	{r3, lr}
 8006dee:	680b      	ldr	r3, [r1, #0]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df4:	d302      	bcc.n	8006dfc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8006df6:	480d      	ldr	r0, [pc, #52]	@ (8006e2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006df8:	f000 f962 	bl	80070c0 <_ZSt20__throw_length_errorPKc>
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d90b      	bls.n	8006e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006e00:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8006e04:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006e08:	d206      	bcs.n	8006e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006e0a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006e0e:	bf2a      	itet	cs
 8006e10:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 8006e14:	6008      	strcc	r0, [r1, #0]
 8006e16:	600b      	strcs	r3, [r1, #0]
 8006e18:	6808      	ldr	r0, [r1, #0]
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	d501      	bpl.n	8006e22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006e1e:	f000 f94c 	bl	80070ba <_ZSt17__throw_bad_allocv>
 8006e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e26:	f000 b937 	b.w	8007098 <_Znwj>
 8006e2a:	bf00      	nop
 8006e2c:	08016140 	.word	0x08016140

08006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006e30:	b510      	push	{r4, lr}
 8006e32:	4604      	mov	r4, r0
 8006e34:	f7ff ffd4 	bl	8006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006e38:	b920      	cbnz	r0, 8006e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f000 b928 	b.w	8007094 <_ZdlPv>
 8006e44:	bd10      	pop	{r4, pc}

08006e46 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8006e46:	6840      	ldr	r0, [r0, #4]
 8006e48:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8006e4c:	3901      	subs	r1, #1
 8006e4e:	1a09      	subs	r1, r1, r0
 8006e50:	4291      	cmp	r1, r2
 8006e52:	b508      	push	{r3, lr}
 8006e54:	d202      	bcs.n	8006e5c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f932 	bl	80070c0 <_ZSt20__throw_length_errorPKc>
 8006e5c:	bd08      	pop	{r3, pc}

08006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006e5e:	2a01      	cmp	r2, #1
 8006e60:	b410      	push	{r4}
 8006e62:	d104      	bne.n	8006e6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8006e64:	780a      	ldrb	r2, [r1, #0]
 8006e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e6a:	7002      	strb	r2, [r0, #0]
 8006e6c:	4770      	bx	lr
 8006e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e72:	f7ff bfb1 	b.w	8006dd8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08006e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8006e76:	460b      	mov	r3, r1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	b410      	push	{r4}
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4604      	mov	r4, r0
 8006e80:	d103      	bne.n	8006e8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8006e82:	7022      	strb	r2, [r4, #0]
 8006e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0fa      	beq.n	8006e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8006e8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 b9e6 	b.w	8007264 <memset>

08006e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8006e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e9a:	290f      	cmp	r1, #15
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	9101      	str	r1, [sp, #4]
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	d906      	bls.n	8006eb2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	a901      	add	r1, sp, #4
 8006ea8:	f7ff ffa0 	bl	8006dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006eac:	9b01      	ldr	r3, [sp, #4]
 8006eae:	6020      	str	r0, [r4, #0]
 8006eb0:	60a3      	str	r3, [r4, #8]
 8006eb2:	9901      	ldr	r1, [sp, #4]
 8006eb4:	b119      	cbz	r1, 8006ebe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	462a      	mov	r2, r5
 8006eba:	f7ff ffdc 	bl	8006e76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	6822      	ldr	r2, [r4, #0]
 8006ec2:	6063      	str	r3, [r4, #4]
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	54d1      	strb	r1, [r2, r3]
 8006ec8:	b003      	add	sp, #12
 8006eca:	bd30      	pop	{r4, r5, pc}

08006ecc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006ecc:	f100 0208 	add.w	r2, r0, #8
 8006ed0:	6002      	str	r2, [r0, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	6042      	str	r2, [r0, #4]
 8006ed6:	7202      	strb	r2, [r0, #8]
 8006ed8:	4770      	bx	lr

08006eda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8006eda:	b510      	push	{r4, lr}
 8006edc:	f100 0308 	add.w	r3, r0, #8
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	6003      	str	r3, [r0, #0]
 8006ee4:	f7ff ffd8 	bl	8006e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8006ee8:	4620      	mov	r0, r4
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	f100 0708 	add.w	r7, r0, #8
 8006ef2:	6007      	str	r7, [r0, #0]
 8006ef4:	4605      	mov	r5, r0
 8006ef6:	4608      	mov	r0, r1
 8006ef8:	460c      	mov	r4, r1
 8006efa:	f7ff ff71 	bl	8006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006efe:	f104 0608 	add.w	r6, r4, #8
 8006f02:	6862      	ldr	r2, [r4, #4]
 8006f04:	b160      	cbz	r0, 8006f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 8006f06:	3201      	adds	r2, #1
 8006f08:	4631      	mov	r1, r6
 8006f0a:	4638      	mov	r0, r7
 8006f0c:	f7ff ff64 	bl	8006dd8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	606b      	str	r3, [r5, #4]
 8006f14:	2300      	movs	r3, #0
 8006f16:	7223      	strb	r3, [r4, #8]
 8006f18:	6026      	str	r6, [r4, #0]
 8006f1a:	6063      	str	r3, [r4, #4]
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	602b      	str	r3, [r5, #0]
 8006f24:	68a3      	ldr	r3, [r4, #8]
 8006f26:	60ab      	str	r3, [r5, #8]
 8006f28:	e7f2      	b.n	8006f10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

08006f2a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	f7ff ff7f 	bl	8006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8006f32:	4620      	mov	r0, r4
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8006f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f38:	460c      	mov	r4, r1
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	f7ff ff50 	bl	8006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006f40:	4606      	mov	r6, r0
 8006f42:	4620      	mov	r0, r4
 8006f44:	f7ff ff4c 	bl	8006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006f48:	b190      	cbz	r0, 8006f70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8006f4a:	42a5      	cmp	r5, r4
 8006f4c:	d00a      	beq.n	8006f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006f4e:	6862      	ldr	r2, [r4, #4]
 8006f50:	b11a      	cbz	r2, 8006f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8006f52:	6821      	ldr	r1, [r4, #0]
 8006f54:	6828      	ldr	r0, [r5, #0]
 8006f56:	f7ff ff82 	bl	8006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	682a      	ldr	r2, [r5, #0]
 8006f5e:	606b      	str	r3, [r5, #4]
 8006f60:	2100      	movs	r1, #0
 8006f62:	54d1      	strb	r1, [r2, r3]
 8006f64:	6822      	ldr	r2, [r4, #0]
 8006f66:	2300      	movs	r3, #0
 8006f68:	6063      	str	r3, [r4, #4]
 8006f6a:	7013      	strb	r3, [r2, #0]
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f70:	b90e      	cbnz	r6, 8006f76 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8006f72:	6828      	ldr	r0, [r5, #0]
 8006f74:	68af      	ldr	r7, [r5, #8]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	6863      	ldr	r3, [r4, #4]
 8006f7c:	606b      	str	r3, [r5, #4]
 8006f7e:	68a3      	ldr	r3, [r4, #8]
 8006f80:	60ab      	str	r3, [r5, #8]
 8006f82:	b110      	cbz	r0, 8006f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 8006f84:	6020      	str	r0, [r4, #0]
 8006f86:	60a7      	str	r7, [r4, #8]
 8006f88:	e7ec      	b.n	8006f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8006f8a:	f104 0308 	add.w	r3, r4, #8
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	e7e8      	b.n	8006f64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08006f92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8006f92:	6840      	ldr	r0, [r0, #4]
 8006f94:	4770      	bx	lr

08006f96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8006f96:	b510      	push	{r4, lr}
 8006f98:	4604      	mov	r4, r0
 8006f9a:	f7ff ff21 	bl	8006de0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8006f9e:	b908      	cbnz	r0, 8006fa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8006fa0:	68a0      	ldr	r0, [r4, #8]
 8006fa2:	bd10      	pop	{r4, pc}
 8006fa4:	200f      	movs	r0, #15
 8006fa6:	e7fc      	b.n	8006fa2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

08006fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006fa8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006fae:	461f      	mov	r7, r3
 8006fb0:	6843      	ldr	r3, [r0, #4]
 8006fb2:	eb01 0802 	add.w	r8, r1, r2
 8006fb6:	1ab2      	subs	r2, r6, r2
 8006fb8:	441a      	add	r2, r3
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	eba3 0908 	sub.w	r9, r3, r8
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	f7ff ffe7 	bl	8006f96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8006fc8:	a901      	add	r1, sp, #4
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f7ff ff0d 	bl	8006dec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	b11d      	cbz	r5, 8006fde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8006fd6:	6821      	ldr	r1, [r4, #0]
 8006fd8:	462a      	mov	r2, r5
 8006fda:	f7ff ff40 	bl	8006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006fde:	b137      	cbz	r7, 8006fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006fe0:	b12e      	cbz	r6, 8006fee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8006fe2:	4632      	mov	r2, r6
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	eb0a 0005 	add.w	r0, sl, r5
 8006fea:	f7ff ff38 	bl	8006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006fee:	f1b9 0f00 	cmp.w	r9, #0
 8006ff2:	d007      	beq.n	8007004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	4435      	add	r5, r6
 8006ff8:	464a      	mov	r2, r9
 8006ffa:	4441      	add	r1, r8
 8006ffc:	eb0a 0005 	add.w	r0, sl, r5
 8007000:	f7ff ff2d 	bl	8006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007004:	4620      	mov	r0, r4
 8007006:	f7ff ff13 	bl	8006e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	f8c4 a000 	str.w	sl, [r4]
 8007010:	60a3      	str	r3, [r4, #8]
 8007012:	b002      	add	sp, #8
 8007014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8007018:	6800      	ldr	r0, [r0, #0]
 800701a:	4408      	add	r0, r1
 800701c:	4770      	bx	lr

0800701e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800701e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007022:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007026:	4604      	mov	r4, r0
 8007028:	eb02 0708 	add.w	r7, r2, r8
 800702c:	460e      	mov	r6, r1
 800702e:	4615      	mov	r5, r2
 8007030:	f7ff ffb1 	bl	8006f96 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 8007034:	42b8      	cmp	r0, r7
 8007036:	d30e      	bcc.n	8007056 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 8007038:	b12d      	cbz	r5, 8007046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 800703a:	6820      	ldr	r0, [r4, #0]
 800703c:	462a      	mov	r2, r5
 800703e:	4631      	mov	r1, r6
 8007040:	4440      	add	r0, r8
 8007042:	f7ff ff0c 	bl	8006e5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	6067      	str	r7, [r4, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	4620      	mov	r0, r4
 800704e:	55da      	strb	r2, [r3, r7]
 8007050:	b002      	add	sp, #8
 8007052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007056:	9500      	str	r5, [sp, #0]
 8007058:	4633      	mov	r3, r6
 800705a:	2200      	movs	r2, #0
 800705c:	4641      	mov	r1, r8
 800705e:	4620      	mov	r0, r4
 8007060:	f7ff ffa2 	bl	8006fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8007064:	e7ef      	b.n	8007046 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
	...

08007068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	460d      	mov	r5, r1
 8007070:	f7f9 f8b2 	bl	80001d8 <strlen>
 8007074:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 8007076:	4606      	mov	r6, r0
 8007078:	4602      	mov	r2, r0
 800707a:	2100      	movs	r1, #0
 800707c:	4620      	mov	r0, r4
 800707e:	f7ff fee2 	bl	8006e46 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8007082:	4632      	mov	r2, r6
 8007084:	4629      	mov	r1, r5
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff ffc9 	bl	800701e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	bf00      	nop
 8007090:	08016158 	.word	0x08016158

08007094 <_ZdlPv>:
 8007094:	f000 b830 	b.w	80070f8 <free>

08007098 <_Znwj>:
 8007098:	2801      	cmp	r0, #1
 800709a:	bf38      	it	cc
 800709c:	2001      	movcc	r0, #1
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f820 	bl	80070e8 <malloc>
 80070a8:	b100      	cbz	r0, 80070ac <_Znwj+0x14>
 80070aa:	bd10      	pop	{r4, pc}
 80070ac:	f000 f80c 	bl	80070c8 <_ZSt15get_new_handlerv>
 80070b0:	b908      	cbnz	r0, 80070b6 <_Znwj+0x1e>
 80070b2:	f000 f811 	bl	80070d8 <abort>
 80070b6:	4780      	blx	r0
 80070b8:	e7f3      	b.n	80070a2 <_Znwj+0xa>

080070ba <_ZSt17__throw_bad_allocv>:
 80070ba:	b508      	push	{r3, lr}
 80070bc:	f000 f80c 	bl	80070d8 <abort>

080070c0 <_ZSt20__throw_length_errorPKc>:
 80070c0:	b508      	push	{r3, lr}
 80070c2:	f000 f809 	bl	80070d8 <abort>
	...

080070c8 <_ZSt15get_new_handlerv>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	@ (80070d4 <_ZSt15get_new_handlerv+0xc>)
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	f3bf 8f5b 	dmb	ish
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	2001c4ec 	.word	0x2001c4ec

080070d8 <abort>:
 80070d8:	b508      	push	{r3, lr}
 80070da:	2006      	movs	r0, #6
 80070dc:	f000 f8f2 	bl	80072c4 <raise>
 80070e0:	2001      	movs	r0, #1
 80070e2:	f7fa f92d 	bl	8001340 <_exit>
	...

080070e8 <malloc>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	@ (80070f4 <malloc+0xc>)
 80070ea:	4601      	mov	r1, r0
 80070ec:	6818      	ldr	r0, [r3, #0]
 80070ee:	f000 b82d 	b.w	800714c <_malloc_r>
 80070f2:	bf00      	nop
 80070f4:	20000030 	.word	0x20000030

080070f8 <free>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	@ (8007104 <free+0xc>)
 80070fa:	4601      	mov	r1, r0
 80070fc:	6818      	ldr	r0, [r3, #0]
 80070fe:	f000 b947 	b.w	8007390 <_free_r>
 8007102:	bf00      	nop
 8007104:	20000030 	.word	0x20000030

08007108 <sbrk_aligned>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4e0f      	ldr	r6, [pc, #60]	@ (8007148 <sbrk_aligned+0x40>)
 800710c:	460c      	mov	r4, r1
 800710e:	6831      	ldr	r1, [r6, #0]
 8007110:	4605      	mov	r5, r0
 8007112:	b911      	cbnz	r1, 800711a <sbrk_aligned+0x12>
 8007114:	f000 f8f2 	bl	80072fc <_sbrk_r>
 8007118:	6030      	str	r0, [r6, #0]
 800711a:	4621      	mov	r1, r4
 800711c:	4628      	mov	r0, r5
 800711e:	f000 f8ed 	bl	80072fc <_sbrk_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d103      	bne.n	800712e <sbrk_aligned+0x26>
 8007126:	f04f 34ff 	mov.w	r4, #4294967295
 800712a:	4620      	mov	r0, r4
 800712c:	bd70      	pop	{r4, r5, r6, pc}
 800712e:	1cc4      	adds	r4, r0, #3
 8007130:	f024 0403 	bic.w	r4, r4, #3
 8007134:	42a0      	cmp	r0, r4
 8007136:	d0f8      	beq.n	800712a <sbrk_aligned+0x22>
 8007138:	1a21      	subs	r1, r4, r0
 800713a:	4628      	mov	r0, r5
 800713c:	f000 f8de 	bl	80072fc <_sbrk_r>
 8007140:	3001      	adds	r0, #1
 8007142:	d1f2      	bne.n	800712a <sbrk_aligned+0x22>
 8007144:	e7ef      	b.n	8007126 <sbrk_aligned+0x1e>
 8007146:	bf00      	nop
 8007148:	2001c4f0 	.word	0x2001c4f0

0800714c <_malloc_r>:
 800714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007150:	1ccd      	adds	r5, r1, #3
 8007152:	f025 0503 	bic.w	r5, r5, #3
 8007156:	3508      	adds	r5, #8
 8007158:	2d0c      	cmp	r5, #12
 800715a:	bf38      	it	cc
 800715c:	250c      	movcc	r5, #12
 800715e:	2d00      	cmp	r5, #0
 8007160:	4606      	mov	r6, r0
 8007162:	db01      	blt.n	8007168 <_malloc_r+0x1c>
 8007164:	42a9      	cmp	r1, r5
 8007166:	d904      	bls.n	8007172 <_malloc_r+0x26>
 8007168:	230c      	movs	r3, #12
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	2000      	movs	r0, #0
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007248 <_malloc_r+0xfc>
 8007176:	f000 f869 	bl	800724c <__malloc_lock>
 800717a:	f8d8 3000 	ldr.w	r3, [r8]
 800717e:	461c      	mov	r4, r3
 8007180:	bb44      	cbnz	r4, 80071d4 <_malloc_r+0x88>
 8007182:	4629      	mov	r1, r5
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff ffbf 	bl	8007108 <sbrk_aligned>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	4604      	mov	r4, r0
 800718e:	d158      	bne.n	8007242 <_malloc_r+0xf6>
 8007190:	f8d8 4000 	ldr.w	r4, [r8]
 8007194:	4627      	mov	r7, r4
 8007196:	2f00      	cmp	r7, #0
 8007198:	d143      	bne.n	8007222 <_malloc_r+0xd6>
 800719a:	2c00      	cmp	r4, #0
 800719c:	d04b      	beq.n	8007236 <_malloc_r+0xea>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	4639      	mov	r1, r7
 80071a2:	4630      	mov	r0, r6
 80071a4:	eb04 0903 	add.w	r9, r4, r3
 80071a8:	f000 f8a8 	bl	80072fc <_sbrk_r>
 80071ac:	4581      	cmp	r9, r0
 80071ae:	d142      	bne.n	8007236 <_malloc_r+0xea>
 80071b0:	6821      	ldr	r1, [r4, #0]
 80071b2:	1a6d      	subs	r5, r5, r1
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f7ff ffa6 	bl	8007108 <sbrk_aligned>
 80071bc:	3001      	adds	r0, #1
 80071be:	d03a      	beq.n	8007236 <_malloc_r+0xea>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	442b      	add	r3, r5
 80071c4:	6023      	str	r3, [r4, #0]
 80071c6:	f8d8 3000 	ldr.w	r3, [r8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	bb62      	cbnz	r2, 8007228 <_malloc_r+0xdc>
 80071ce:	f8c8 7000 	str.w	r7, [r8]
 80071d2:	e00f      	b.n	80071f4 <_malloc_r+0xa8>
 80071d4:	6822      	ldr	r2, [r4, #0]
 80071d6:	1b52      	subs	r2, r2, r5
 80071d8:	d420      	bmi.n	800721c <_malloc_r+0xd0>
 80071da:	2a0b      	cmp	r2, #11
 80071dc:	d917      	bls.n	800720e <_malloc_r+0xc2>
 80071de:	1961      	adds	r1, r4, r5
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	6025      	str	r5, [r4, #0]
 80071e4:	bf18      	it	ne
 80071e6:	6059      	strne	r1, [r3, #4]
 80071e8:	6863      	ldr	r3, [r4, #4]
 80071ea:	bf08      	it	eq
 80071ec:	f8c8 1000 	streq.w	r1, [r8]
 80071f0:	5162      	str	r2, [r4, r5]
 80071f2:	604b      	str	r3, [r1, #4]
 80071f4:	4630      	mov	r0, r6
 80071f6:	f000 f82f 	bl	8007258 <__malloc_unlock>
 80071fa:	f104 000b 	add.w	r0, r4, #11
 80071fe:	1d23      	adds	r3, r4, #4
 8007200:	f020 0007 	bic.w	r0, r0, #7
 8007204:	1ac2      	subs	r2, r0, r3
 8007206:	bf1c      	itt	ne
 8007208:	1a1b      	subne	r3, r3, r0
 800720a:	50a3      	strne	r3, [r4, r2]
 800720c:	e7af      	b.n	800716e <_malloc_r+0x22>
 800720e:	6862      	ldr	r2, [r4, #4]
 8007210:	42a3      	cmp	r3, r4
 8007212:	bf0c      	ite	eq
 8007214:	f8c8 2000 	streq.w	r2, [r8]
 8007218:	605a      	strne	r2, [r3, #4]
 800721a:	e7eb      	b.n	80071f4 <_malloc_r+0xa8>
 800721c:	4623      	mov	r3, r4
 800721e:	6864      	ldr	r4, [r4, #4]
 8007220:	e7ae      	b.n	8007180 <_malloc_r+0x34>
 8007222:	463c      	mov	r4, r7
 8007224:	687f      	ldr	r7, [r7, #4]
 8007226:	e7b6      	b.n	8007196 <_malloc_r+0x4a>
 8007228:	461a      	mov	r2, r3
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	42a3      	cmp	r3, r4
 800722e:	d1fb      	bne.n	8007228 <_malloc_r+0xdc>
 8007230:	2300      	movs	r3, #0
 8007232:	6053      	str	r3, [r2, #4]
 8007234:	e7de      	b.n	80071f4 <_malloc_r+0xa8>
 8007236:	230c      	movs	r3, #12
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	4630      	mov	r0, r6
 800723c:	f000 f80c 	bl	8007258 <__malloc_unlock>
 8007240:	e794      	b.n	800716c <_malloc_r+0x20>
 8007242:	6005      	str	r5, [r0, #0]
 8007244:	e7d6      	b.n	80071f4 <_malloc_r+0xa8>
 8007246:	bf00      	nop
 8007248:	2001c4f4 	.word	0x2001c4f4

0800724c <__malloc_lock>:
 800724c:	4801      	ldr	r0, [pc, #4]	@ (8007254 <__malloc_lock+0x8>)
 800724e:	f000 b88f 	b.w	8007370 <__retarget_lock_acquire_recursive>
 8007252:	bf00      	nop
 8007254:	2001c634 	.word	0x2001c634

08007258 <__malloc_unlock>:
 8007258:	4801      	ldr	r0, [pc, #4]	@ (8007260 <__malloc_unlock+0x8>)
 800725a:	f000 b88a 	b.w	8007372 <__retarget_lock_release_recursive>
 800725e:	bf00      	nop
 8007260:	2001c634 	.word	0x2001c634

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <_raise_r>:
 8007274:	291f      	cmp	r1, #31
 8007276:	b538      	push	{r3, r4, r5, lr}
 8007278:	4605      	mov	r5, r0
 800727a:	460c      	mov	r4, r1
 800727c:	d904      	bls.n	8007288 <_raise_r+0x14>
 800727e:	2316      	movs	r3, #22
 8007280:	6003      	str	r3, [r0, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800728a:	b112      	cbz	r2, 8007292 <_raise_r+0x1e>
 800728c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007290:	b94b      	cbnz	r3, 80072a6 <_raise_r+0x32>
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f830 	bl	80072f8 <_getpid_r>
 8007298:	4622      	mov	r2, r4
 800729a:	4601      	mov	r1, r0
 800729c:	4628      	mov	r0, r5
 800729e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a2:	f000 b817 	b.w	80072d4 <_kill_r>
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d00a      	beq.n	80072c0 <_raise_r+0x4c>
 80072aa:	1c59      	adds	r1, r3, #1
 80072ac:	d103      	bne.n	80072b6 <_raise_r+0x42>
 80072ae:	2316      	movs	r3, #22
 80072b0:	6003      	str	r3, [r0, #0]
 80072b2:	2001      	movs	r0, #1
 80072b4:	e7e7      	b.n	8007286 <_raise_r+0x12>
 80072b6:	2100      	movs	r1, #0
 80072b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072bc:	4620      	mov	r0, r4
 80072be:	4798      	blx	r3
 80072c0:	2000      	movs	r0, #0
 80072c2:	e7e0      	b.n	8007286 <_raise_r+0x12>

080072c4 <raise>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	@ (80072d0 <raise+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7ff bfd3 	b.w	8007274 <_raise_r>
 80072ce:	bf00      	nop
 80072d0:	20000030 	.word	0x20000030

080072d4 <_kill_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4d07      	ldr	r5, [pc, #28]	@ (80072f4 <_kill_r+0x20>)
 80072d8:	2300      	movs	r3, #0
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7fa f81d 	bl	8001320 <_kill>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_kill_r+0x1c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_kill_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	2001c630 	.word	0x2001c630

080072f8 <_getpid_r>:
 80072f8:	f7fa b80a 	b.w	8001310 <_getpid>

080072fc <_sbrk_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d06      	ldr	r5, [pc, #24]	@ (8007318 <_sbrk_r+0x1c>)
 8007300:	2300      	movs	r3, #0
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa f826 	bl	8001358 <_sbrk>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_sbrk_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_sbrk_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	2001c630 	.word	0x2001c630

0800731c <__errno>:
 800731c:	4b01      	ldr	r3, [pc, #4]	@ (8007324 <__errno+0x8>)
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000030 	.word	0x20000030

08007328 <__libc_init_array>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4d0d      	ldr	r5, [pc, #52]	@ (8007360 <__libc_init_array+0x38>)
 800732c:	4c0d      	ldr	r4, [pc, #52]	@ (8007364 <__libc_init_array+0x3c>)
 800732e:	1b64      	subs	r4, r4, r5
 8007330:	10a4      	asrs	r4, r4, #2
 8007332:	2600      	movs	r6, #0
 8007334:	42a6      	cmp	r6, r4
 8007336:	d109      	bne.n	800734c <__libc_init_array+0x24>
 8007338:	4d0b      	ldr	r5, [pc, #44]	@ (8007368 <__libc_init_array+0x40>)
 800733a:	4c0c      	ldr	r4, [pc, #48]	@ (800736c <__libc_init_array+0x44>)
 800733c:	f000 f872 	bl	8007424 <_init>
 8007340:	1b64      	subs	r4, r4, r5
 8007342:	10a4      	asrs	r4, r4, #2
 8007344:	2600      	movs	r6, #0
 8007346:	42a6      	cmp	r6, r4
 8007348:	d105      	bne.n	8007356 <__libc_init_array+0x2e>
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007350:	4798      	blx	r3
 8007352:	3601      	adds	r6, #1
 8007354:	e7ee      	b.n	8007334 <__libc_init_array+0xc>
 8007356:	f855 3b04 	ldr.w	r3, [r5], #4
 800735a:	4798      	blx	r3
 800735c:	3601      	adds	r6, #1
 800735e:	e7f2      	b.n	8007346 <__libc_init_array+0x1e>
 8007360:	08016178 	.word	0x08016178
 8007364:	08016178 	.word	0x08016178
 8007368:	08016178 	.word	0x08016178
 800736c:	08016180 	.word	0x08016180

08007370 <__retarget_lock_acquire_recursive>:
 8007370:	4770      	bx	lr

08007372 <__retarget_lock_release_recursive>:
 8007372:	4770      	bx	lr

08007374 <memcpy>:
 8007374:	440a      	add	r2, r1
 8007376:	4291      	cmp	r1, r2
 8007378:	f100 33ff 	add.w	r3, r0, #4294967295
 800737c:	d100      	bne.n	8007380 <memcpy+0xc>
 800737e:	4770      	bx	lr
 8007380:	b510      	push	{r4, lr}
 8007382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738a:	4291      	cmp	r1, r2
 800738c:	d1f9      	bne.n	8007382 <memcpy+0xe>
 800738e:	bd10      	pop	{r4, pc}

08007390 <_free_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4605      	mov	r5, r0
 8007394:	2900      	cmp	r1, #0
 8007396:	d041      	beq.n	800741c <_free_r+0x8c>
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f0c      	subs	r4, r1, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	18e4      	addlt	r4, r4, r3
 80073a4:	f7ff ff52 	bl	800724c <__malloc_lock>
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <_free_r+0x90>)
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	b933      	cbnz	r3, 80073bc <_free_r+0x2c>
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	4628      	mov	r0, r5
 80073b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b8:	f7ff bf4e 	b.w	8007258 <__malloc_unlock>
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d908      	bls.n	80073d2 <_free_r+0x42>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	1821      	adds	r1, r4, r0
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf01      	itttt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	e7ed      	b.n	80073ae <_free_r+0x1e>
 80073d2:	461a      	mov	r2, r3
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	b10b      	cbz	r3, 80073dc <_free_r+0x4c>
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d9fa      	bls.n	80073d2 <_free_r+0x42>
 80073dc:	6811      	ldr	r1, [r2, #0]
 80073de:	1850      	adds	r0, r2, r1
 80073e0:	42a0      	cmp	r0, r4
 80073e2:	d10b      	bne.n	80073fc <_free_r+0x6c>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	4401      	add	r1, r0
 80073e8:	1850      	adds	r0, r2, r1
 80073ea:	4283      	cmp	r3, r0
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	d1e0      	bne.n	80073b2 <_free_r+0x22>
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	6053      	str	r3, [r2, #4]
 80073f6:	4408      	add	r0, r1
 80073f8:	6010      	str	r0, [r2, #0]
 80073fa:	e7da      	b.n	80073b2 <_free_r+0x22>
 80073fc:	d902      	bls.n	8007404 <_free_r+0x74>
 80073fe:	230c      	movs	r3, #12
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	e7d6      	b.n	80073b2 <_free_r+0x22>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	1821      	adds	r1, r4, r0
 8007408:	428b      	cmp	r3, r1
 800740a:	bf04      	itt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	bf04      	itt	eq
 8007414:	1809      	addeq	r1, r1, r0
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	6054      	str	r4, [r2, #4]
 800741a:	e7ca      	b.n	80073b2 <_free_r+0x22>
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	2001c4f4 	.word	0x2001c4f4

08007424 <_init>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr

08007430 <_fini>:
 8007430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007432:	bf00      	nop
 8007434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007436:	bc08      	pop	{r3}
 8007438:	469e      	mov	lr, r3
 800743a:	4770      	bx	lr
